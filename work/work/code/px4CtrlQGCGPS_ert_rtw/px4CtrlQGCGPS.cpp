//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
//
// File: px4CtrlQGCGPS.cpp
//
// Code generated for Simulink model 'px4CtrlQGCGPS'.
//
// Model version                  : 5.30
// Simulink Coder version         : 9.7 (R2022a) 13-Nov-2021
// C/C++ source code generated on : Mon Mar 14 21:30:28 2022
//
// Target selection: ert.tlc
// Embedded hardware selection: ARM Compatible->ARM Cortex
// Code generation objectives: Unspecified
// Validation result: Not run
//
#include "px4CtrlQGCGPS.h"
#include "rtwtypes.h"
#include "px4CtrlQGCGPS_types.h"
#include "px4CtrlQGCGPS_private.h"
#include <math.h>

extern "C" {

#include "rt_nonfinite.h"

}
#include "rt_defines.h"
#include <float.h>
#include "zero_crossing_types.h"

// Block signals (default storage)
B_px4CtrlQGCGPS_T px4CtrlQGCGPS_B;

// Block states (default storage)
DW_px4CtrlQGCGPS_T px4CtrlQGCGPS_DW;

// Previous zero-crossings (trigger) states
PrevZCX_px4CtrlQGCGPS_T px4CtrlQGCGPS_PrevZCX;

// Real-time model
RT_MODEL_px4CtrlQGCGPS_T px4CtrlQGCGPS_M_ = RT_MODEL_px4CtrlQGCGPS_T();
RT_MODEL_px4CtrlQGCGPS_T *const px4CtrlQGCGPS_M = &px4CtrlQGCGPS_M_;

// Forward declaration for local functions
static void mt19937ar_genrand_uint32_vector(c_coder_internal_mt19937ar_px_T *obj,
  uint32_T u[2]);
static boolean_T px4CtrlQGCGPS_is_valid_state(const uint32_T mt[625]);
static real_T px4CtrlQGCGP_mt19937ar_genrandu(c_coder_internal_mt19937ar_px_T
  *obj);
static real_T px4CtrlQGCGPS_RandStream_rand_j(b_coder_internal_RandStream_p_T *s);
static real_T px_RandStream_inversionGenrandn(b_coder_internal_RandStream_p_T *s);
static void px4CtrlQGCGPS_RandStream_rand(b_coder_internal_RandStream_p_T *s,
  real_T u[2]);
static real_T px4Ctr_RandStream_polarGenrandn(b_coder_internal_RandStream_p_T
  *rs);
static real_T px4_RandStream_zigguratGenrandn(b_coder_internal_RandStream_p_T *s);
static real_T px4CtrlQGC_mt19937ar_mtziggurat(c_coder_internal_mt19937ar_px_T
  *obj);
static void GPSSensorBase_stepRandomStream(fusion_internal_simulink_gpsS_T *obj,
  real_T noise[3]);
static real_T px4CtrlQGCGPS_cosd(real_T x);
static real_T px4CtrlQGCGPS_sind(real_T x);
static real32_T px4CtrlQGCGPS_sind_j(real32_T x);
static real32_T px4CtrlQGCGPS_cosd_j(real32_T x);
static void px4CtrlQGCGPS_SystemCore_step(fusion_internal_simulink_gpsS_T *obj,
  const real32_T varargin_1[3], const real32_T varargin_2[3], real32_T
  varargout_1[3], real32_T varargout_2[3], real32_T *varargout_3, real32_T
  *varargout_4);
static void px4CtrlQGCGPS_SystemCore_setup(fusion_internal_simulink_gpsS_T *obj);
static void px4Ctrl_GPSSensorBase_resetImpl(fusion_internal_simulink_gpsS_T *obj);
static void px4CtrlQGCGP_SystemCore_setup_j(px4_internal_block_PWM_px4Ctr_T *obj,
  boolean_T varargin_1, boolean_T varargin_2);
static void rate_monotonic_scheduler(void);

//
// Set which subrates need to run this base step (base rate always runs).
// This function must be called prior to calling the model step function
// in order to remember which rates need to run this base step.  The
// buffering of events allows for overlapping preemption.
//
void px4CtrlQGCGPS_SetEventsForThisBaseStep(boolean_T *eventFlags)
{
  // Task runs when its counter is zero, computed via rtmStepTask macro
  eventFlags[1] = ((boolean_T)rtmStepTask(px4CtrlQGCGPS_M, 1));
}

//
//         This function updates active task flag for each subrate
//         and rate transition flags for tasks that exchange data.
//         The function assumes rate-monotonic multitasking scheduler.
//         The function must be called at model base rate so that
//         the generated code self-manages all its subrates and rate
//         transition flags.
//
static void rate_monotonic_scheduler(void)
{
  // Compute which subrates run during the next base time step.  Subrates
  //  are an integer multiple of the base rate counter.  Therefore, the subtask
  //  counter is reset when it reaches its limit (zero means run).

  (px4CtrlQGCGPS_M->Timing.TaskCounters.TID[1])++;
  if ((px4CtrlQGCGPS_M->Timing.TaskCounters.TID[1]) > 1) {// Sample time: [0.01s, 0.0s] 
    px4CtrlQGCGPS_M->Timing.TaskCounters.TID[1] = 0;
  }
}

//
// Output and update for atomic system:
//    '<S22>/MATLAB Function'
//    '<S31>/MATLAB Function'
//    '<S40>/MATLAB Function'
//
void px4CtrlQGCGP_MATLABFunction(boolean_T rtu_e, real_T rtu_t, real_T rtu_s_t,
  real_T rtu_y1, real_T rtu_y2, real_T *rty_y)
{
  if (rtu_t < 4.6) {
    *rty_y = rtu_y2;
  } else {
    real_T tmp;
    tmp = rtu_t - rtu_s_t;
    if (rtu_e && (tmp <= 4.6) && (rtu_t > 4.6)) {
      *rty_y = rtu_y1;
    } else if (rtu_e && (tmp > 4.6)) {
      *rty_y = rtu_y2;
    } else if ((!rtu_e) && (tmp <= 4.6) && (rtu_t > 4.6)) {
      *rty_y = rtu_y1;
    } else {
      *rty_y = rtu_y2;
    }
  }
}

real_T rt_powd_snf(real_T u0, real_T u1)
{
  real_T y;
  if (rtIsNaN(u0) || rtIsNaN(u1)) {
    y = (rtNaN);
  } else {
    real_T tmp;
    real_T tmp_0;
    tmp = fabs(u0);
    tmp_0 = fabs(u1);
    if (rtIsInf(u1)) {
      if (tmp == 1.0) {
        y = 1.0;
      } else if (tmp > 1.0) {
        if (u1 > 0.0) {
          y = (rtInf);
        } else {
          y = 0.0;
        }
      } else if (u1 > 0.0) {
        y = 0.0;
      } else {
        y = (rtInf);
      }
    } else if (tmp_0 == 0.0) {
      y = 1.0;
    } else if (tmp_0 == 1.0) {
      if (u1 > 0.0) {
        y = u0;
      } else {
        y = 1.0 / u0;
      }
    } else if (u1 == 2.0) {
      y = u0 * u0;
    } else if ((u1 == 0.5) && (u0 >= 0.0)) {
      y = sqrt(u0);
    } else if ((u0 < 0.0) && (u1 > floor(u1))) {
      y = (rtNaN);
    } else {
      y = pow(u0, u1);
    }
  }

  return y;
}

static void mt19937ar_genrand_uint32_vector(c_coder_internal_mt19937ar_px_T *obj,
  uint32_T u[2])
{
  for (int32_T b_j = 0; b_j < 2; b_j++) {
    px4CtrlQGCGPS_B.statei = obj->State[624] + 1U;
    if (obj->State[624] + 1U >= 625U) {
      for (int32_T b_kk = 0; b_kk < 227; b_kk++) {
        px4CtrlQGCGPS_B.y = (obj->State[b_kk + 1] & 2147483647U) | (obj->
          State[b_kk] & 2147483648U);
        if ((px4CtrlQGCGPS_B.y & 1U) == 0U) {
          px4CtrlQGCGPS_B.y >>= 1U;
        } else {
          px4CtrlQGCGPS_B.y = px4CtrlQGCGPS_B.y >> 1U ^ 2567483615U;
        }

        obj->State[b_kk] = obj->State[b_kk + 397] ^ px4CtrlQGCGPS_B.y;
      }

      for (int32_T b_kk = 0; b_kk < 396; b_kk++) {
        px4CtrlQGCGPS_B.y = (obj->State[b_kk + 227] & 2147483648U) | (obj->
          State[b_kk + 228] & 2147483647U);
        if ((px4CtrlQGCGPS_B.y & 1U) == 0U) {
          px4CtrlQGCGPS_B.y >>= 1U;
        } else {
          px4CtrlQGCGPS_B.y = px4CtrlQGCGPS_B.y >> 1U ^ 2567483615U;
        }

        obj->State[b_kk + 227] = obj->State[b_kk] ^ px4CtrlQGCGPS_B.y;
      }

      px4CtrlQGCGPS_B.y = (obj->State[623] & 2147483648U) | (obj->State[0] &
        2147483647U);
      if ((px4CtrlQGCGPS_B.y & 1U) == 0U) {
        px4CtrlQGCGPS_B.y >>= 1U;
      } else {
        px4CtrlQGCGPS_B.y = px4CtrlQGCGPS_B.y >> 1U ^ 2567483615U;
      }

      obj->State[623] = obj->State[396] ^ px4CtrlQGCGPS_B.y;
      px4CtrlQGCGPS_B.statei = 1U;
    }

    px4CtrlQGCGPS_B.y = obj->State[static_cast<int32_T>(px4CtrlQGCGPS_B.statei)
      - 1];
    obj->State[624] = px4CtrlQGCGPS_B.statei;
    px4CtrlQGCGPS_B.y ^= px4CtrlQGCGPS_B.y >> 11U;
    px4CtrlQGCGPS_B.y ^= px4CtrlQGCGPS_B.y << 7U & 2636928640U;
    px4CtrlQGCGPS_B.y ^= px4CtrlQGCGPS_B.y << 15U & 4022730752U;
    u[b_j] = px4CtrlQGCGPS_B.y >> 18U ^ px4CtrlQGCGPS_B.y;
  }
}

static boolean_T px4CtrlQGCGPS_is_valid_state(const uint32_T mt[625])
{
  boolean_T isvalid;
  if ((mt[624] >= 1U) && (mt[624] < 625U)) {
    isvalid = true;
  } else {
    isvalid = false;
  }

  if (isvalid) {
    int32_T k;
    boolean_T exitg1;
    isvalid = false;
    k = 0;
    exitg1 = false;
    while ((!exitg1) && (k + 1 < 625)) {
      if (mt[k] == 0U) {
        k++;
      } else {
        isvalid = true;
        exitg1 = true;
      }
    }
  }

  return isvalid;
}

static real_T px4CtrlQGCGP_mt19937ar_genrandu(c_coder_internal_mt19937ar_px_T
  *obj)
{
  real_T r;

  // ========================= COPYRIGHT NOTICE ============================
  //  This is a uniform (0,1) pseudorandom number generator based on:
  //
  //  A C-program for MT19937, with initialization improved 2002/1/26.
  //  Coded by Takuji Nishimura and Makoto Matsumoto.
  //
  //  Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,
  //  All rights reserved.
  //
  //  Redistribution and use in source and binary forms, with or without
  //  modification, are permitted provided that the following conditions
  //  are met:
  //
  //    1. Redistributions of source code must retain the above copyright
  //       notice, this list of conditions and the following disclaimer.
  //
  //    2. Redistributions in binary form must reproduce the above copyright
  //       notice, this list of conditions and the following disclaimer
  //       in the documentation and/or other materials provided with the
  //       distribution.
  //
  //    3. The names of its contributors may not be used to endorse or
  //       promote products derived from this software without specific
  //       prior written permission.
  //
  //  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  //  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  //  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  //  A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
  //  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  //  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  //  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  //  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  //  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  //  (INCLUDING  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  //  OF THIS  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  //
  // =============================   END   =================================
  int32_T exitg1;
  do {
    exitg1 = 0;
    mt19937ar_genrand_uint32_vector(obj, px4CtrlQGCGPS_B.u_p);
    px4CtrlQGCGPS_B.u_p[0] >>= 5U;
    px4CtrlQGCGPS_B.u_p[1] >>= 6U;
    r = (static_cast<real_T>(px4CtrlQGCGPS_B.u_p[0]) * 6.7108864E+7 +
         static_cast<real_T>(px4CtrlQGCGPS_B.u_p[1])) * 1.1102230246251565E-16;
    if (r == 0.0) {
      if (!px4CtrlQGCGPS_is_valid_state(obj->State)) {
        obj->Seed = 5489U;
        px4CtrlQGCGPS_B.r_lx = obj->Seed;
        obj->State[0] = obj->Seed;
        for (px4CtrlQGCGPS_B.b_statei = 0; px4CtrlQGCGPS_B.b_statei < 623;
             px4CtrlQGCGPS_B.b_statei++) {
          px4CtrlQGCGPS_B.r_lx = ((px4CtrlQGCGPS_B.r_lx >> 30U ^
            px4CtrlQGCGPS_B.r_lx) * 1812433253U + px4CtrlQGCGPS_B.b_statei) + 1U;
          obj->State[px4CtrlQGCGPS_B.b_statei + 1] = px4CtrlQGCGPS_B.r_lx;
        }

        obj->State[624] = 624U;
      }
    } else {
      exitg1 = 1;
    }
  } while (exitg1 == 0);

  return r;
}

static real_T px4CtrlQGCGPS_RandStream_rand_j(b_coder_internal_RandStream_p_T *s)
{
  c_coder_internal_mt19937ar_px_T *obj;
  obj = s->Generator;
  return px4CtrlQGCGP_mt19937ar_genrandu(obj);
}

static real_T px_RandStream_inversionGenrandn(b_coder_internal_RandStream_p_T *s)
{
  real_T z;
  px4CtrlQGCGPS_B.u_g = px4CtrlQGCGPS_RandStream_rand_j(s);
  if (fabs(px4CtrlQGCGPS_B.u_g - 0.5) <= 0.425) {
    px4CtrlQGCGPS_B.r_l = 0.180625 - (px4CtrlQGCGPS_B.u_g - 0.5) *
      (px4CtrlQGCGPS_B.u_g - 0.5);
    z = (((((((2509.0809287301227 * px4CtrlQGCGPS_B.r_l + 33430.575583588128) *
              px4CtrlQGCGPS_B.r_l + 67265.7709270087) * px4CtrlQGCGPS_B.r_l +
             45921.95393154987) * px4CtrlQGCGPS_B.r_l + 13731.693765509461) *
           px4CtrlQGCGPS_B.r_l + 1971.5909503065513) * px4CtrlQGCGPS_B.r_l +
          133.14166789178438) * px4CtrlQGCGPS_B.r_l + 3.3871328727963665) *
      (px4CtrlQGCGPS_B.u_g - 0.5) / (((((((5226.4952788528544 *
      px4CtrlQGCGPS_B.r_l + 28729.085735721943) * px4CtrlQGCGPS_B.r_l +
      39307.895800092709) * px4CtrlQGCGPS_B.r_l + 21213.794301586597) *
      px4CtrlQGCGPS_B.r_l + 5394.1960214247511) * px4CtrlQGCGPS_B.r_l +
      687.18700749205789) * px4CtrlQGCGPS_B.r_l + 42.313330701600911) *
      px4CtrlQGCGPS_B.r_l + 1.0);
  } else {
    if (px4CtrlQGCGPS_B.u_g - 0.5 < 0.0) {
      px4CtrlQGCGPS_B.r_l = sqrt(-log(px4CtrlQGCGPS_B.u_g));
    } else {
      px4CtrlQGCGPS_B.r_l = sqrt(-log(1.0 - px4CtrlQGCGPS_B.u_g));
    }

    if (px4CtrlQGCGPS_B.r_l <= 5.0) {
      z = ((((((((px4CtrlQGCGPS_B.r_l - 1.6) * 0.00077454501427834139 +
                 0.022723844989269184) * (px4CtrlQGCGPS_B.r_l - 1.6) +
                0.24178072517745061) * (px4CtrlQGCGPS_B.r_l - 1.6) +
               1.2704582524523684) * (px4CtrlQGCGPS_B.r_l - 1.6) +
              3.6478483247632045) * (px4CtrlQGCGPS_B.r_l - 1.6) +
             5.769497221460691) * (px4CtrlQGCGPS_B.r_l - 1.6) +
            4.6303378461565456) * (px4CtrlQGCGPS_B.r_l - 1.6) +
           1.4234371107496835) / ((((((((px4CtrlQGCGPS_B.r_l - 1.6) *
        1.0507500716444169E-9 + 0.00054759380849953455) * (px4CtrlQGCGPS_B.r_l -
        1.6) + 0.015198666563616457) * (px4CtrlQGCGPS_B.r_l - 1.6) +
        0.14810397642748008) * (px4CtrlQGCGPS_B.r_l - 1.6) + 0.6897673349851) *
        (px4CtrlQGCGPS_B.r_l - 1.6) + 1.6763848301838038) * (px4CtrlQGCGPS_B.r_l
        - 1.6) + 2.053191626637759) * (px4CtrlQGCGPS_B.r_l - 1.6) + 1.0);
    } else {
      z = ((((((((px4CtrlQGCGPS_B.r_l - 5.0) * 2.0103343992922881E-7 +
                 2.7115555687434876E-5) * (px4CtrlQGCGPS_B.r_l - 5.0) +
                0.0012426609473880784) * (px4CtrlQGCGPS_B.r_l - 5.0) +
               0.026532189526576124) * (px4CtrlQGCGPS_B.r_l - 5.0) +
              0.29656057182850487) * (px4CtrlQGCGPS_B.r_l - 5.0) +
             1.7848265399172913) * (px4CtrlQGCGPS_B.r_l - 5.0) +
            5.4637849111641144) * (px4CtrlQGCGPS_B.r_l - 5.0) +
           6.6579046435011033) / ((((((((px4CtrlQGCGPS_B.r_l - 5.0) *
        2.0442631033899397E-15 + 1.4215117583164459E-7) * (px4CtrlQGCGPS_B.r_l -
        5.0) + 1.8463183175100548E-5) * (px4CtrlQGCGPS_B.r_l - 5.0) +
        0.00078686913114561329) * (px4CtrlQGCGPS_B.r_l - 5.0) +
        0.014875361290850615) * (px4CtrlQGCGPS_B.r_l - 5.0) +
        0.13692988092273581) * (px4CtrlQGCGPS_B.r_l - 5.0) + 0.599832206555888) *
        (px4CtrlQGCGPS_B.r_l - 5.0) + 1.0);
    }

    if (px4CtrlQGCGPS_B.u_g - 0.5 < 0.0) {
      z = -z;
    }
  }

  return z;
}

static void px4CtrlQGCGPS_RandStream_rand(b_coder_internal_RandStream_p_T *s,
  real_T u[2])
{
  c_coder_internal_mt19937ar_px_T *obj;
  obj = s->Generator;
  u[0] = px4CtrlQGCGP_mt19937ar_genrandu(obj);
  u[1] = px4CtrlQGCGP_mt19937ar_genrandu(obj);
}

static real_T px4Ctr_RandStream_polarGenrandn(b_coder_internal_RandStream_p_T
  *rs)
{
  real_T z;
  if (rs->HaveSavedPolarValue) {
    rs->HaveSavedPolarValue = false;
    z = rs->SavedPolarValue;
  } else {
    do {
      px4CtrlQGCGPS_RandStream_rand(rs, px4CtrlQGCGPS_B.u);
      px4CtrlQGCGPS_B.r = 2.0 * px4CtrlQGCGPS_B.u[0] - 1.0;
      px4CtrlQGCGPS_B.s = 2.0 * px4CtrlQGCGPS_B.u[1] - 1.0;
      px4CtrlQGCGPS_B.t = px4CtrlQGCGPS_B.r * px4CtrlQGCGPS_B.r +
        px4CtrlQGCGPS_B.s * px4CtrlQGCGPS_B.s;
    } while (!(px4CtrlQGCGPS_B.t <= 1.0));

    px4CtrlQGCGPS_B.t = sqrt(-2.0 * log(px4CtrlQGCGPS_B.t) / px4CtrlQGCGPS_B.t);
    z = px4CtrlQGCGPS_B.r * px4CtrlQGCGPS_B.t;
    rs->HaveSavedPolarValue = true;
    rs->SavedPolarValue = px4CtrlQGCGPS_B.s * px4CtrlQGCGPS_B.t;
  }

  return z;
}

static real_T px4_RandStream_zigguratGenrandn(b_coder_internal_RandStream_p_T *s)
{
  real_T z;
  static const real_T tmp[257] = { 0.0, 0.215241895984875, 0.286174591792068,
    0.335737519214422, 0.375121332878378, 0.408389134611989, 0.43751840220787,
    0.46363433679088, 0.487443966139235, 0.50942332960209, 0.529909720661557,
    0.549151702327164, 0.567338257053817, 0.584616766106378, 0.601104617755991,
    0.61689699000775, 0.63207223638606, 0.646695714894993, 0.660822574244419,
    0.674499822837293, 0.687767892795788, 0.700661841106814, 0.713212285190975,
    0.725446140909999, 0.737387211434295, 0.749056662017815, 0.760473406430107,
    0.771654424224568, 0.782615023307232, 0.793369058840623, 0.80392911698997,
    0.814306670135215, 0.824512208752291, 0.834555354086381, 0.844444954909153,
    0.854189171008163, 0.863795545553308, 0.87327106808886, 0.882622229585165,
    0.891855070732941, 0.900975224461221, 0.909987953496718, 0.91889818364959,
    0.927710533401999, 0.936429340286575, 0.945058684468165, 0.953602409881086,
    0.96206414322304, 0.970447311064224, 0.978755155294224, 0.986990747099062,
    0.99515699963509, 1.00325667954467, 1.01129241744, 1.01926671746548,
    1.02718196603564, 1.03504043983344, 1.04284431314415, 1.05059566459093,
    1.05829648333067, 1.06594867476212, 1.07355406579244, 1.0811144097034,
    1.08863139065398, 1.09610662785202, 1.10354167942464, 1.11093804601357,
    1.11829717411934, 1.12562045921553, 1.13290924865253, 1.14016484436815,
    1.14738850542085, 1.15458145035993, 1.16174485944561, 1.16887987673083,
    1.17598761201545, 1.18306914268269, 1.19012551542669, 1.19715774787944,
    1.20416683014438, 1.2111537262437, 1.21811937548548, 1.22506469375653,
    1.23199057474614, 1.23889789110569, 1.24578749554863, 1.2526602218949,
    1.25951688606371, 1.26635828701823, 1.27318520766536, 1.27999841571382,
    1.28679866449324, 1.29358669373695, 1.30036323033084, 1.30712898903073,
    1.31388467315022, 1.32063097522106, 1.32736857762793, 1.33409815321936,
    1.3408203658964, 1.34753587118059, 1.35424531676263, 1.36094934303328,
    1.36764858359748, 1.37434366577317, 1.38103521107586, 1.38772383568998,
    1.39441015092814, 1.40109476367925, 1.4077782768464, 1.41446128977547,
    1.42114439867531, 1.42782819703026, 1.43451327600589, 1.44120022484872,
    1.44788963128058, 1.45458208188841, 1.46127816251028, 1.46797845861808,
    1.47468355569786, 1.48139403962819, 1.48811049705745, 1.49483351578049,
    1.50156368511546, 1.50830159628131, 1.51504784277671, 1.521803020761,
    1.52856772943771, 1.53534257144151, 1.542128153229, 1.54892508547417,
    1.55573398346918, 1.56255546753104, 1.56939016341512, 1.57623870273591,
    1.58310172339603, 1.58997987002419, 1.59687379442279, 1.60378415602609,
    1.61071162236983, 1.61765686957301, 1.62462058283303, 1.63160345693487,
    1.63860619677555, 1.64562951790478, 1.65267414708306, 1.65974082285818,
    1.66683029616166, 1.67394333092612, 1.68108070472517, 1.68824320943719,
    1.69543165193456, 1.70264685479992, 1.7098896570713, 1.71716091501782,
    1.72446150294804, 1.73179231405296, 1.73915426128591, 1.74654827828172,
    1.75397532031767, 1.76143636531891, 1.76893241491127, 1.77646449552452,
    1.78403365954944, 1.79164098655216, 1.79928758454972, 1.80697459135082,
    1.81470317596628, 1.82247454009388, 1.83028991968276, 1.83815058658281,
    1.84605785028518, 1.8540130597602, 1.86201760539967, 1.87007292107127,
    1.878180486293, 1.88634182853678, 1.8945585256707, 1.90283220855043,
    1.91116456377125, 1.91955733659319, 1.92801233405266, 1.93653142827569,
    1.94511656000868, 1.95376974238465, 1.96249306494436, 1.97128869793366,
    1.98015889690048, 1.98910600761744, 1.99813247135842, 2.00724083056053,
    2.0164337349062, 2.02571394786385, 2.03508435372962, 2.04454796521753,
    2.05410793165065, 2.06376754781173, 2.07353026351874, 2.0833996939983,
    2.09337963113879, 2.10347405571488, 2.11368715068665, 2.12402331568952,
    2.13448718284602, 2.14508363404789, 2.15581781987674, 2.16669518035431,
    2.17772146774029, 2.18890277162636, 2.20024554661128, 2.21175664288416,
    2.22344334009251, 2.23531338492992, 2.24737503294739, 2.25963709517379,
    2.27210899022838, 2.28480080272449, 2.29772334890286, 2.31088825060137,
    2.32430801887113, 2.33799614879653, 2.35196722737914, 2.36623705671729,
    2.38082279517208, 2.39574311978193, 2.41101841390112, 2.42667098493715,
    2.44272531820036, 2.4592083743347, 2.47614993967052, 2.49358304127105,
    2.51154444162669, 2.53007523215985, 2.54922155032478, 2.56903545268184,
    2.58957598670829, 2.61091051848882, 2.63311639363158, 2.65628303757674,
    2.68051464328574, 2.70593365612306, 2.73268535904401, 2.76094400527999,
    2.79092117400193, 2.82287739682644, 2.85713873087322, 2.89412105361341,
    2.93436686720889, 2.97860327988184, 3.02783779176959, 3.08352613200214,
    3.147889289518, 3.2245750520478, 3.32024473383983, 3.44927829856143,
    3.65415288536101, 3.91075795952492 };

  static const real_T tmp_0[257] = { 1.0, 0.977101701267673, 0.959879091800108,
    0.9451989534423, 0.932060075959231, 0.919991505039348, 0.908726440052131,
    0.898095921898344, 0.887984660755834, 0.878309655808918, 0.869008688036857,
    0.860033621196332, 0.851346258458678, 0.842915653112205, 0.834716292986884,
    0.826726833946222, 0.818929191603703, 0.811307874312656, 0.803849483170964,
    0.796542330422959, 0.789376143566025, 0.782341832654803, 0.775431304981187,
    0.768637315798486, 0.761953346836795, 0.755373506507096, 0.748892447219157,
    0.742505296340151, 0.736207598126863, 0.729995264561476, 0.72386453346863,
    0.717811932630722, 0.711834248878248, 0.705928501332754, 0.700091918136512,
    0.694321916126117, 0.688616083004672, 0.682972161644995, 0.677388036218774,
    0.671861719897082, 0.66639134390875, 0.660975147776663, 0.655611470579697,
    0.650298743110817, 0.645035480820822, 0.639820277453057, 0.634651799287624,
    0.629528779924837, 0.624450015547027, 0.619414360605834, 0.614420723888914,
    0.609468064925773, 0.604555390697468, 0.599681752619125, 0.594846243767987,
    0.590047996332826, 0.585286179263371, 0.580559996100791, 0.575868682972354,
    0.571211506735253, 0.566587763256165, 0.561996775814525, 0.557437893618766,
    0.552910490425833, 0.548413963255266, 0.543947731190026, 0.539511234256952,
    0.535103932380458, 0.530725304403662, 0.526374847171684, 0.522052074672322,
    0.517756517229756, 0.513487720747327, 0.509245245995748, 0.505028667943468,
    0.500837575126149, 0.49667156905249, 0.492530263643869, 0.488413284705458,
    0.484320269426683, 0.480250865909047, 0.476204732719506, 0.47218153846773,
    0.468180961405694, 0.464202689048174, 0.460246417812843, 0.456311852678716,
    0.452398706861849, 0.448506701507203, 0.444635565395739, 0.440785034665804,
    0.436954852547985, 0.433144769112652, 0.429354541029442, 0.425583931338022,
    0.421832709229496, 0.418100649837848, 0.414387534040891, 0.410693148270188,
    0.407017284329473, 0.403359739221114, 0.399720314980197, 0.396098818515832,
    0.392495061459315, 0.388908860018789, 0.385340034840077, 0.381788410873393,
    0.378253817245619, 0.374736087137891, 0.371235057668239, 0.367750569779032,
    0.364282468129004, 0.360830600989648, 0.357394820145781, 0.353974980800077,
    0.350570941481406, 0.347182563956794, 0.343809713146851, 0.340452257044522,
    0.337110066637006, 0.333783015830718, 0.330470981379163, 0.327173842813601,
    0.323891482376391, 0.320623784956905, 0.317370638029914, 0.314131931596337,
    0.310907558126286, 0.307697412504292, 0.30450139197665, 0.301319396100803,
    0.298151326696685, 0.294997087799962, 0.291856585617095, 0.288729728482183,
    0.285616426815502, 0.282516593083708, 0.279430141761638, 0.276356989295668,
    0.273297054068577, 0.270250256365875, 0.267216518343561, 0.264195763997261,
    0.261187919132721, 0.258192911337619, 0.255210669954662, 0.252241126055942,
    0.249284212418529, 0.246339863501264, 0.24340801542275, 0.240488605940501,
    0.237581574431238, 0.23468686187233, 0.231804410824339, 0.228934165414681,
    0.226076071322381, 0.223230075763918, 0.220396127480152, 0.217574176724331,
    0.214764175251174, 0.211966076307031, 0.209179834621125, 0.206405406397881,
    0.203642749310335, 0.200891822494657, 0.198152586545776, 0.195425003514135,
    0.192709036903589, 0.190004651670465, 0.187311814223801, 0.1846304924268,
    0.181960655599523, 0.179302274522848, 0.176655321443735, 0.174019770081839,
    0.171395595637506, 0.168782774801212, 0.166181285764482, 0.163591108232366,
    0.161012223437511, 0.158444614155925, 0.15588826472448, 0.153343161060263,
    0.150809290681846, 0.148286642732575, 0.145775208005994, 0.143274978973514,
    0.140785949814445, 0.138308116448551, 0.135841476571254, 0.133386029691669,
    0.130941777173644, 0.12850872228, 0.126086870220186, 0.123676228201597,
    0.12127680548479, 0.11888861344291, 0.116511665625611, 0.114145977827839,
    0.111791568163838, 0.109448457146812, 0.107116667774684, 0.104796225622487,
    0.102487158941935, 0.10018949876881, 0.0979032790388625, 0.095628536713009,
    0.093365311912691, 0.0911136480663738, 0.0888735920682759,
    0.0866451944505581, 0.0844285095703535, 0.082223595813203,
    0.0800305158146631, 0.0778493367020961, 0.0756801303589272,
    0.0735229737139814, 0.0713779490588905, 0.0692451443970068,
    0.0671246538277886, 0.065016577971243, 0.0629210244377582, 0.06083810834954,
    0.0587679529209339, 0.0567106901062031, 0.0546664613248891,
    0.0526354182767924, 0.0506177238609479, 0.0486135532158687,
    0.0466230949019305, 0.0446465522512946, 0.0426841449164746,
    0.0407361106559411, 0.0388027074045262, 0.0368842156885674,
    0.0349809414617162, 0.0330932194585786, 0.0312214171919203,
    0.0293659397581334, 0.0275272356696031, 0.0257058040085489,
    0.0239022033057959, 0.0221170627073089, 0.0203510962300445,
    0.0186051212757247, 0.0168800831525432, 0.0151770883079353,
    0.0134974506017399, 0.0118427578579079, 0.0102149714397015,
    0.00861658276939875, 0.00705087547137324, 0.00552240329925101,
    0.00403797259336304, 0.00260907274610216, 0.0012602859304986,
    0.000477467764609386 };

  int32_T exitg1;
  do {
    exitg1 = 0;
    px4CtrlQGCGPS_RandStream_rand(s, px4CtrlQGCGPS_B.u_b);
    px4CtrlQGCGPS_B.ik = static_cast<uint32_T>(256.0 * px4CtrlQGCGPS_B.u_b[0]) +
      1U;
    z = (2.0 * px4CtrlQGCGPS_B.u_b[1] - 1.0) * tmp[static_cast<int32_T>
      (px4CtrlQGCGPS_B.ik)];
    if (fabs(z) <= tmp[static_cast<int32_T>(px4CtrlQGCGPS_B.ik) - 1]) {
      exitg1 = 1;
    } else if (px4CtrlQGCGPS_B.ik < 256U) {
      px4CtrlQGCGPS_B.u_b[0] = px4CtrlQGCGPS_RandStream_rand_j(s);
      px4CtrlQGCGPS_B.x_d = tmp_0[static_cast<int32_T>(px4CtrlQGCGPS_B.ik)];
      if ((tmp_0[static_cast<int32_T>(px4CtrlQGCGPS_B.ik) - 1] -
           px4CtrlQGCGPS_B.x_d) * px4CtrlQGCGPS_B.u_b[0] + px4CtrlQGCGPS_B.x_d <
          exp(-0.5 * z * z)) {
        exitg1 = 1;
      }
    } else {
      do {
        px4CtrlQGCGPS_RandStream_rand(s, px4CtrlQGCGPS_B.u_b);
        px4CtrlQGCGPS_B.x_d = log(px4CtrlQGCGPS_B.u_b[0]) * 0.273661237329758;
      } while (!(px4CtrlQGCGPS_B.x_d * px4CtrlQGCGPS_B.x_d < -2.0 * log
                 (px4CtrlQGCGPS_B.u_b[1])));

      if (z < 0.0) {
        z = px4CtrlQGCGPS_B.x_d - 3.65415288536101;
      } else {
        z = 3.65415288536101 - px4CtrlQGCGPS_B.x_d;
      }

      exitg1 = 1;
    }
  } while (exitg1 == 0);

  return z;
}

static real_T px4CtrlQGC_mt19937ar_mtziggurat(c_coder_internal_mt19937ar_px_T
  *obj)
{
  real_T z;
  static const real_T tmp[257] = { 1.0, 0.977101701267673, 0.959879091800108,
    0.9451989534423, 0.932060075959231, 0.919991505039348, 0.908726440052131,
    0.898095921898344, 0.887984660755834, 0.878309655808918, 0.869008688036857,
    0.860033621196332, 0.851346258458678, 0.842915653112205, 0.834716292986884,
    0.826726833946222, 0.818929191603703, 0.811307874312656, 0.803849483170964,
    0.796542330422959, 0.789376143566025, 0.782341832654803, 0.775431304981187,
    0.768637315798486, 0.761953346836795, 0.755373506507096, 0.748892447219157,
    0.742505296340151, 0.736207598126863, 0.729995264561476, 0.72386453346863,
    0.717811932630722, 0.711834248878248, 0.705928501332754, 0.700091918136512,
    0.694321916126117, 0.688616083004672, 0.682972161644995, 0.677388036218774,
    0.671861719897082, 0.66639134390875, 0.660975147776663, 0.655611470579697,
    0.650298743110817, 0.645035480820822, 0.639820277453057, 0.634651799287624,
    0.629528779924837, 0.624450015547027, 0.619414360605834, 0.614420723888914,
    0.609468064925773, 0.604555390697468, 0.599681752619125, 0.594846243767987,
    0.590047996332826, 0.585286179263371, 0.580559996100791, 0.575868682972354,
    0.571211506735253, 0.566587763256165, 0.561996775814525, 0.557437893618766,
    0.552910490425833, 0.548413963255266, 0.543947731190026, 0.539511234256952,
    0.535103932380458, 0.530725304403662, 0.526374847171684, 0.522052074672322,
    0.517756517229756, 0.513487720747327, 0.509245245995748, 0.505028667943468,
    0.500837575126149, 0.49667156905249, 0.492530263643869, 0.488413284705458,
    0.484320269426683, 0.480250865909047, 0.476204732719506, 0.47218153846773,
    0.468180961405694, 0.464202689048174, 0.460246417812843, 0.456311852678716,
    0.452398706861849, 0.448506701507203, 0.444635565395739, 0.440785034665804,
    0.436954852547985, 0.433144769112652, 0.429354541029442, 0.425583931338022,
    0.421832709229496, 0.418100649837848, 0.414387534040891, 0.410693148270188,
    0.407017284329473, 0.403359739221114, 0.399720314980197, 0.396098818515832,
    0.392495061459315, 0.388908860018789, 0.385340034840077, 0.381788410873393,
    0.378253817245619, 0.374736087137891, 0.371235057668239, 0.367750569779032,
    0.364282468129004, 0.360830600989648, 0.357394820145781, 0.353974980800077,
    0.350570941481406, 0.347182563956794, 0.343809713146851, 0.340452257044522,
    0.337110066637006, 0.333783015830718, 0.330470981379163, 0.327173842813601,
    0.323891482376391, 0.320623784956905, 0.317370638029914, 0.314131931596337,
    0.310907558126286, 0.307697412504292, 0.30450139197665, 0.301319396100803,
    0.298151326696685, 0.294997087799962, 0.291856585617095, 0.288729728482183,
    0.285616426815502, 0.282516593083708, 0.279430141761638, 0.276356989295668,
    0.273297054068577, 0.270250256365875, 0.267216518343561, 0.264195763997261,
    0.261187919132721, 0.258192911337619, 0.255210669954662, 0.252241126055942,
    0.249284212418529, 0.246339863501264, 0.24340801542275, 0.240488605940501,
    0.237581574431238, 0.23468686187233, 0.231804410824339, 0.228934165414681,
    0.226076071322381, 0.223230075763918, 0.220396127480152, 0.217574176724331,
    0.214764175251174, 0.211966076307031, 0.209179834621125, 0.206405406397881,
    0.203642749310335, 0.200891822494657, 0.198152586545776, 0.195425003514135,
    0.192709036903589, 0.190004651670465, 0.187311814223801, 0.1846304924268,
    0.181960655599523, 0.179302274522848, 0.176655321443735, 0.174019770081839,
    0.171395595637506, 0.168782774801212, 0.166181285764482, 0.163591108232366,
    0.161012223437511, 0.158444614155925, 0.15588826472448, 0.153343161060263,
    0.150809290681846, 0.148286642732575, 0.145775208005994, 0.143274978973514,
    0.140785949814445, 0.138308116448551, 0.135841476571254, 0.133386029691669,
    0.130941777173644, 0.12850872228, 0.126086870220186, 0.123676228201597,
    0.12127680548479, 0.11888861344291, 0.116511665625611, 0.114145977827839,
    0.111791568163838, 0.109448457146812, 0.107116667774684, 0.104796225622487,
    0.102487158941935, 0.10018949876881, 0.0979032790388625, 0.095628536713009,
    0.093365311912691, 0.0911136480663738, 0.0888735920682759,
    0.0866451944505581, 0.0844285095703535, 0.082223595813203,
    0.0800305158146631, 0.0778493367020961, 0.0756801303589272,
    0.0735229737139814, 0.0713779490588905, 0.0692451443970068,
    0.0671246538277886, 0.065016577971243, 0.0629210244377582, 0.06083810834954,
    0.0587679529209339, 0.0567106901062031, 0.0546664613248891,
    0.0526354182767924, 0.0506177238609479, 0.0486135532158687,
    0.0466230949019305, 0.0446465522512946, 0.0426841449164746,
    0.0407361106559411, 0.0388027074045262, 0.0368842156885674,
    0.0349809414617162, 0.0330932194585786, 0.0312214171919203,
    0.0293659397581334, 0.0275272356696031, 0.0257058040085489,
    0.0239022033057959, 0.0221170627073089, 0.0203510962300445,
    0.0186051212757247, 0.0168800831525432, 0.0151770883079353,
    0.0134974506017399, 0.0118427578579079, 0.0102149714397015,
    0.00861658276939875, 0.00705087547137324, 0.00552240329925101,
    0.00403797259336304, 0.00260907274610216, 0.0012602859304986,
    0.000477467764609386 };

  const real_T *fitab;
  px4CtrlQGCGPS_B.xi[0] = 0.0;
  px4CtrlQGCGPS_B.xi[1] = 0.215241895984875;
  px4CtrlQGCGPS_B.xi[2] = 0.286174591792068;
  px4CtrlQGCGPS_B.xi[3] = 0.335737519214422;
  px4CtrlQGCGPS_B.xi[4] = 0.375121332878378;
  px4CtrlQGCGPS_B.xi[5] = 0.408389134611989;
  px4CtrlQGCGPS_B.xi[6] = 0.43751840220787;
  px4CtrlQGCGPS_B.xi[7] = 0.46363433679088;
  px4CtrlQGCGPS_B.xi[8] = 0.487443966139235;
  px4CtrlQGCGPS_B.xi[9] = 0.50942332960209;
  px4CtrlQGCGPS_B.xi[10] = 0.529909720661557;
  px4CtrlQGCGPS_B.xi[11] = 0.549151702327164;
  px4CtrlQGCGPS_B.xi[12] = 0.567338257053817;
  px4CtrlQGCGPS_B.xi[13] = 0.584616766106378;
  px4CtrlQGCGPS_B.xi[14] = 0.601104617755991;
  px4CtrlQGCGPS_B.xi[15] = 0.61689699000775;
  px4CtrlQGCGPS_B.xi[16] = 0.63207223638606;
  px4CtrlQGCGPS_B.xi[17] = 0.646695714894993;
  px4CtrlQGCGPS_B.xi[18] = 0.660822574244419;
  px4CtrlQGCGPS_B.xi[19] = 0.674499822837293;
  px4CtrlQGCGPS_B.xi[20] = 0.687767892795788;
  px4CtrlQGCGPS_B.xi[21] = 0.700661841106814;
  px4CtrlQGCGPS_B.xi[22] = 0.713212285190975;
  px4CtrlQGCGPS_B.xi[23] = 0.725446140909999;
  px4CtrlQGCGPS_B.xi[24] = 0.737387211434295;
  px4CtrlQGCGPS_B.xi[25] = 0.749056662017815;
  px4CtrlQGCGPS_B.xi[26] = 0.760473406430107;
  px4CtrlQGCGPS_B.xi[27] = 0.771654424224568;
  px4CtrlQGCGPS_B.xi[28] = 0.782615023307232;
  px4CtrlQGCGPS_B.xi[29] = 0.793369058840623;
  px4CtrlQGCGPS_B.xi[30] = 0.80392911698997;
  px4CtrlQGCGPS_B.xi[31] = 0.814306670135215;
  px4CtrlQGCGPS_B.xi[32] = 0.824512208752291;
  px4CtrlQGCGPS_B.xi[33] = 0.834555354086381;
  px4CtrlQGCGPS_B.xi[34] = 0.844444954909153;
  px4CtrlQGCGPS_B.xi[35] = 0.854189171008163;
  px4CtrlQGCGPS_B.xi[36] = 0.863795545553308;
  px4CtrlQGCGPS_B.xi[37] = 0.87327106808886;
  px4CtrlQGCGPS_B.xi[38] = 0.882622229585165;
  px4CtrlQGCGPS_B.xi[39] = 0.891855070732941;
  px4CtrlQGCGPS_B.xi[40] = 0.900975224461221;
  px4CtrlQGCGPS_B.xi[41] = 0.909987953496718;
  px4CtrlQGCGPS_B.xi[42] = 0.91889818364959;
  px4CtrlQGCGPS_B.xi[43] = 0.927710533401999;
  px4CtrlQGCGPS_B.xi[44] = 0.936429340286575;
  px4CtrlQGCGPS_B.xi[45] = 0.945058684468165;
  px4CtrlQGCGPS_B.xi[46] = 0.953602409881086;
  px4CtrlQGCGPS_B.xi[47] = 0.96206414322304;
  px4CtrlQGCGPS_B.xi[48] = 0.970447311064224;
  px4CtrlQGCGPS_B.xi[49] = 0.978755155294224;
  px4CtrlQGCGPS_B.xi[50] = 0.986990747099062;
  px4CtrlQGCGPS_B.xi[51] = 0.99515699963509;
  px4CtrlQGCGPS_B.xi[52] = 1.00325667954467;
  px4CtrlQGCGPS_B.xi[53] = 1.01129241744;
  px4CtrlQGCGPS_B.xi[54] = 1.01926671746548;
  px4CtrlQGCGPS_B.xi[55] = 1.02718196603564;
  px4CtrlQGCGPS_B.xi[56] = 1.03504043983344;
  px4CtrlQGCGPS_B.xi[57] = 1.04284431314415;
  px4CtrlQGCGPS_B.xi[58] = 1.05059566459093;
  px4CtrlQGCGPS_B.xi[59] = 1.05829648333067;
  px4CtrlQGCGPS_B.xi[60] = 1.06594867476212;
  px4CtrlQGCGPS_B.xi[61] = 1.07355406579244;
  px4CtrlQGCGPS_B.xi[62] = 1.0811144097034;
  px4CtrlQGCGPS_B.xi[63] = 1.08863139065398;
  px4CtrlQGCGPS_B.xi[64] = 1.09610662785202;
  px4CtrlQGCGPS_B.xi[65] = 1.10354167942464;
  px4CtrlQGCGPS_B.xi[66] = 1.11093804601357;
  px4CtrlQGCGPS_B.xi[67] = 1.11829717411934;
  px4CtrlQGCGPS_B.xi[68] = 1.12562045921553;
  px4CtrlQGCGPS_B.xi[69] = 1.13290924865253;
  px4CtrlQGCGPS_B.xi[70] = 1.14016484436815;
  px4CtrlQGCGPS_B.xi[71] = 1.14738850542085;
  px4CtrlQGCGPS_B.xi[72] = 1.15458145035993;
  px4CtrlQGCGPS_B.xi[73] = 1.16174485944561;
  px4CtrlQGCGPS_B.xi[74] = 1.16887987673083;
  px4CtrlQGCGPS_B.xi[75] = 1.17598761201545;
  px4CtrlQGCGPS_B.xi[76] = 1.18306914268269;
  px4CtrlQGCGPS_B.xi[77] = 1.19012551542669;
  px4CtrlQGCGPS_B.xi[78] = 1.19715774787944;
  px4CtrlQGCGPS_B.xi[79] = 1.20416683014438;
  px4CtrlQGCGPS_B.xi[80] = 1.2111537262437;
  px4CtrlQGCGPS_B.xi[81] = 1.21811937548548;
  px4CtrlQGCGPS_B.xi[82] = 1.22506469375653;
  px4CtrlQGCGPS_B.xi[83] = 1.23199057474614;
  px4CtrlQGCGPS_B.xi[84] = 1.23889789110569;
  px4CtrlQGCGPS_B.xi[85] = 1.24578749554863;
  px4CtrlQGCGPS_B.xi[86] = 1.2526602218949;
  px4CtrlQGCGPS_B.xi[87] = 1.25951688606371;
  px4CtrlQGCGPS_B.xi[88] = 1.26635828701823;
  px4CtrlQGCGPS_B.xi[89] = 1.27318520766536;
  px4CtrlQGCGPS_B.xi[90] = 1.27999841571382;
  px4CtrlQGCGPS_B.xi[91] = 1.28679866449324;
  px4CtrlQGCGPS_B.xi[92] = 1.29358669373695;
  px4CtrlQGCGPS_B.xi[93] = 1.30036323033084;
  px4CtrlQGCGPS_B.xi[94] = 1.30712898903073;
  px4CtrlQGCGPS_B.xi[95] = 1.31388467315022;
  px4CtrlQGCGPS_B.xi[96] = 1.32063097522106;
  px4CtrlQGCGPS_B.xi[97] = 1.32736857762793;
  px4CtrlQGCGPS_B.xi[98] = 1.33409815321936;
  px4CtrlQGCGPS_B.xi[99] = 1.3408203658964;
  px4CtrlQGCGPS_B.xi[100] = 1.34753587118059;
  px4CtrlQGCGPS_B.xi[101] = 1.35424531676263;
  px4CtrlQGCGPS_B.xi[102] = 1.36094934303328;
  px4CtrlQGCGPS_B.xi[103] = 1.36764858359748;
  px4CtrlQGCGPS_B.xi[104] = 1.37434366577317;
  px4CtrlQGCGPS_B.xi[105] = 1.38103521107586;
  px4CtrlQGCGPS_B.xi[106] = 1.38772383568998;
  px4CtrlQGCGPS_B.xi[107] = 1.39441015092814;
  px4CtrlQGCGPS_B.xi[108] = 1.40109476367925;
  px4CtrlQGCGPS_B.xi[109] = 1.4077782768464;
  px4CtrlQGCGPS_B.xi[110] = 1.41446128977547;
  px4CtrlQGCGPS_B.xi[111] = 1.42114439867531;
  px4CtrlQGCGPS_B.xi[112] = 1.42782819703026;
  px4CtrlQGCGPS_B.xi[113] = 1.43451327600589;
  px4CtrlQGCGPS_B.xi[114] = 1.44120022484872;
  px4CtrlQGCGPS_B.xi[115] = 1.44788963128058;
  px4CtrlQGCGPS_B.xi[116] = 1.45458208188841;
  px4CtrlQGCGPS_B.xi[117] = 1.46127816251028;
  px4CtrlQGCGPS_B.xi[118] = 1.46797845861808;
  px4CtrlQGCGPS_B.xi[119] = 1.47468355569786;
  px4CtrlQGCGPS_B.xi[120] = 1.48139403962819;
  px4CtrlQGCGPS_B.xi[121] = 1.48811049705745;
  px4CtrlQGCGPS_B.xi[122] = 1.49483351578049;
  px4CtrlQGCGPS_B.xi[123] = 1.50156368511546;
  px4CtrlQGCGPS_B.xi[124] = 1.50830159628131;
  px4CtrlQGCGPS_B.xi[125] = 1.51504784277671;
  px4CtrlQGCGPS_B.xi[126] = 1.521803020761;
  px4CtrlQGCGPS_B.xi[127] = 1.52856772943771;
  px4CtrlQGCGPS_B.xi[128] = 1.53534257144151;
  px4CtrlQGCGPS_B.xi[129] = 1.542128153229;
  px4CtrlQGCGPS_B.xi[130] = 1.54892508547417;
  px4CtrlQGCGPS_B.xi[131] = 1.55573398346918;
  px4CtrlQGCGPS_B.xi[132] = 1.56255546753104;
  px4CtrlQGCGPS_B.xi[133] = 1.56939016341512;
  px4CtrlQGCGPS_B.xi[134] = 1.57623870273591;
  px4CtrlQGCGPS_B.xi[135] = 1.58310172339603;
  px4CtrlQGCGPS_B.xi[136] = 1.58997987002419;
  px4CtrlQGCGPS_B.xi[137] = 1.59687379442279;
  px4CtrlQGCGPS_B.xi[138] = 1.60378415602609;
  px4CtrlQGCGPS_B.xi[139] = 1.61071162236983;
  px4CtrlQGCGPS_B.xi[140] = 1.61765686957301;
  px4CtrlQGCGPS_B.xi[141] = 1.62462058283303;
  px4CtrlQGCGPS_B.xi[142] = 1.63160345693487;
  px4CtrlQGCGPS_B.xi[143] = 1.63860619677555;
  px4CtrlQGCGPS_B.xi[144] = 1.64562951790478;
  px4CtrlQGCGPS_B.xi[145] = 1.65267414708306;
  px4CtrlQGCGPS_B.xi[146] = 1.65974082285818;
  px4CtrlQGCGPS_B.xi[147] = 1.66683029616166;
  px4CtrlQGCGPS_B.xi[148] = 1.67394333092612;
  px4CtrlQGCGPS_B.xi[149] = 1.68108070472517;
  px4CtrlQGCGPS_B.xi[150] = 1.68824320943719;
  px4CtrlQGCGPS_B.xi[151] = 1.69543165193456;
  px4CtrlQGCGPS_B.xi[152] = 1.70264685479992;
  px4CtrlQGCGPS_B.xi[153] = 1.7098896570713;
  px4CtrlQGCGPS_B.xi[154] = 1.71716091501782;
  px4CtrlQGCGPS_B.xi[155] = 1.72446150294804;
  px4CtrlQGCGPS_B.xi[156] = 1.73179231405296;
  px4CtrlQGCGPS_B.xi[157] = 1.73915426128591;
  px4CtrlQGCGPS_B.xi[158] = 1.74654827828172;
  px4CtrlQGCGPS_B.xi[159] = 1.75397532031767;
  px4CtrlQGCGPS_B.xi[160] = 1.76143636531891;
  px4CtrlQGCGPS_B.xi[161] = 1.76893241491127;
  px4CtrlQGCGPS_B.xi[162] = 1.77646449552452;
  px4CtrlQGCGPS_B.xi[163] = 1.78403365954944;
  px4CtrlQGCGPS_B.xi[164] = 1.79164098655216;
  px4CtrlQGCGPS_B.xi[165] = 1.79928758454972;
  px4CtrlQGCGPS_B.xi[166] = 1.80697459135082;
  px4CtrlQGCGPS_B.xi[167] = 1.81470317596628;
  px4CtrlQGCGPS_B.xi[168] = 1.82247454009388;
  px4CtrlQGCGPS_B.xi[169] = 1.83028991968276;
  px4CtrlQGCGPS_B.xi[170] = 1.83815058658281;
  px4CtrlQGCGPS_B.xi[171] = 1.84605785028518;
  px4CtrlQGCGPS_B.xi[172] = 1.8540130597602;
  px4CtrlQGCGPS_B.xi[173] = 1.86201760539967;
  px4CtrlQGCGPS_B.xi[174] = 1.87007292107127;
  px4CtrlQGCGPS_B.xi[175] = 1.878180486293;
  px4CtrlQGCGPS_B.xi[176] = 1.88634182853678;
  px4CtrlQGCGPS_B.xi[177] = 1.8945585256707;
  px4CtrlQGCGPS_B.xi[178] = 1.90283220855043;
  px4CtrlQGCGPS_B.xi[179] = 1.91116456377125;
  px4CtrlQGCGPS_B.xi[180] = 1.91955733659319;
  px4CtrlQGCGPS_B.xi[181] = 1.92801233405266;
  px4CtrlQGCGPS_B.xi[182] = 1.93653142827569;
  px4CtrlQGCGPS_B.xi[183] = 1.94511656000868;
  px4CtrlQGCGPS_B.xi[184] = 1.95376974238465;
  px4CtrlQGCGPS_B.xi[185] = 1.96249306494436;
  px4CtrlQGCGPS_B.xi[186] = 1.97128869793366;
  px4CtrlQGCGPS_B.xi[187] = 1.98015889690048;
  px4CtrlQGCGPS_B.xi[188] = 1.98910600761744;
  px4CtrlQGCGPS_B.xi[189] = 1.99813247135842;
  px4CtrlQGCGPS_B.xi[190] = 2.00724083056053;
  px4CtrlQGCGPS_B.xi[191] = 2.0164337349062;
  px4CtrlQGCGPS_B.xi[192] = 2.02571394786385;
  px4CtrlQGCGPS_B.xi[193] = 2.03508435372962;
  px4CtrlQGCGPS_B.xi[194] = 2.04454796521753;
  px4CtrlQGCGPS_B.xi[195] = 2.05410793165065;
  px4CtrlQGCGPS_B.xi[196] = 2.06376754781173;
  px4CtrlQGCGPS_B.xi[197] = 2.07353026351874;
  px4CtrlQGCGPS_B.xi[198] = 2.0833996939983;
  px4CtrlQGCGPS_B.xi[199] = 2.09337963113879;
  px4CtrlQGCGPS_B.xi[200] = 2.10347405571488;
  px4CtrlQGCGPS_B.xi[201] = 2.11368715068665;
  px4CtrlQGCGPS_B.xi[202] = 2.12402331568952;
  px4CtrlQGCGPS_B.xi[203] = 2.13448718284602;
  px4CtrlQGCGPS_B.xi[204] = 2.14508363404789;
  px4CtrlQGCGPS_B.xi[205] = 2.15581781987674;
  px4CtrlQGCGPS_B.xi[206] = 2.16669518035431;
  px4CtrlQGCGPS_B.xi[207] = 2.17772146774029;
  px4CtrlQGCGPS_B.xi[208] = 2.18890277162636;
  px4CtrlQGCGPS_B.xi[209] = 2.20024554661128;
  px4CtrlQGCGPS_B.xi[210] = 2.21175664288416;
  px4CtrlQGCGPS_B.xi[211] = 2.22344334009251;
  px4CtrlQGCGPS_B.xi[212] = 2.23531338492992;
  px4CtrlQGCGPS_B.xi[213] = 2.24737503294739;
  px4CtrlQGCGPS_B.xi[214] = 2.25963709517379;
  px4CtrlQGCGPS_B.xi[215] = 2.27210899022838;
  px4CtrlQGCGPS_B.xi[216] = 2.28480080272449;
  px4CtrlQGCGPS_B.xi[217] = 2.29772334890286;
  px4CtrlQGCGPS_B.xi[218] = 2.31088825060137;
  px4CtrlQGCGPS_B.xi[219] = 2.32430801887113;
  px4CtrlQGCGPS_B.xi[220] = 2.33799614879653;
  px4CtrlQGCGPS_B.xi[221] = 2.35196722737914;
  px4CtrlQGCGPS_B.xi[222] = 2.36623705671729;
  px4CtrlQGCGPS_B.xi[223] = 2.38082279517208;
  px4CtrlQGCGPS_B.xi[224] = 2.39574311978193;
  px4CtrlQGCGPS_B.xi[225] = 2.41101841390112;
  px4CtrlQGCGPS_B.xi[226] = 2.42667098493715;
  px4CtrlQGCGPS_B.xi[227] = 2.44272531820036;
  px4CtrlQGCGPS_B.xi[228] = 2.4592083743347;
  px4CtrlQGCGPS_B.xi[229] = 2.47614993967052;
  px4CtrlQGCGPS_B.xi[230] = 2.49358304127105;
  px4CtrlQGCGPS_B.xi[231] = 2.51154444162669;
  px4CtrlQGCGPS_B.xi[232] = 2.53007523215985;
  px4CtrlQGCGPS_B.xi[233] = 2.54922155032478;
  px4CtrlQGCGPS_B.xi[234] = 2.56903545268184;
  px4CtrlQGCGPS_B.xi[235] = 2.58957598670829;
  px4CtrlQGCGPS_B.xi[236] = 2.61091051848882;
  px4CtrlQGCGPS_B.xi[237] = 2.63311639363158;
  px4CtrlQGCGPS_B.xi[238] = 2.65628303757674;
  px4CtrlQGCGPS_B.xi[239] = 2.68051464328574;
  px4CtrlQGCGPS_B.xi[240] = 2.70593365612306;
  px4CtrlQGCGPS_B.xi[241] = 2.73268535904401;
  px4CtrlQGCGPS_B.xi[242] = 2.76094400527999;
  px4CtrlQGCGPS_B.xi[243] = 2.79092117400193;
  px4CtrlQGCGPS_B.xi[244] = 2.82287739682644;
  px4CtrlQGCGPS_B.xi[245] = 2.85713873087322;
  px4CtrlQGCGPS_B.xi[246] = 2.89412105361341;
  px4CtrlQGCGPS_B.xi[247] = 2.93436686720889;
  px4CtrlQGCGPS_B.xi[248] = 2.97860327988184;
  px4CtrlQGCGPS_B.xi[249] = 3.02783779176959;
  px4CtrlQGCGPS_B.xi[250] = 3.08352613200214;
  px4CtrlQGCGPS_B.xi[251] = 3.147889289518;
  px4CtrlQGCGPS_B.xi[252] = 3.2245750520478;
  px4CtrlQGCGPS_B.xi[253] = 3.32024473383983;
  px4CtrlQGCGPS_B.xi[254] = 3.44927829856143;
  px4CtrlQGCGPS_B.xi[255] = 3.65415288536101;
  px4CtrlQGCGPS_B.xi[256] = 3.91075795952492;
  fitab = &tmp[0];
  int32_T exitg1;
  do {
    exitg1 = 0;
    mt19937ar_genrand_uint32_vector(obj, px4CtrlQGCGPS_B.u32);
    px4CtrlQGCGPS_B.i_d = static_cast<int32_T>((px4CtrlQGCGPS_B.u32[1] >> 24U) +
      1U);
    z = ((static_cast<real_T>(px4CtrlQGCGPS_B.u32[0] >> 3U) * 1.6777216E+7 +
          static_cast<real_T>(static_cast<int32_T>(px4CtrlQGCGPS_B.u32[1]) &
           16777215)) * 2.2204460492503131E-16 - 1.0) *
      px4CtrlQGCGPS_B.xi[px4CtrlQGCGPS_B.i_d];
    if (fabs(z) <= px4CtrlQGCGPS_B.xi[px4CtrlQGCGPS_B.i_d - 1]) {
      exitg1 = 1;
    } else if (px4CtrlQGCGPS_B.i_d < 256) {
      px4CtrlQGCGPS_B.u_j = px4CtrlQGCGP_mt19937ar_genrandu(obj);
      if ((fitab[px4CtrlQGCGPS_B.i_d - 1] - fitab[px4CtrlQGCGPS_B.i_d]) *
          px4CtrlQGCGPS_B.u_j + fitab[px4CtrlQGCGPS_B.i_d] < exp(-0.5 * z * z))
      {
        exitg1 = 1;
      }
    } else {
      do {
        px4CtrlQGCGPS_B.u_j = px4CtrlQGCGP_mt19937ar_genrandu(obj);
        px4CtrlQGCGPS_B.x = log(px4CtrlQGCGPS_B.u_j) * 0.273661237329758;
        px4CtrlQGCGPS_B.u_j = px4CtrlQGCGP_mt19937ar_genrandu(obj);
      } while (!(-2.0 * log(px4CtrlQGCGPS_B.u_j) > px4CtrlQGCGPS_B.x *
                 px4CtrlQGCGPS_B.x));

      if (z < 0.0) {
        z = px4CtrlQGCGPS_B.x - 3.65415288536101;
      } else {
        z = 3.65415288536101 - px4CtrlQGCGPS_B.x;
      }

      exitg1 = 1;
    }
  } while (exitg1 == 0);

  return z;
}

static void GPSSensorBase_stepRandomStream(fusion_internal_simulink_gpsS_T *obj,
  real_T noise[3])
{
  b_coder_internal_RandStream_p_T *s;
  c_coder_internal_mt19937ar_px_T *obj_0;
  s = obj->pStream;
  px4CtrlQGCGPS_B.nt_d = s->NtMethod;
  if (px4CtrlQGCGPS_B.nt_d == ziggurat) {
    obj_0 = s->Generator;
    noise[0] = px4CtrlQGC_mt19937ar_mtziggurat(obj_0);
    noise[1] = px4CtrlQGC_mt19937ar_mtziggurat(obj_0);
    noise[2] = px4CtrlQGC_mt19937ar_mtziggurat(obj_0);
  } else if (s->NtMethod == ziggurat) {
    noise[0] = px4_RandStream_zigguratGenrandn(s);
    noise[1] = px4_RandStream_zigguratGenrandn(s);
    noise[2] = px4_RandStream_zigguratGenrandn(s);
  } else if (s->NtMethod == polar) {
    noise[0] = px4Ctr_RandStream_polarGenrandn(s);
    noise[1] = px4Ctr_RandStream_polarGenrandn(s);
    noise[2] = px4Ctr_RandStream_polarGenrandn(s);
  } else {
    noise[0] = px_RandStream_inversionGenrandn(s);
    noise[1] = px_RandStream_inversionGenrandn(s);
    noise[2] = px_RandStream_inversionGenrandn(s);
  }
}

static real_T px4CtrlQGCGPS_cosd(real_T x)
{
  real_T b_x;
  if (rtIsInf(x) || rtIsNaN(x)) {
    b_x = (rtNaN);
  } else if (fabs(x) <= 45.0) {
    b_x = cos(0.017453292519943295 * x);
  } else {
    b_x = -sin((x - 90.0) * 0.017453292519943295);
  }

  return b_x;
}

static real_T px4CtrlQGCGPS_sind(real_T x)
{
  real_T b_x;
  if (rtIsInf(x) || rtIsNaN(x)) {
    b_x = (rtNaN);
  } else if (fabs(x) <= 45.0) {
    b_x = sin(0.017453292519943295 * x);
  } else {
    b_x = cos((x - 90.0) * 0.017453292519943295);
  }

  return b_x;
}

real32_T rt_hypotf_snf(real32_T u0, real32_T u1)
{
  real32_T a;
  real32_T y;
  a = static_cast<real32_T>(fabs(static_cast<real_T>(u0)));
  y = static_cast<real32_T>(fabs(static_cast<real_T>(u1)));
  if (a < y) {
    a /= y;
    y *= static_cast<real32_T>(sqrt(static_cast<real_T>(a * a + 1.0F)));
  } else if (a > y) {
    y /= a;
    y = static_cast<real32_T>(sqrt(static_cast<real_T>(y * y + 1.0F))) * a;
  } else if (!rtIsNaNF(y)) {
    y = a * 1.41421354F;
  }

  return y;
}

real_T rt_hypotd_snf(real_T u0, real_T u1)
{
  real_T a;
  real_T y;
  a = fabs(u0);
  y = fabs(u1);
  if (a < y) {
    a /= y;
    y *= sqrt(a * a + 1.0);
  } else if (a > y) {
    y /= a;
    y = sqrt(y * y + 1.0) * a;
  } else if (!rtIsNaN(y)) {
    y = a * 1.4142135623730951;
  }

  return y;
}

real32_T rt_atan2f_snf(real32_T u0, real32_T u1)
{
  real32_T y;
  if (rtIsNaNF(u0) || rtIsNaNF(u1)) {
    y = (rtNaNF);
  } else if (rtIsInfF(u0) && rtIsInfF(u1)) {
    int32_T u0_0;
    int32_T u1_0;
    if (u0 > 0.0F) {
      u0_0 = 1;
    } else {
      u0_0 = -1;
    }

    if (u1 > 0.0F) {
      u1_0 = 1;
    } else {
      u1_0 = -1;
    }

    y = static_cast<real32_T>(atan2(static_cast<real_T>(static_cast<real32_T>
      (u0_0)), static_cast<real_T>(static_cast<real32_T>(u1_0))));
  } else if (u1 == 0.0F) {
    if (u0 > 0.0F) {
      y = RT_PIF / 2.0F;
    } else if (u0 < 0.0F) {
      y = -(RT_PIF / 2.0F);
    } else {
      y = 0.0F;
    }
  } else {
    y = static_cast<real32_T>(atan2(static_cast<real_T>(u0), static_cast<real_T>
      (u1)));
  }

  return y;
}

real32_T rt_remf_snf(real32_T u0, real32_T u1)
{
  real32_T y;
  if (rtIsNaNF(u0) || rtIsNaNF(u1) || rtIsInfF(u0)) {
    y = (rtNaNF);
  } else if (rtIsInfF(u1)) {
    y = u0;
  } else {
    real32_T u1_0;
    if (u1 < 0.0F) {
      u1_0 = static_cast<real32_T>(ceil(static_cast<real_T>(u1)));
    } else {
      u1_0 = static_cast<real32_T>(floor(static_cast<real_T>(u1)));
    }

    if ((u1 != 0.0F) && (u1 != u1_0)) {
      u1_0 = static_cast<real32_T>(fabs(static_cast<real_T>(u0 / u1)));
      if (!(static_cast<real32_T>(fabs(static_cast<real_T>(u1_0 -
              static_cast<real32_T>(floor(static_cast<real_T>(u1_0 + 0.5F)))))) >
            FLT_EPSILON * u1_0)) {
        y = 0.0F * u0;
      } else {
        y = static_cast<real32_T>(fmod(static_cast<real_T>(u0),
          static_cast<real_T>(u1)));
      }
    } else {
      y = static_cast<real32_T>(fmod(static_cast<real_T>(u0), static_cast<real_T>
        (u1)));
    }
  }

  return y;
}

static real32_T px4CtrlQGCGPS_sind_j(real32_T x)
{
  real32_T b_x;
  int8_T n;
  if (rtIsInfF(x) || rtIsNaNF(x)) {
    b_x = (rtNaNF);
  } else {
    real32_T absx;
    b_x = rt_remf_snf(x, 360.0F);
    absx = static_cast<real32_T>(fabs(static_cast<real_T>(b_x)));
    if (absx > 180.0F) {
      if (b_x > 0.0F) {
        b_x -= 360.0F;
      } else {
        b_x += 360.0F;
      }

      absx = static_cast<real32_T>(fabs(static_cast<real_T>(b_x)));
    }

    if (absx <= 45.0F) {
      b_x = static_cast<real32_T>(sin(static_cast<real_T>(0.0174532924F * b_x)));
    } else {
      boolean_T guard1 = false;
      guard1 = false;
      if (absx <= 135.0F) {
        if (b_x > 0.0F) {
          b_x = static_cast<real32_T>(cos(static_cast<real_T>((b_x - 90.0F) *
            0.0174532924F)));
        } else {
          b_x = (b_x + 90.0F) * 0.0174532924F;
          n = -1;
          guard1 = true;
        }
      } else {
        if (b_x > 0.0F) {
          b_x = (b_x - 180.0F) * 0.0174532924F;
          n = 2;
        } else {
          b_x = (b_x + 180.0F) * 0.0174532924F;
          n = -2;
        }

        guard1 = true;
      }

      if (guard1) {
        if (n == -1) {
          b_x = -static_cast<real32_T>(cos(static_cast<real_T>(b_x)));
        } else {
          b_x = -static_cast<real32_T>(sin(static_cast<real_T>(b_x)));
        }
      }
    }
  }

  return b_x;
}

static real32_T px4CtrlQGCGPS_cosd_j(real32_T x)
{
  real32_T b_x;
  int8_T n;
  if (rtIsInfF(x) || rtIsNaNF(x)) {
    b_x = (rtNaNF);
  } else {
    real32_T absx;
    b_x = rt_remf_snf(x, 360.0F);
    absx = static_cast<real32_T>(fabs(static_cast<real_T>(b_x)));
    if (absx > 180.0F) {
      if (b_x > 0.0F) {
        b_x -= 360.0F;
      } else {
        b_x += 360.0F;
      }

      absx = static_cast<real32_T>(fabs(static_cast<real_T>(b_x)));
    }

    if (absx <= 45.0F) {
      b_x = static_cast<real32_T>(cos(static_cast<real_T>(0.0174532924F * b_x)));
    } else {
      boolean_T guard1 = false;
      guard1 = false;
      if (absx <= 135.0F) {
        if (b_x > 0.0F) {
          b_x = -static_cast<real32_T>(sin(static_cast<real_T>((b_x - 90.0F) *
            0.0174532924F)));
        } else {
          b_x = (b_x + 90.0F) * 0.0174532924F;
          n = -1;
          guard1 = true;
        }
      } else {
        if (b_x > 0.0F) {
          b_x = (b_x - 180.0F) * 0.0174532924F;
          n = 2;
        } else {
          b_x = (b_x + 180.0F) * 0.0174532924F;
          n = -2;
        }

        guard1 = true;
      }

      if (guard1) {
        if (n == -1) {
          b_x = static_cast<real32_T>(sin(static_cast<real_T>(b_x)));
        } else {
          b_x = -static_cast<real32_T>(cos(static_cast<real_T>(b_x)));
        }
      }
    }
  }

  return b_x;
}

real32_T rt_powf_snf(real32_T u0, real32_T u1)
{
  real32_T y;
  if (rtIsNaNF(u0) || rtIsNaNF(u1)) {
    y = (rtNaNF);
  } else {
    real32_T tmp;
    real32_T tmp_0;
    tmp = static_cast<real32_T>(fabs(static_cast<real_T>(u0)));
    tmp_0 = static_cast<real32_T>(fabs(static_cast<real_T>(u1)));
    if (rtIsInfF(u1)) {
      if (tmp == 1.0F) {
        y = 1.0F;
      } else if (tmp > 1.0F) {
        if (u1 > 0.0F) {
          y = (rtInfF);
        } else {
          y = 0.0F;
        }
      } else if (u1 > 0.0F) {
        y = 0.0F;
      } else {
        y = (rtInfF);
      }
    } else if (tmp_0 == 0.0F) {
      y = 1.0F;
    } else if (tmp_0 == 1.0F) {
      if (u1 > 0.0F) {
        y = u0;
      } else {
        y = 1.0F / u0;
      }
    } else if (u1 == 2.0F) {
      y = u0 * u0;
    } else if ((u1 == 0.5F) && (u0 >= 0.0F)) {
      y = static_cast<real32_T>(sqrt(static_cast<real_T>(u0)));
    } else if ((u0 < 0.0F) && (u1 > static_cast<real32_T>(floor
                 (static_cast<real_T>(u1))))) {
      y = (rtNaNF);
    } else {
      y = static_cast<real32_T>(pow(static_cast<real_T>(u0), static_cast<real_T>
        (u1)));
    }
  }

  return y;
}

static void px4CtrlQGCGPS_SystemCore_step(fusion_internal_simulink_gpsS_T *obj,
  const real32_T varargin_1[3], const real32_T varargin_2[3], real32_T
  varargout_1[3], real32_T varargout_2[3], real32_T *varargout_3, real32_T
  *varargout_4)
{
  b_coder_internal_RandStream_p_T *s;
  c_coder_internal_mt19937ar_px_T *obj_0;
  boolean_T iterate;
  if (obj->TunablePropsChanged) {
    boolean_T guard1 = false;
    obj->TunablePropsChanged = false;
    iterate = obj->tunablePropertyChanged[0];
    guard1 = false;
    if (iterate) {
      guard1 = true;
    } else {
      iterate = obj->tunablePropertyChanged[1];
      if (iterate) {
        guard1 = true;
      } else {
        iterate = obj->tunablePropertyChanged[3];
        if (iterate) {
          guard1 = true;
        }
      }
    }

    if (guard1) {
      px4CtrlQGCGPS_B.decayFactor = obj->DecayFactor;
      px4CtrlQGCGPS_B.horzSigma = obj->HorizontalPositionAccuracy;
      px4CtrlQGCGPS_B.vertSigma = obj->VerticalPositionAccuracy;
      px4CtrlQGCGPS_B.b_x = sqrt(0.01 / (0.005 / (1.0 -
        px4CtrlQGCGPS_B.decayFactor)));
      px4CtrlQGCGPS_B.horzSigma *= px4CtrlQGCGPS_B.b_x;
      obj->pSigmaScaled[0] = px4CtrlQGCGPS_B.horzSigma;
      obj->pSigmaScaled[1] = px4CtrlQGCGPS_B.horzSigma;
      obj->pSigmaScaled[2] = px4CtrlQGCGPS_B.vertSigma * px4CtrlQGCGPS_B.b_x;
      obj->pPositionErrorFilterNum = 1.0;
      obj->pPositionErrorFilterDen[0] = 1.0;
      obj->pPositionErrorFilterDen[1] = -px4CtrlQGCGPS_B.decayFactor;
    }

    obj->tunablePropertyChanged[0] = false;
    obj->tunablePropertyChanged[1] = false;
    obj->tunablePropertyChanged[2] = false;
    obj->tunablePropertyChanged[3] = false;
  }

  GPSSensorBase_stepRandomStream(obj, px4CtrlQGCGPS_B.randNums);
  px4CtrlQGCGPS_B.decayFactor = obj->pSigmaScaled[0];
  px4CtrlQGCGPS_B.vertSigma = obj->pSigmaScaled[1];
  px4CtrlQGCGPS_B.b_x = obj->pSigmaScaled[2];
  px4CtrlQGCGPS_B.horzSigma = obj->pPositionErrorFilterNum;
  px4CtrlQGCGPS_B.a_idx_0 = obj->pPositionErrorFilterDen[0];
  px4CtrlQGCGPS_B.a_idx_1 = obj->pPositionErrorFilterDen[1];
  px4CtrlQGCGPS_B.ecefPos_idx_0 = obj->pPositionErrorFilterStates[0];
  px4CtrlQGCGPS_B.ecefPos_idx_1 = obj->pPositionErrorFilterStates[1];
  px4CtrlQGCGPS_B.ecefPos_idx_2 = obj->pPositionErrorFilterStates[2];
  if ((!rtIsInf(px4CtrlQGCGPS_B.a_idx_0)) && (!rtIsNaN(px4CtrlQGCGPS_B.a_idx_0))
      && (!(px4CtrlQGCGPS_B.a_idx_0 == 0.0)) && (px4CtrlQGCGPS_B.a_idx_0 != 1.0))
  {
    px4CtrlQGCGPS_B.horzSigma /= px4CtrlQGCGPS_B.a_idx_0;
    px4CtrlQGCGPS_B.a_idx_1 /= px4CtrlQGCGPS_B.a_idx_0;
  }

  px4CtrlQGCGPS_B.ecefPos_idx_0 += static_cast<real32_T>
    (px4CtrlQGCGPS_B.randNums[0] * px4CtrlQGCGPS_B.decayFactor *
     px4CtrlQGCGPS_B.horzSigma);
  px4CtrlQGCGPS_B.ecefPos_idx_1 += static_cast<real32_T>
    (px4CtrlQGCGPS_B.randNums[1] * px4CtrlQGCGPS_B.vertSigma *
     px4CtrlQGCGPS_B.horzSigma);
  px4CtrlQGCGPS_B.localPosMeas_idx_2 = static_cast<real32_T>
    (px4CtrlQGCGPS_B.randNums[2] * px4CtrlQGCGPS_B.b_x *
     px4CtrlQGCGPS_B.horzSigma) + px4CtrlQGCGPS_B.ecefPos_idx_2;
  obj->pPositionErrorFilterStates[0] = -px4CtrlQGCGPS_B.ecefPos_idx_0 *
    static_cast<real32_T>(px4CtrlQGCGPS_B.a_idx_1);
  obj->pPositionErrorFilterStates[1] = -px4CtrlQGCGPS_B.ecefPos_idx_1 *
    static_cast<real32_T>(px4CtrlQGCGPS_B.a_idx_1);
  obj->pPositionErrorFilterStates[2] = -px4CtrlQGCGPS_B.localPosMeas_idx_2 *
    static_cast<real32_T>(px4CtrlQGCGPS_B.a_idx_1);
  *varargout_4 = static_cast<real32_T>(sqrt(static_cast<real_T>(varargin_2[0] *
    varargin_2[0] + varargin_2[1] * varargin_2[1])));
  GPSSensorBase_stepRandomStream(obj, px4CtrlQGCGPS_B.randNums);
  px4CtrlQGCGPS_B.decayFactor = obj->VelocityAccuracy *
    px4CtrlQGCGPS_B.randNums[0];
  px4CtrlQGCGPS_B.vertSigma = obj->VelocityAccuracy * px4CtrlQGCGPS_B.randNums[1];
  px4CtrlQGCGPS_B.b_x = obj->VelocityAccuracy * px4CtrlQGCGPS_B.randNums[2];
  px4CtrlQGCGPS_B.horzSigma = obj->VelocityAccuracy;
  px4CtrlQGCGPS_B.b_idx_0 = static_cast<real32_T>(px4CtrlQGCGPS_B.horzSigma) /
    *varargout_4;
  if (!(*varargout_4 > 0.0F)) {
    px4CtrlQGCGPS_B.b_idx_0 = 360.0F;
  }

  if (*varargout_4 > 0.0F) {
    s = obj->pStream;
    px4CtrlQGCGPS_B.nt = s->NtMethod;
    if (px4CtrlQGCGPS_B.nt == ziggurat) {
      obj_0 = s->Generator;
      px4CtrlQGCGPS_B.horzSigma = px4CtrlQGC_mt19937ar_mtziggurat(obj_0);
    } else if (s->NtMethod == ziggurat) {
      px4CtrlQGCGPS_B.horzSigma = px4_RandStream_zigguratGenrandn(s);
    } else if (s->NtMethod == polar) {
      px4CtrlQGCGPS_B.horzSigma = px4Ctr_RandStream_polarGenrandn(s);
    } else {
      px4CtrlQGCGPS_B.horzSigma = px_RandStream_inversionGenrandn(s);
    }
  } else {
    px4CtrlQGCGPS_B.horzSigma = px4CtrlQGCGPS_RandStream_rand_j(obj->pStream);
  }

  px4CtrlQGCGPS_B.ecefPos_idx_2 = varargin_1[0] + px4CtrlQGCGPS_B.ecefPos_idx_0;
  px4CtrlQGCGPS_B.ecefPos_idx_1 += varargin_1[1];
  px4CtrlQGCGPS_B.localPosMeas_idx_2 += varargin_1[2];
  px4CtrlQGCGPS_B.a_idx_0 = px4CtrlQGCGPS_cosd(47.397742);
  px4CtrlQGCGPS_B.a_idx_1 = px4CtrlQGCGPS_sind(47.397742);
  px4CtrlQGCGPS_B.coslambda_tmp = px4CtrlQGCGPS_cosd(8.545594);
  px4CtrlQGCGPS_B.sinlambda_tmp = px4CtrlQGCGPS_sind(8.545594);
  px4CtrlQGCGPS_B.N = 6.378137E+6 / sqrt(1.0 - px4CtrlQGCGPS_B.a_idx_1 *
    px4CtrlQGCGPS_B.a_idx_1 * 0.0066943799901413165);
  px4CtrlQGCGPS_B.rho = (px4CtrlQGCGPS_B.N + 488.0) * px4CtrlQGCGPS_B.a_idx_0;
  px4CtrlQGCGPS_B.tmp = static_cast<real32_T>(px4CtrlQGCGPS_B.a_idx_0) *
    -px4CtrlQGCGPS_B.localPosMeas_idx_2 - static_cast<real32_T>
    (px4CtrlQGCGPS_B.a_idx_1) * px4CtrlQGCGPS_B.ecefPos_idx_2;
  px4CtrlQGCGPS_B.ecefPos_idx_0 = (static_cast<real32_T>
    (px4CtrlQGCGPS_B.coslambda_tmp) * px4CtrlQGCGPS_B.tmp - static_cast<real32_T>
    (px4CtrlQGCGPS_B.sinlambda_tmp) * px4CtrlQGCGPS_B.ecefPos_idx_1) +
    static_cast<real32_T>(px4CtrlQGCGPS_B.rho * px4CtrlQGCGPS_B.coslambda_tmp);
  px4CtrlQGCGPS_B.ecefPos_idx_1 = (static_cast<real32_T>
    (px4CtrlQGCGPS_B.sinlambda_tmp) * px4CtrlQGCGPS_B.tmp + static_cast<real32_T>
    (px4CtrlQGCGPS_B.coslambda_tmp) * px4CtrlQGCGPS_B.ecefPos_idx_1) +
    static_cast<real32_T>(px4CtrlQGCGPS_B.rho * px4CtrlQGCGPS_B.sinlambda_tmp);
  px4CtrlQGCGPS_B.ecefPos_idx_2 = static_cast<real32_T>((px4CtrlQGCGPS_B.N *
    0.99330562000985867 + 488.0) * px4CtrlQGCGPS_B.a_idx_1) +
    (static_cast<real32_T>(px4CtrlQGCGPS_B.a_idx_1) *
     -px4CtrlQGCGPS_B.localPosMeas_idx_2 + static_cast<real32_T>
     (px4CtrlQGCGPS_B.a_idx_0) * px4CtrlQGCGPS_B.ecefPos_idx_2);
  px4CtrlQGCGPS_B.localPosMeas_idx_2 = rt_hypotf_snf
    (px4CtrlQGCGPS_B.ecefPos_idx_0, px4CtrlQGCGPS_B.ecefPos_idx_1);
  px4CtrlQGCGPS_B.tmp = 6.378137E+6F * px4CtrlQGCGPS_B.localPosMeas_idx_2;
  px4CtrlQGCGPS_B.v = (42841.3125F / rt_hypotf_snf
                       (px4CtrlQGCGPS_B.localPosMeas_idx_2,
                        px4CtrlQGCGPS_B.ecefPos_idx_2) + 1.0F) * (6.356752E+6F *
    px4CtrlQGCGPS_B.ecefPos_idx_2);
  if (rtIsNaNF(px4CtrlQGCGPS_B.tmp)) {
    px4CtrlQGCGPS_B.sinbeta = px4CtrlQGCGPS_B.tmp;
  } else {
    px4CtrlQGCGPS_B.sinbeta = (px4CtrlQGCGPS_B.tmp > 0.0F);
  }

  px4CtrlQGCGPS_B.cosbeta = px4CtrlQGCGPS_B.sinbeta / static_cast<real32_T>
    (rt_hypotd_snf(1.0, static_cast<real_T>(px4CtrlQGCGPS_B.v /
       px4CtrlQGCGPS_B.tmp)));
  if (rtIsNaNF(px4CtrlQGCGPS_B.v)) {
    px4CtrlQGCGPS_B.sinbeta = px4CtrlQGCGPS_B.v;
  } else if (px4CtrlQGCGPS_B.v < 0.0F) {
    px4CtrlQGCGPS_B.sinbeta = -1.0F;
  } else {
    px4CtrlQGCGPS_B.sinbeta = (px4CtrlQGCGPS_B.v > 0.0F);
  }

  px4CtrlQGCGPS_B.sinbeta /= static_cast<real32_T>(rt_hypotd_snf(1.0,
    static_cast<real_T>(px4CtrlQGCGPS_B.tmp / px4CtrlQGCGPS_B.v)));
  px4CtrlQGCGPS_B.count = 0;
  iterate = true;
  while (iterate && (px4CtrlQGCGPS_B.count < 5)) {
    px4CtrlQGCGPS_B.cosprev = px4CtrlQGCGPS_B.cosbeta;
    px4CtrlQGCGPS_B.sinprev = px4CtrlQGCGPS_B.sinbeta;
    px4CtrlQGCGPS_B.tmp = px4CtrlQGCGPS_B.localPosMeas_idx_2 - 42697.6758F *
      rt_powf_snf(px4CtrlQGCGPS_B.cosbeta, 3.0F);
    px4CtrlQGCGPS_B.v = 42841.3125F * rt_powf_snf(px4CtrlQGCGPS_B.sinbeta, 3.0F)
      + px4CtrlQGCGPS_B.ecefPos_idx_2;
    px4CtrlQGCGPS_B.au = 6.378137E+6F * px4CtrlQGCGPS_B.tmp;
    px4CtrlQGCGPS_B.bv = 6.356752E+6F * px4CtrlQGCGPS_B.v;
    if (rtIsNaNF(px4CtrlQGCGPS_B.au)) {
      px4CtrlQGCGPS_B.sinbeta = px4CtrlQGCGPS_B.au;
    } else if (px4CtrlQGCGPS_B.au < 0.0F) {
      px4CtrlQGCGPS_B.sinbeta = -1.0F;
    } else {
      px4CtrlQGCGPS_B.sinbeta = (px4CtrlQGCGPS_B.au > 0.0F);
    }

    px4CtrlQGCGPS_B.cosbeta = px4CtrlQGCGPS_B.sinbeta / static_cast<real32_T>
      (rt_hypotd_snf(1.0, static_cast<real_T>(px4CtrlQGCGPS_B.bv /
         px4CtrlQGCGPS_B.au)));
    if (rtIsNaNF(px4CtrlQGCGPS_B.bv)) {
      px4CtrlQGCGPS_B.sinbeta = px4CtrlQGCGPS_B.bv;
    } else if (px4CtrlQGCGPS_B.bv < 0.0F) {
      px4CtrlQGCGPS_B.sinbeta = -1.0F;
    } else {
      px4CtrlQGCGPS_B.sinbeta = (px4CtrlQGCGPS_B.bv > 0.0F);
    }

    px4CtrlQGCGPS_B.sinbeta /= static_cast<real32_T>(rt_hypotd_snf(1.0,
      static_cast<real_T>(px4CtrlQGCGPS_B.au / px4CtrlQGCGPS_B.bv)));
    frexp(1.5707963267948966, &px4CtrlQGCGPS_B.b_exponent);
    iterate = (rt_hypotf_snf(px4CtrlQGCGPS_B.cosbeta - px4CtrlQGCGPS_B.cosprev,
                px4CtrlQGCGPS_B.sinbeta - px4CtrlQGCGPS_B.sinprev) >
               2.22044605E-16F);
    px4CtrlQGCGPS_B.count++;
  }

  px4CtrlQGCGPS_B.tmp = 57.2957802F * rt_atan2f_snf(px4CtrlQGCGPS_B.v,
    px4CtrlQGCGPS_B.tmp);
  px4CtrlQGCGPS_B.v = px4CtrlQGCGPS_sind_j(px4CtrlQGCGPS_B.tmp);
  px4CtrlQGCGPS_B.cosbeta = 6.378137E+6F / static_cast<real32_T>(sqrt(
    static_cast<real_T>(1.0F - px4CtrlQGCGPS_B.v * px4CtrlQGCGPS_B.v *
                        0.00669438F)));
  *varargout_3 = static_cast<real32_T>(sqrt(px4CtrlQGCGPS_B.decayFactor *
    px4CtrlQGCGPS_B.decayFactor + px4CtrlQGCGPS_B.vertSigma *
    px4CtrlQGCGPS_B.vertSigma)) + *varargout_4;
  *varargout_4 = 57.2957802F * rt_atan2f_snf(varargin_2[1], varargin_2[0]) +
    px4CtrlQGCGPS_B.b_idx_0 * static_cast<real32_T>(px4CtrlQGCGPS_B.horzSigma);
  iterate = (*varargout_4 > 0.0F);
  px4CtrlQGCGPS_B.cosprev = *varargout_4;
  if (rtIsNaNF(*varargout_4) || rtIsInfF(*varargout_4)) {
    *varargout_4 = (rtNaNF);
  } else if (*varargout_4 == 0.0F) {
    *varargout_4 = 0.0F;
  } else {
    *varargout_4 = static_cast<real32_T>(fmod(static_cast<real_T>(*varargout_4),
      360.0));
    if (*varargout_4 == 0.0F) {
      *varargout_4 = 0.0F;
    } else if (px4CtrlQGCGPS_B.cosprev < 0.0F) {
      *varargout_4 += 360.0F;
    }
  }

  if ((*varargout_4 == 0.0F) && iterate) {
    *varargout_4 = 360.0F;
  }

  varargout_2[0] = *varargout_3 * px4CtrlQGCGPS_cosd_j(*varargout_4);
  varargout_2[1] = *varargout_3 * px4CtrlQGCGPS_sind_j(*varargout_4);
  varargout_2[2] = varargin_2[2] + static_cast<real32_T>(px4CtrlQGCGPS_B.b_x);
  varargout_1[0] = px4CtrlQGCGPS_B.tmp;
  varargout_1[1] = 57.2957802F * rt_atan2f_snf(px4CtrlQGCGPS_B.ecefPos_idx_1,
    px4CtrlQGCGPS_B.ecefPos_idx_0);
  varargout_1[2] = ((0.00669438F * px4CtrlQGCGPS_B.cosbeta * px4CtrlQGCGPS_B.v +
                     px4CtrlQGCGPS_B.ecefPos_idx_2) * px4CtrlQGCGPS_B.v +
                    px4CtrlQGCGPS_B.localPosMeas_idx_2 * px4CtrlQGCGPS_cosd_j
                    (px4CtrlQGCGPS_B.tmp)) - px4CtrlQGCGPS_B.cosbeta;
}

real_T rt_atan2d_snf(real_T u0, real_T u1)
{
  real_T y;
  if (rtIsNaN(u0) || rtIsNaN(u1)) {
    y = (rtNaN);
  } else if (rtIsInf(u0) && rtIsInf(u1)) {
    int32_T u0_0;
    int32_T u1_0;
    if (u0 > 0.0) {
      u0_0 = 1;
    } else {
      u0_0 = -1;
    }

    if (u1 > 0.0) {
      u1_0 = 1;
    } else {
      u1_0 = -1;
    }

    y = atan2(static_cast<real_T>(u0_0), static_cast<real_T>(u1_0));
  } else if (u1 == 0.0) {
    if (u0 > 0.0) {
      y = RT_PI / 2.0;
    } else if (u0 < 0.0) {
      y = -(RT_PI / 2.0);
    } else {
      y = 0.0;
    }
  } else {
    y = atan2(u0, u1);
  }

  return y;
}

static void px4CtrlQGCGPS_SystemCore_setup(fusion_internal_simulink_gpsS_T *obj)
{
  b_coder_internal_RandStream_p_T *iobj_0;
  uint32_T r;
  obj->isInitialized = 1;
  iobj_0 = &obj->_pobj0;
  obj->_pobj0.SavedPolarValue = 0.0;
  obj->_pobj0.HaveSavedPolarValue = false;
  iobj_0->MtGenerator.Seed = 67U;
  r = iobj_0->MtGenerator.Seed;
  iobj_0->MtGenerator.State[0] = r;
  for (int32_T b_statei = 0; b_statei < 623; b_statei++) {
    r = ((r >> 30U ^ r) * 1812433253U + b_statei) + 1U;
    obj->_pobj0.MtGenerator.State[b_statei + 1] = r;
  }

  iobj_0->MtGenerator.State[624] = 624U;
  obj->_pobj0.Generator = &obj->_pobj0.MtGenerator;
  obj->_pobj0.NtMethod = ziggurat;
  obj->pStream = &obj->_pobj0;
  obj->pPositionErrorFilterStates[0] = 0.0F;
  obj->pPositionErrorFilterStates[1] = 0.0F;
  obj->pPositionErrorFilterStates[2] = 0.0F;
  obj->TunablePropsChanged = false;
}

static void px4Ctrl_GPSSensorBase_resetImpl(fusion_internal_simulink_gpsS_T *obj)
{
  b_coder_internal_RandStream_p_T *s;
  c_coder_internal_mt19937ar_px_T *obj_0;
  uint32_T nseed;
  s = obj->pStream;
  nseed = s->Generator->Seed;
  obj_0 = s->Generator;
  if (nseed == 0U) {
    obj_0->Seed = 5489U;
  } else {
    obj_0->Seed = nseed;
  }

  nseed = obj_0->Seed;
  obj_0->State[0] = nseed;
  for (int32_T b_statei = 0; b_statei < 623; b_statei++) {
    nseed = ((nseed >> 30U ^ nseed) * 1812433253U + b_statei) + 1U;
    obj_0->State[b_statei + 1] = nseed;
  }

  real_T b_x;
  real_T decayFactor;
  real_T horzSigma;
  real_T vertSigma;
  obj_0->State[624] = 624U;
  decayFactor = obj->DecayFactor;
  horzSigma = obj->HorizontalPositionAccuracy;
  vertSigma = obj->VerticalPositionAccuracy;
  b_x = sqrt(0.01 / (0.005 / (1.0 - decayFactor)));
  horzSigma *= b_x;
  obj->pSigmaScaled[0] = horzSigma;
  obj->pSigmaScaled[1] = horzSigma;
  obj->pSigmaScaled[2] = vertSigma * b_x;
  obj->pPositionErrorFilterNum = 1.0;
  obj->pPositionErrorFilterDen[0] = 1.0;
  obj->pPositionErrorFilterDen[1] = -decayFactor;
  obj->pPositionErrorFilterStates[0] = 0.0F;
  obj->pPositionErrorFilterStates[1] = 0.0F;
  obj->pPositionErrorFilterStates[2] = 0.0F;
}

static void px4CtrlQGCGP_SystemCore_setup_j(px4_internal_block_PWM_px4Ctr_T *obj,
  boolean_T varargin_1, boolean_T varargin_2)
{
  uint16_T status;
  obj->isSetupComplete = false;
  obj->isInitialized = 1;
  obj->isMain = true;
  obj->pwmDevObj = MW_PWM_OUTPUT_MAIN_DEVICE_PATH;
  status = pwm_open(&obj->pwmDevHandler, obj->pwmDevObj,
                    &obj->actuatorAdvertiseObj, &obj->armAdvertiseObj);
  obj->errorStatus = static_cast<uint16_T>(obj->errorStatus | status);
  obj->servoCount = 0;
  status = pwm_getServoCount(&obj->pwmDevHandler, &obj->servoCount);
  obj->errorStatus = static_cast<uint16_T>(obj->errorStatus | status);
  if (varargin_1) {
    status = pwm_arm(&obj->pwmDevHandler, &obj->armAdvertiseObj);
    obj->isArmed = true;
  } else {
    status = pwm_disarm(&obj->pwmDevHandler, &obj->armAdvertiseObj);
    obj->isArmed = false;
  }

  obj->errorStatus = static_cast<uint16_T>(obj->errorStatus | status);
  status = pwm_setPWMRate(&obj->pwmDevHandler, obj->isMain);
  obj->errorStatus = static_cast<uint16_T>(obj->errorStatus | status);
  obj->channelMask = 15;
  status = pwm_setChannelMask(&obj->pwmDevHandler, obj->channelMask);
  obj->errorStatus = static_cast<uint16_T>(obj->errorStatus | status);
  status = pwm_setFailsafePWM(&obj->pwmDevHandler, obj->servoCount,
    obj->channelMask, obj->isMain);
  obj->errorStatus = static_cast<uint16_T>(obj->errorStatus | status);
  status = pwm_setDisarmedPWM(&obj->pwmDevHandler, obj->servoCount,
    obj->channelMask, obj->isMain, &obj->actuatorAdvertiseObj);
  obj->errorStatus = static_cast<uint16_T>(obj->errorStatus | status);
  if (obj->isMain) {
    status = pwm_forceFailsafe(&obj->pwmDevHandler, static_cast<int32_T>
      (varargin_2));
    obj->errorStatus = static_cast<uint16_T>(obj->errorStatus | status);
    status = pwm_forceTerminateFailsafe(&obj->pwmDevHandler, 0);
    obj->errorStatus = static_cast<uint16_T>(obj->errorStatus | status);
  }

  obj->isSetupComplete = true;
}

// Model step function for TID0
void px4CtrlQGCGPS_step0(void)         // Sample time: [0.005s, 0.0s]
{
  uint16_T status;
  boolean_T rtb_Compare;
  boolean_T rtb_Compare_g2;
  boolean_T rtb_Compare_i;
  boolean_T rtb_LogicalOperator;

  {                                    // Sample time: [0.005s, 0.0s]
    rate_monotonic_scheduler();
  }

  // Switch: '<S16>/Switch' incorporates:
  //   Constant: '<Root>/Constant3'
  //   Constant: '<S16>/Constant1'
  //   DataStoreRead: '<Root>/Data Store Read20'
  //   DataStoreRead: '<S16>/Data Store Read'
  //   DataStoreRead: '<S16>/Data Store Read1'

  if (px4CtrlQGCGPS_DW.attitude_flag) {
    px4CtrlQGCGPS_B.rtb_DataTypeConversion3_idx_0 = px4CtrlQGCGPS_DW.yaw;
    px4CtrlQGCGPS_B.rtb_DataTypeConversion3_idx_1 =
      px4CtrlQGCGPS_P.Constant3_Value_g;
    px4CtrlQGCGPS_B.yaw = px4CtrlQGCGPS_DW.yaw_speed;
  } else {
    px4CtrlQGCGPS_B.rtb_DataTypeConversion3_idx_0 =
      px4CtrlQGCGPS_P.Constant1_Value_a;
    px4CtrlQGCGPS_B.rtb_DataTypeConversion3_idx_1 =
      px4CtrlQGCGPS_P.Constant1_Value_a;
    px4CtrlQGCGPS_B.yaw = px4CtrlQGCGPS_P.Constant1_Value_a;
  }

  // End of Switch: '<S16>/Switch'

  // RelationalOperator: '<S41>/Compare' incorporates:
  //   Abs: '<S40>/Abs'
  //   Constant: '<S41>/Constant'
  //   DataStoreRead: '<S40>/Data Store Read1'

  rtb_Compare = (fabs(px4CtrlQGCGPS_DW.e_pitch_yaw) >=
                 px4CtrlQGCGPS_P.CompareToConstant1_const);

  // Sum: '<S40>/Add' incorporates:
  //   DataStoreRead: '<S40>/Data Store Read'
  //   DataStoreRead: '<S40>/Data Store Read3'
  //   Sum: '<S43>/Add'

  px4CtrlQGCGPS_B.fcn4 = px4CtrlQGCGPS_DW.t - px4CtrlQGCGPS_DW.start_time_yaw;

  // Fcn: '<S40>/Fcn' incorporates:
  //   Constant: '<S40>/T'
  //   Constant: '<S40>/ch'
  //   Sum: '<S40>/Add'

  px4CtrlQGCGPS_B.rtb_Fcn_n = px4CtrlQGCGPS_P.ch_Value /
    (px4CtrlQGCGPS_P.T_Value - px4CtrlQGCGPS_B.fcn4);

  // MATLAB Function: '<S40>/MATLAB Function' incorporates:
  //   Constant: '<S40>/t'
  //   DataStoreRead: '<S40>/Data Store Read'
  //   DataStoreRead: '<S40>/Data Store Read3'

  px4CtrlQGCGP_MATLABFunction(rtb_Compare, px4CtrlQGCGPS_DW.t,
    px4CtrlQGCGPS_DW.start_time_yaw, px4CtrlQGCGPS_B.rtb_Fcn_n,
    px4CtrlQGCGPS_P.t_Value, &px4CtrlQGCGPS_B.rtb_DataStoreRead48_m);

  // Sum: '<S40>/Add1' incorporates:
  //   Constant: '<S40>/r'

  px4CtrlQGCGPS_B.z2 = px4CtrlQGCGPS_P.r_Value +
    px4CtrlQGCGPS_B.rtb_DataStoreRead48_m;

  // Sum: '<S39>/Add' incorporates:
  //   Sum: '<S16>/Add2'

  px4CtrlQGCGPS_DW.e_pitch_yaw = px4CtrlQGCGPS_B.rtb_DataTypeConversion3_idx_0 -
    px4CtrlQGCGPS_B.rtb_DataTypeConversion3_idx_1;

  // Gain: '<S39>/Gain4' incorporates:
  //   Constant: '<S16>/b'
  //   Product: '<S39>/Product'
  //   Sum: '<S39>/Add'

  px4CtrlQGCGPS_B.pitch = px4CtrlQGCGPS_DW.e_pitch_yaw * px4CtrlQGCGPS_B.z2 *
    px4CtrlQGCGPS_P.b_Value * px4CtrlQGCGPS_P.Gain4_Gain;

  // SampleTimeMath: '<S38>/TSamp'
  //
  //  About '<S38>/TSamp':
  //   y = u * K where K = 1 / ( w * Ts )

  px4CtrlQGCGPS_B.TSamp = px4CtrlQGCGPS_B.pitch * px4CtrlQGCGPS_P.TSamp_WtEt;

  // Sum: '<S16>/Add1'
  px4CtrlQGCGPS_B.pitch = px4CtrlQGCGPS_B.yaw - px4CtrlQGCGPS_B.pitch;

  // Gain: '<S1>/Gain1' incorporates:
  //   DiscreteIntegrator: '<S19>/Discrete-Time Integrator3'

  px4CtrlQGCGPS_B.yaw_thrust_p = px4CtrlQGCGPS_P.Gain1_Gain_o *
    px4CtrlQGCGPS_DW.DiscreteTimeIntegrator3_DSTATE;

  // Signum: '<S16>/Sign'
  if (rtIsNaN(px4CtrlQGCGPS_B.pitch)) {
    px4CtrlQGCGPS_B.Product7_e = px4CtrlQGCGPS_B.pitch;
  } else if (px4CtrlQGCGPS_B.pitch < 0.0) {
    px4CtrlQGCGPS_B.Product7_e = -1.0;
  } else {
    px4CtrlQGCGPS_B.Product7_e = (px4CtrlQGCGPS_B.pitch > 0.0);
  }

  // End of Signum: '<S16>/Sign'

  // Saturate: '<S1>/Saturation4'
  if (px4CtrlQGCGPS_B.yaw_thrust_p > px4CtrlQGCGPS_P.Saturation4_UpperSat) {
    px4CtrlQGCGPS_B.yaw_thrust_p = px4CtrlQGCGPS_P.Saturation4_UpperSat;
  } else if (px4CtrlQGCGPS_B.yaw_thrust_p < px4CtrlQGCGPS_P.Saturation4_LowerSat)
  {
    px4CtrlQGCGPS_B.yaw_thrust_p = px4CtrlQGCGPS_P.Saturation4_LowerSat;
  }

  // End of Saturate: '<S1>/Saturation4'

  // Sum: '<S1>/Add3' incorporates:
  //   Constant: '<S16>/b'
  //   Constant: '<S16>/l'
  //   DataStoreWrite: '<S16>/Data Store Write'
  //   Gain: '<S16>/Gain'
  //   Gain: '<S16>/Gain1'
  //   Product: '<S16>/Product'
  //   Product: '<S16>/Product1'
  //   Sum: '<S16>/Add'
  //   Sum: '<S38>/Diff'
  //   UnitDelay: '<S38>/UD'
  //
  //  Block description for '<S38>/Diff':
  //
  //   Add in CPU
  //
  //  Block description for '<S38>/UD':
  //
  //   Store in Global RAM

  px4CtrlQGCGPS_B.Add3 = (((((px4CtrlQGCGPS_B.TSamp - px4CtrlQGCGPS_DW.UD_DSTATE)
    - px4CtrlQGCGPS_DW.e_pitch_yaw) - px4CtrlQGCGPS_B.pitch * px4CtrlQGCGPS_B.z2
    * px4CtrlQGCGPS_P.b_Value) - px4CtrlQGCGPS_B.Product7_e *
    px4CtrlQGCGPS_P.l_Value) - px4CtrlQGCGPS_P.Gain_Gain * px4CtrlQGCGPS_B.yaw) *
    px4CtrlQGCGPS_P.Gain1_Gain - px4CtrlQGCGPS_B.yaw_thrust_p;

  // ManualSwitch: '<S1>/Manual Switch' incorporates:
  //   Constant: '<S1>/Constant'
  //   DataStoreWrite: '<Root>/Data Store Write11'

  if (px4CtrlQGCGPS_P.ManualSwitch_CurrentSetting == 1) {
    // Saturate: '<S1>/Saturation'
    if (px4CtrlQGCGPS_B.Add3 > px4CtrlQGCGPS_P.Saturation_UpperSat) {
      px4CtrlQGCGPS_B.yaw_thrust_p = px4CtrlQGCGPS_P.Saturation_UpperSat;
    } else if (px4CtrlQGCGPS_B.Add3 < px4CtrlQGCGPS_P.Saturation_LowerSat) {
      px4CtrlQGCGPS_B.yaw_thrust_p = px4CtrlQGCGPS_P.Saturation_LowerSat;
    } else {
      px4CtrlQGCGPS_B.yaw_thrust_p = px4CtrlQGCGPS_B.Add3;
    }

    // End of Saturate: '<S1>/Saturation'
  } else {
    px4CtrlQGCGPS_B.yaw_thrust_p = px4CtrlQGCGPS_P.Constant_Value_b;
  }

  // End of ManualSwitch: '<S1>/Manual Switch'

  // Sin: '<Root>/Sine Wave'
  if (px4CtrlQGCGPS_DW.systemEnable != 0) {
    px4CtrlQGCGPS_B.z2 = px4CtrlQGCGPS_P.SineWave_Freq *
      ((px4CtrlQGCGPS_M->Timing.clockTick0) * 0.005);
    px4CtrlQGCGPS_DW.lastSin = sin(px4CtrlQGCGPS_B.z2);
    px4CtrlQGCGPS_DW.lastCos = cos(px4CtrlQGCGPS_B.z2);
    px4CtrlQGCGPS_DW.systemEnable = 0;
  }

  // ManualSwitch: '<Root>/Manual Switch' incorporates:
  //   Constant: '<Root>/Constant3'
  //   Sin: '<Root>/Sine Wave'

  if (px4CtrlQGCGPS_P.ManualSwitch_CurrentSetting_i == 1) {
    px4CtrlQGCGPS_B.pitch = ((px4CtrlQGCGPS_DW.lastSin *
      px4CtrlQGCGPS_P.SineWave_PCos + px4CtrlQGCGPS_DW.lastCos *
      px4CtrlQGCGPS_P.SineWave_PSin) * px4CtrlQGCGPS_P.SineWave_HCos +
      (px4CtrlQGCGPS_DW.lastCos * px4CtrlQGCGPS_P.SineWave_PCos -
       px4CtrlQGCGPS_DW.lastSin * px4CtrlQGCGPS_P.SineWave_PSin) *
      px4CtrlQGCGPS_P.SineWave_Hsin) * px4CtrlQGCGPS_P.SineWave_Amp +
      px4CtrlQGCGPS_P.SineWave_Bias;
  } else {
    px4CtrlQGCGPS_B.pitch = px4CtrlQGCGPS_P.Constant3_Value_g;
  }

  // End of ManualSwitch: '<Root>/Manual Switch'

  // Switch: '<S14>/Switch' incorporates:
  //   Constant: '<S14>/Constant1'
  //   DataStoreRead: '<Root>/Data Store Read14'
  //   DataStoreRead: '<S14>/Data Store Read'
  //   DataStoreRead: '<S14>/Data Store Read1'

  if (px4CtrlQGCGPS_DW.attitude_flag) {
    px4CtrlQGCGPS_B.rtb_DataTypeConversion3_idx_0 = px4CtrlQGCGPS_DW.pitch;
    px4CtrlQGCGPS_B.rtb_DataTypeConversion3_idx_1 = px4CtrlQGCGPS_B.pitch;
    px4CtrlQGCGPS_B.yaw = px4CtrlQGCGPS_DW.pitch_speed;
  } else {
    px4CtrlQGCGPS_B.rtb_DataTypeConversion3_idx_0 =
      px4CtrlQGCGPS_P.Constant1_Value;
    px4CtrlQGCGPS_B.rtb_DataTypeConversion3_idx_1 =
      px4CtrlQGCGPS_P.Constant1_Value;
    px4CtrlQGCGPS_B.yaw = px4CtrlQGCGPS_P.Constant1_Value;
  }

  // End of Switch: '<S14>/Switch'

  // Sum: '<S21>/Add' incorporates:
  //   Sum: '<S14>/Add2'

  px4CtrlQGCGPS_B.Product_c = px4CtrlQGCGPS_B.rtb_DataTypeConversion3_idx_0 -
    px4CtrlQGCGPS_B.rtb_DataTypeConversion3_idx_1;
  px4CtrlQGCGPS_B.z1_i = px4CtrlQGCGPS_B.Product_c;

  // RelationalOperator: '<S23>/Compare' incorporates:
  //   Abs: '<S22>/Abs'
  //   Constant: '<S23>/Constant'
  //   DataStoreRead: '<S22>/Data Store Read1'

  rtb_Compare_i = (fabs(px4CtrlQGCGPS_DW.e_pitch) >=
                   px4CtrlQGCGPS_P.CompareToConstant1_const_b);

  // Sum: '<S22>/Add' incorporates:
  //   DataStoreRead: '<S22>/Data Store Read'
  //   DataStoreRead: '<S22>/Data Store Read3'
  //   Sum: '<S25>/Add'

  px4CtrlQGCGPS_B.Product4 = px4CtrlQGCGPS_DW.t - px4CtrlQGCGPS_DW.start_time;

  // Fcn: '<S22>/Fcn' incorporates:
  //   Constant: '<S22>/T'
  //   Constant: '<S22>/ch'
  //   Sum: '<S22>/Add'

  px4CtrlQGCGPS_B.rtb_Fcn_b_g = px4CtrlQGCGPS_P.ch_Value_j /
    (px4CtrlQGCGPS_P.T_Value_p - px4CtrlQGCGPS_B.Product4);

  // MATLAB Function: '<S22>/MATLAB Function' incorporates:
  //   Constant: '<S22>/t'
  //   DataStoreRead: '<S22>/Data Store Read'
  //   DataStoreRead: '<S22>/Data Store Read3'

  px4CtrlQGCGP_MATLABFunction(rtb_Compare_i, px4CtrlQGCGPS_DW.t,
    px4CtrlQGCGPS_DW.start_time, px4CtrlQGCGPS_B.rtb_Fcn_b_g,
    px4CtrlQGCGPS_P.t_Value_n, &px4CtrlQGCGPS_B.rtb_roll_hat_e_g);

  // Sum: '<S22>/Add1' incorporates:
  //   Constant: '<S22>/r'

  px4CtrlQGCGPS_B.z2_e = px4CtrlQGCGPS_P.r_Value_g +
    px4CtrlQGCGPS_B.rtb_roll_hat_e_g;

  // Gain: '<S21>/Gain4' incorporates:
  //   Constant: '<S14>/b'
  //   Product: '<S21>/Product'

  px4CtrlQGCGPS_B.z1_i = px4CtrlQGCGPS_B.z1_i * px4CtrlQGCGPS_B.z2_e *
    px4CtrlQGCGPS_P.b_Value_l * px4CtrlQGCGPS_P.Gain4_Gain_b;

  // SampleTimeMath: '<S20>/TSamp'
  //
  //  About '<S20>/TSamp':
  //   y = u * K where K = 1 / ( w * Ts )

  px4CtrlQGCGPS_B.z2 = px4CtrlQGCGPS_B.z1_i * px4CtrlQGCGPS_P.TSamp_WtEt_p;

  // Sum: '<S14>/Add2' incorporates:
  //   DataStoreWrite: '<S14>/Data Store Write'

  px4CtrlQGCGPS_DW.e_pitch = px4CtrlQGCGPS_B.Product_c;

  // Sum: '<S14>/Add1'
  px4CtrlQGCGPS_B.z1_i = px4CtrlQGCGPS_B.yaw - px4CtrlQGCGPS_B.z1_i;

  // Product: '<S14>/Product' incorporates:
  //   Constant: '<S14>/b'

  px4CtrlQGCGPS_B.Product_c = px4CtrlQGCGPS_B.z1_i * px4CtrlQGCGPS_B.z2_e *
    px4CtrlQGCGPS_P.b_Value_l;

  // Signum: '<S14>/Sign'
  px4CtrlQGCGPS_B.z2_l = px4CtrlQGCGPS_B.z1_i;

  // Gain: '<S1>/Gain2' incorporates:
  //   DiscreteIntegrator: '<S17>/Discrete-Time Integrator3'

  px4CtrlQGCGPS_B.z1_i = px4CtrlQGCGPS_P.Gain2_Gain *
    px4CtrlQGCGPS_DW.DiscreteTimeIntegrator3_DSTAT_a;

  // Signum: '<S14>/Sign'
  if (!rtIsNaN(px4CtrlQGCGPS_B.z2_l)) {
    if (px4CtrlQGCGPS_B.z2_l < 0.0) {
      px4CtrlQGCGPS_B.z2_l = -1.0;
    } else {
      px4CtrlQGCGPS_B.z2_l = (px4CtrlQGCGPS_B.z2_l > 0.0);
    }
  }

  // Sum: '<S1>/Add2' incorporates:
  //   Constant: '<S14>/l'
  //   DataStoreWrite: '<Root>/Data Store Write12'
  //   DataStoreWrite: '<S14>/Data Store Write'
  //   Gain: '<S14>/Gain'
  //   Gain: '<S14>/Gain1'
  //   Product: '<S14>/Product1'
  //   Sum: '<S14>/Add'
  //   Sum: '<S20>/Diff'
  //   UnitDelay: '<S20>/UD'
  //
  //  Block description for '<S20>/Diff':
  //
  //   Add in CPU
  //
  //  Block description for '<S20>/UD':
  //
  //   Store in Global RAM

  px4CtrlQGCGPS_B.z2_e = (((((px4CtrlQGCGPS_B.z2 - px4CtrlQGCGPS_DW.UD_DSTATE_b)
    - px4CtrlQGCGPS_DW.e_pitch) - px4CtrlQGCGPS_B.Product_c) -
    px4CtrlQGCGPS_B.z2_l * px4CtrlQGCGPS_P.l_Value_b) -
    px4CtrlQGCGPS_P.Gain_Gain_o * px4CtrlQGCGPS_B.yaw) *
    px4CtrlQGCGPS_P.Gain1_Gain_b - px4CtrlQGCGPS_B.z1_i;

  // Switch: '<S15>/Switch' incorporates:
  //   Constant: '<S15>/Constant1'
  //   DataStoreRead: '<Root>/Data Store Read18'
  //   DataStoreRead: '<S15>/Data Store Read'
  //   DataStoreRead: '<S15>/Data Store Read1'

  if (px4CtrlQGCGPS_DW.attitude_flag) {
    px4CtrlQGCGPS_B.rtb_DataTypeConversion3_idx_0 = px4CtrlQGCGPS_DW.roll;
    px4CtrlQGCGPS_B.rtb_DataTypeConversion3_idx_1 = px4CtrlQGCGPS_B.pitch;
    px4CtrlQGCGPS_B.yaw = px4CtrlQGCGPS_DW.roll_speed;
  } else {
    px4CtrlQGCGPS_B.rtb_DataTypeConversion3_idx_0 =
      px4CtrlQGCGPS_P.Constant1_Value_n;
    px4CtrlQGCGPS_B.rtb_DataTypeConversion3_idx_1 =
      px4CtrlQGCGPS_P.Constant1_Value_n;
    px4CtrlQGCGPS_B.yaw = px4CtrlQGCGPS_P.Constant1_Value_n;
  }

  // End of Switch: '<S15>/Switch'

  // Sum: '<S30>/Add' incorporates:
  //   Sum: '<S15>/Add2'

  px4CtrlQGCGPS_B.l2_j = px4CtrlQGCGPS_B.rtb_DataTypeConversion3_idx_0 -
    px4CtrlQGCGPS_B.rtb_DataTypeConversion3_idx_1;
  px4CtrlQGCGPS_B.Abs6 = px4CtrlQGCGPS_B.l2_j;

  // RelationalOperator: '<S32>/Compare' incorporates:
  //   Abs: '<S31>/Abs'
  //   Constant: '<S32>/Constant'
  //   DataStoreRead: '<S31>/Data Store Read1'

  rtb_Compare_g2 = (fabs(px4CtrlQGCGPS_DW.e_pitch_roll) >=
                    px4CtrlQGCGPS_P.CompareToConstant1_const_h);

  // Sum: '<S31>/Add' incorporates:
  //   DataStoreRead: '<S31>/Data Store Read'
  //   DataStoreRead: '<S31>/Data Store Read3'
  //   Sum: '<S34>/Add'

  px4CtrlQGCGPS_B.z1_h = px4CtrlQGCGPS_DW.t - px4CtrlQGCGPS_DW.start_time_roll;

  // Fcn: '<S31>/Fcn' incorporates:
  //   Constant: '<S31>/T'
  //   Constant: '<S31>/ch'
  //   Sum: '<S31>/Add'

  px4CtrlQGCGPS_B.rtb_Fcn_a_f = px4CtrlQGCGPS_P.ch_Value_e /
    (px4CtrlQGCGPS_P.T_Value_c - px4CtrlQGCGPS_B.z1_h);

  // MATLAB Function: '<S31>/MATLAB Function' incorporates:
  //   Constant: '<S31>/t'
  //   DataStoreRead: '<S31>/Data Store Read'
  //   DataStoreRead: '<S31>/Data Store Read3'

  px4CtrlQGCGP_MATLABFunction(rtb_Compare_g2, px4CtrlQGCGPS_DW.t,
    px4CtrlQGCGPS_DW.start_time_roll, px4CtrlQGCGPS_B.rtb_Fcn_a_f,
    px4CtrlQGCGPS_P.t_Value_m, &px4CtrlQGCGPS_B.rtb_DataStoreRead49_c);

  // Sum: '<S31>/Add1' incorporates:
  //   Constant: '<S31>/r'

  px4CtrlQGCGPS_B.z2_l = px4CtrlQGCGPS_P.r_Value_p +
    px4CtrlQGCGPS_B.rtb_DataStoreRead49_c;

  // Gain: '<S30>/Gain4' incorporates:
  //   Constant: '<S15>/b'
  //   Product: '<S30>/Product'

  px4CtrlQGCGPS_B.Abs6 = px4CtrlQGCGPS_B.Abs6 * px4CtrlQGCGPS_B.z2_l *
    px4CtrlQGCGPS_P.b_Value_h * px4CtrlQGCGPS_P.Gain4_Gain_o;

  // SampleTimeMath: '<S29>/TSamp'
  //
  //  About '<S29>/TSamp':
  //   y = u * K where K = 1 / ( w * Ts )

  px4CtrlQGCGPS_B.Product_c = px4CtrlQGCGPS_B.Abs6 *
    px4CtrlQGCGPS_P.TSamp_WtEt_o;

  // Sum: '<S15>/Add2' incorporates:
  //   DataStoreWrite: '<S15>/Data Store Write'

  px4CtrlQGCGPS_DW.e_pitch_roll = px4CtrlQGCGPS_B.l2_j;

  // Sum: '<S15>/Add1'
  px4CtrlQGCGPS_B.Abs6 = px4CtrlQGCGPS_B.yaw - px4CtrlQGCGPS_B.Abs6;

  // Product: '<S15>/Product' incorporates:
  //   Constant: '<S15>/b'

  px4CtrlQGCGPS_B.Product_cm = px4CtrlQGCGPS_B.Abs6 * px4CtrlQGCGPS_B.z2_l *
    px4CtrlQGCGPS_P.b_Value_h;

  // Signum: '<S15>/Sign'
  px4CtrlQGCGPS_B.z2_l = px4CtrlQGCGPS_B.Abs6;

  // Gain: '<S1>/J' incorporates:
  //   DiscreteIntegrator: '<S18>/Discrete-Time Integrator3'

  px4CtrlQGCGPS_B.Abs6 = px4CtrlQGCGPS_P.J_Gain_b *
    px4CtrlQGCGPS_DW.DiscreteTimeIntegrator3_DSTAT_m;

  // Signum: '<S15>/Sign'
  if (!rtIsNaN(px4CtrlQGCGPS_B.z2_l)) {
    if (px4CtrlQGCGPS_B.z2_l < 0.0) {
      px4CtrlQGCGPS_B.z2_l = -1.0;
    } else {
      px4CtrlQGCGPS_B.z2_l = (px4CtrlQGCGPS_B.z2_l > 0.0);
    }
  }

  // Sum: '<S1>/Add1' incorporates:
  //   Constant: '<S15>/l'
  //   DataStoreWrite: '<Root>/Data Store Write13'
  //   DataStoreWrite: '<S15>/Data Store Write'
  //   Gain: '<S15>/Gain'
  //   Gain: '<S15>/J'
  //   Product: '<S15>/Product1'
  //   Sum: '<S15>/Add'
  //   Sum: '<S29>/Diff'
  //   UnitDelay: '<S29>/UD'
  //
  //  Block description for '<S29>/Diff':
  //
  //   Add in CPU
  //
  //  Block description for '<S29>/UD':
  //
  //   Store in Global RAM

  px4CtrlQGCGPS_B.z2_l = (((((px4CtrlQGCGPS_B.Product_c -
    px4CtrlQGCGPS_DW.UD_DSTATE_n) - px4CtrlQGCGPS_DW.e_pitch_roll) -
    px4CtrlQGCGPS_B.Product_cm) - px4CtrlQGCGPS_B.z2_l *
    px4CtrlQGCGPS_P.l_Value_n) - px4CtrlQGCGPS_P.Gain_Gain_m *
    px4CtrlQGCGPS_B.yaw) * px4CtrlQGCGPS_P.J_Gain - px4CtrlQGCGPS_B.Abs6;

  // Logic: '<S43>/Logical Operator' incorporates:
  //   Abs: '<S43>/Abs1'
  //   Constant: '<S44>/Constant'
  //   Constant: '<S45>/Constant'
  //   DataStoreRead: '<S43>/Data Store Read2'
  //   RelationalOperator: '<S44>/Compare'
  //   RelationalOperator: '<S45>/Compare'

  rtb_LogicalOperator = ((fabs(px4CtrlQGCGPS_DW.e_pitch_yaw) >=
    px4CtrlQGCGPS_P.CompareToConstant2_const) && (px4CtrlQGCGPS_B.fcn4 >=
    px4CtrlQGCGPS_P.CompareToConstant1_const_hq));

  // Outputs for Triggered SubSystem: '<S43>/Subsystem' incorporates:
  //   TriggerPort: '<S46>/Trigger'

  if (rtb_LogicalOperator && (px4CtrlQGCGPS_PrevZCX.Subsystem_Trig_ZCE !=
       POS_ZCSIG)) {
    // DataStoreWrite: '<S46>/Data Store Write' incorporates:
    //   DataStoreRead: '<S46>/Data Store Read2'

    px4CtrlQGCGPS_DW.start_time_yaw = px4CtrlQGCGPS_DW.t;
  }

  px4CtrlQGCGPS_PrevZCX.Subsystem_Trig_ZCE = rtb_LogicalOperator;

  // End of Outputs for SubSystem: '<S43>/Subsystem'
  // Logic: '<S25>/Logical Operator' incorporates:
  //   Abs: '<S25>/Abs1'
  //   Constant: '<S26>/Constant'
  //   Constant: '<S27>/Constant'
  //   DataStoreRead: '<S25>/Data Store Read2'
  //   RelationalOperator: '<S26>/Compare'
  //   RelationalOperator: '<S27>/Compare'

  rtb_LogicalOperator = ((fabs(px4CtrlQGCGPS_DW.e_pitch) >=
    px4CtrlQGCGPS_P.CompareToConstant2_const_o) && (px4CtrlQGCGPS_B.Product4 >=
    px4CtrlQGCGPS_P.CompareToConstant1_const_p));

  // Outputs for Triggered SubSystem: '<S25>/Subsystem' incorporates:
  //   TriggerPort: '<S28>/Trigger'

  if (rtb_LogicalOperator && (px4CtrlQGCGPS_PrevZCX.Subsystem_Trig_ZCE_e !=
       POS_ZCSIG)) {
    // DataStoreWrite: '<S28>/Data Store Write' incorporates:
    //   DataStoreRead: '<S28>/Data Store Read2'

    px4CtrlQGCGPS_DW.start_time = px4CtrlQGCGPS_DW.t;
  }

  px4CtrlQGCGPS_PrevZCX.Subsystem_Trig_ZCE_e = rtb_LogicalOperator;

  // End of Outputs for SubSystem: '<S25>/Subsystem'
  // Logic: '<S34>/Logical Operator' incorporates:
  //   Abs: '<S34>/Abs1'
  //   Constant: '<S35>/Constant'
  //   Constant: '<S36>/Constant'
  //   DataStoreRead: '<S34>/Data Store Read2'
  //   RelationalOperator: '<S35>/Compare'
  //   RelationalOperator: '<S36>/Compare'

  rtb_LogicalOperator = ((fabs(px4CtrlQGCGPS_DW.e_pitch_roll) >=
    px4CtrlQGCGPS_P.CompareToConstant2_const_a) && (px4CtrlQGCGPS_B.z1_h >=
    px4CtrlQGCGPS_P.CompareToConstant1_const_a));

  // Outputs for Triggered SubSystem: '<S34>/Subsystem' incorporates:
  //   TriggerPort: '<S37>/Trigger'

  if (rtb_LogicalOperator && (px4CtrlQGCGPS_PrevZCX.Subsystem_Trig_ZCE_j !=
       POS_ZCSIG)) {
    // DataStoreWrite: '<S37>/Data Store Write' incorporates:
    //   DataStoreRead: '<S37>/Data Store Read2'

    px4CtrlQGCGPS_DW.start_time_roll = px4CtrlQGCGPS_DW.t;
  }

  px4CtrlQGCGPS_PrevZCX.Subsystem_Trig_ZCE_j = rtb_LogicalOperator;

  // End of Outputs for SubSystem: '<S34>/Subsystem'

  // Gain: '<S19>/Gain2' incorporates:
  //   DiscreteIntegrator: '<S19>/Discrete-Time Integrator'

  px4CtrlQGCGPS_B.z1_h = px4CtrlQGCGPS_P.Gain2_Gain_c *
    px4CtrlQGCGPS_DW.DiscreteTimeIntegrator_DSTATE;

  // ZeroOrderHold: '<S19>/Zero-Order Hold3' incorporates:
  //   Gain: '<S19>/1//J'

  px4CtrlQGCGPS_B.z1_h = px4CtrlQGCGPS_P.uJ_Gain * px4CtrlQGCGPS_B.Add3;

  // Switch: '<S19>/Switch' incorporates:
  //   Constant: '<S19>/Constant3'
  //   DataStoreRead: '<S19>/Data Store Read'
  //   DataStoreRead: '<S19>/Data Store Read1'
  //   DataStoreRead: '<S19>/Data Store Read2'
  //   Gain: '<S19>/k//J'
  //   ZeroOrderHold: '<S19>/Zero-Order Hold1'

  if (px4CtrlQGCGPS_DW.observer_flag) {
    px4CtrlQGCGPS_B.rtb_DataTypeConversion3_idx_0 = px4CtrlQGCGPS_B.z1_h;
    px4CtrlQGCGPS_B.rtb_DataTypeConversion3_idx_1 = px4CtrlQGCGPS_P.kJ_Gain *
      px4CtrlQGCGPS_DW.yaw_speed;
    px4CtrlQGCGPS_B.yaw = px4CtrlQGCGPS_DW.yaw;
  } else {
    px4CtrlQGCGPS_B.rtb_DataTypeConversion3_idx_0 =
      px4CtrlQGCGPS_P.Constant3_Value_d;
    px4CtrlQGCGPS_B.rtb_DataTypeConversion3_idx_1 =
      px4CtrlQGCGPS_P.Constant3_Value_d;
    px4CtrlQGCGPS_B.yaw = px4CtrlQGCGPS_P.Constant3_Value_d;
  }

  // End of Switch: '<S19>/Switch'

  // Sum: '<S19>/Add1' incorporates:
  //   DiscreteIntegrator: '<S19>/Discrete-Time Integrator'

  px4CtrlQGCGPS_B.fcn4 = px4CtrlQGCGPS_B.yaw -
    px4CtrlQGCGPS_DW.DiscreteTimeIntegrator_DSTATE;

  // Abs: '<S19>/Abs3' incorporates:
  //   Abs: '<S19>/Abs4'
  //   Abs: '<S19>/Abs5'
  //   Abs: '<S19>/Abs6'

  px4CtrlQGCGPS_B.z1_h = fabs(px4CtrlQGCGPS_B.fcn4);

  // Abs: '<S19>/Abs5'
  px4CtrlQGCGPS_B.yaw = px4CtrlQGCGPS_B.z1_h;

  // Sum: '<S19>/Add7' incorporates:
  //   Constant: '<S19>/Constant1'
  //   Sum: '<S19>/Add13'
  //   Sum: '<S19>/Add18'

  px4CtrlQGCGPS_B.l2 = px4CtrlQGCGPS_P.Constant1_Value_f + px4CtrlQGCGPS_B.fcn4;
  px4CtrlQGCGPS_B.roll_hat_k = px4CtrlQGCGPS_B.l2;

  // Sum: '<S19>/Add6' incorporates:
  //   Constant: '<S19>/Constant1'
  //   Sum: '<S19>/Add12'
  //   Sum: '<S19>/Add17'

  px4CtrlQGCGPS_B.Product7 = px4CtrlQGCGPS_B.fcn4 -
    px4CtrlQGCGPS_P.Constant1_Value_f;

  // DiscreteIntegrator: '<S17>/Discrete-Time Integrator' incorporates:
  //   Sum: '<S19>/Add6'

  px4CtrlQGCGPS_B.rtb_roll_hat_e_g = px4CtrlQGCGPS_B.Product7;

  // Saturate: '<S19>/Saturation10'
  if (px4CtrlQGCGPS_B.roll_hat_k > px4CtrlQGCGPS_P.Saturation10_UpperSat) {
    px4CtrlQGCGPS_B.roll_hat_k = px4CtrlQGCGPS_P.Saturation10_UpperSat;
  } else if (px4CtrlQGCGPS_B.roll_hat_k < px4CtrlQGCGPS_P.Saturation10_LowerSat)
  {
    px4CtrlQGCGPS_B.roll_hat_k = px4CtrlQGCGPS_P.Saturation10_LowerSat;
  }

  // End of Saturate: '<S19>/Saturation10'

  // Saturate: '<S19>/Saturation11'
  if (px4CtrlQGCGPS_B.rtb_roll_hat_e_g > px4CtrlQGCGPS_P.Saturation11_UpperSat)
  {
    px4CtrlQGCGPS_B.rtb_roll_hat_e_g = px4CtrlQGCGPS_P.Saturation11_UpperSat;
  } else if (px4CtrlQGCGPS_B.rtb_roll_hat_e_g <
             px4CtrlQGCGPS_P.Saturation11_LowerSat) {
    px4CtrlQGCGPS_B.rtb_roll_hat_e_g = px4CtrlQGCGPS_P.Saturation11_LowerSat;
  }

  // End of Saturate: '<S19>/Saturation11'

  // DiscreteIntegrator: '<S17>/Discrete-Time Integrator' incorporates:
  //   Gain: '<S19>/Gain'
  //   Sum: '<S19>/Add8'

  px4CtrlQGCGPS_B.rtb_roll_hat_e_g = (px4CtrlQGCGPS_B.roll_hat_k -
    px4CtrlQGCGPS_B.rtb_roll_hat_e_g) * px4CtrlQGCGPS_P.Gain_Gain_ml;

  // Fcn: '<S19>/Fcn3' incorporates:
  //   Constant: '<S19>/Constant1'

  if (px4CtrlQGCGPS_P.Constant1_Value_f < 0.0) {
    px4CtrlQGCGPS_B.Product7_e = -rt_powd_snf(-px4CtrlQGCGPS_P.Constant1_Value_f,
      -0.5);
  } else {
    px4CtrlQGCGPS_B.Product7_e = rt_powd_snf(px4CtrlQGCGPS_P.Constant1_Value_f,
      -0.5);
  }

  // End of Fcn: '<S19>/Fcn3'

  // Product: '<S19>/Product3'
  px4CtrlQGCGPS_B.Add3 = px4CtrlQGCGPS_B.Product7_e *
    px4CtrlQGCGPS_B.rtb_roll_hat_e_g * px4CtrlQGCGPS_B.fcn4;

  // Saturate: '<S19>/Saturation8'
  if (px4CtrlQGCGPS_B.fcn4 > px4CtrlQGCGPS_P.Saturation8_UpperSat) {
    px4CtrlQGCGPS_B.roll_hat_k = px4CtrlQGCGPS_P.Saturation8_UpperSat;
  } else if (px4CtrlQGCGPS_B.fcn4 < px4CtrlQGCGPS_P.Saturation8_LowerSat) {
    px4CtrlQGCGPS_B.roll_hat_k = px4CtrlQGCGPS_P.Saturation8_LowerSat;
  } else {
    px4CtrlQGCGPS_B.roll_hat_k = px4CtrlQGCGPS_B.fcn4;
  }

  // End of Saturate: '<S19>/Saturation8'

  // Product: '<S19>/Product4' incorporates:
  //   Abs: '<S19>/Abs3'
  //   Constant: '<S19>/Constant2'
  //   Fcn: '<S19>/Fcn4'
  //   Sum: '<S19>/Add10'

  px4CtrlQGCGPS_B.Product4 = rt_powd_snf(px4CtrlQGCGPS_B.z1_h, 0.5) *
    px4CtrlQGCGPS_B.roll_hat_k * (px4CtrlQGCGPS_P.Constant2_Value -
    px4CtrlQGCGPS_B.rtb_roll_hat_e_g);

  // DiscreteIntegrator: '<S17>/Discrete-Time Integrator' incorporates:
  //   Sum: '<S19>/Add13'

  px4CtrlQGCGPS_B.rtb_roll_hat_e_g = px4CtrlQGCGPS_B.l2;

  // Sum: '<S19>/Add12'
  px4CtrlQGCGPS_B.roll_hat_k = px4CtrlQGCGPS_B.Product7;

  // Saturate: '<S19>/Saturation13'
  if (px4CtrlQGCGPS_B.rtb_roll_hat_e_g > px4CtrlQGCGPS_P.Saturation13_UpperSat)
  {
    px4CtrlQGCGPS_B.rtb_roll_hat_e_g = px4CtrlQGCGPS_P.Saturation13_UpperSat;
  } else if (px4CtrlQGCGPS_B.rtb_roll_hat_e_g <
             px4CtrlQGCGPS_P.Saturation13_LowerSat) {
    px4CtrlQGCGPS_B.rtb_roll_hat_e_g = px4CtrlQGCGPS_P.Saturation13_LowerSat;
  }

  // End of Saturate: '<S19>/Saturation13'

  // Saturate: '<S19>/Saturation9'
  if (px4CtrlQGCGPS_B.roll_hat_k > px4CtrlQGCGPS_P.Saturation9_UpperSat) {
    px4CtrlQGCGPS_B.roll_hat_k = px4CtrlQGCGPS_P.Saturation9_UpperSat;
  } else if (px4CtrlQGCGPS_B.roll_hat_k < px4CtrlQGCGPS_P.Saturation9_LowerSat)
  {
    px4CtrlQGCGPS_B.roll_hat_k = px4CtrlQGCGPS_P.Saturation9_LowerSat;
  }

  // End of Saturate: '<S19>/Saturation9'

  // DiscreteIntegrator: '<S17>/Discrete-Time Integrator' incorporates:
  //   Gain: '<S19>/Gain1'
  //   Sum: '<S19>/Add14'

  px4CtrlQGCGPS_B.rtb_roll_hat_e_g = (px4CtrlQGCGPS_B.rtb_roll_hat_e_g -
    px4CtrlQGCGPS_B.roll_hat_k) * px4CtrlQGCGPS_P.Gain1_Gain_a;

  // Sum: '<S19>/Add11' incorporates:
  //   Constant: '<S19>/Constant4'

  px4CtrlQGCGPS_B.e_g = px4CtrlQGCGPS_P.Constant4_Value -
    px4CtrlQGCGPS_B.rtb_roll_hat_e_g;

  // Fcn: '<S19>/Fcn6' incorporates:
  //   Constant: '<S19>/Constant1'

  if (px4CtrlQGCGPS_P.Constant1_Value_f < 0.0) {
    px4CtrlQGCGPS_B.Product7_e = -rt_powd_snf(-px4CtrlQGCGPS_P.Constant1_Value_f,
      -0.9375);
  } else {
    px4CtrlQGCGPS_B.Product7_e = rt_powd_snf(px4CtrlQGCGPS_P.Constant1_Value_f,
      -0.9375);
  }

  // End of Fcn: '<S19>/Fcn6'

  // Product: '<S19>/Product6'
  px4CtrlQGCGPS_B.Product_cm = px4CtrlQGCGPS_B.Product7_e *
    px4CtrlQGCGPS_B.rtb_roll_hat_e_g * px4CtrlQGCGPS_B.fcn4;

  // Saturate: '<S19>/Saturation12'
  if (px4CtrlQGCGPS_B.fcn4 > px4CtrlQGCGPS_P.Saturation12_UpperSat) {
    // DiscreteIntegrator: '<S17>/Discrete-Time Integrator'
    px4CtrlQGCGPS_B.rtb_roll_hat_e_g = px4CtrlQGCGPS_P.Saturation12_UpperSat;
  } else if (px4CtrlQGCGPS_B.fcn4 < px4CtrlQGCGPS_P.Saturation12_LowerSat) {
    // DiscreteIntegrator: '<S17>/Discrete-Time Integrator'
    px4CtrlQGCGPS_B.rtb_roll_hat_e_g = px4CtrlQGCGPS_P.Saturation12_LowerSat;
  } else {
    // DiscreteIntegrator: '<S17>/Discrete-Time Integrator'
    px4CtrlQGCGPS_B.rtb_roll_hat_e_g = px4CtrlQGCGPS_B.fcn4;
  }

  // End of Saturate: '<S19>/Saturation12'

  // Product: '<S19>/Product5' incorporates:
  //   Fcn: '<S19>/Fcn5'

  px4CtrlQGCGPS_B.e_g *= rt_powd_snf(px4CtrlQGCGPS_B.z1_h, 0.0625) *
    px4CtrlQGCGPS_B.rtb_roll_hat_e_g;

  // DiscreteIntegrator: '<S17>/Discrete-Time Integrator' incorporates:
  //   Sum: '<S19>/Add18'

  px4CtrlQGCGPS_B.rtb_roll_hat_e_g = px4CtrlQGCGPS_B.l2;

  // Sum: '<S19>/Add17'
  px4CtrlQGCGPS_B.roll_hat_k = px4CtrlQGCGPS_B.Product7;

  // Saturate: '<S19>/Saturation16'
  if (px4CtrlQGCGPS_B.rtb_roll_hat_e_g > px4CtrlQGCGPS_P.Saturation16_UpperSat)
  {
    px4CtrlQGCGPS_B.rtb_roll_hat_e_g = px4CtrlQGCGPS_P.Saturation16_UpperSat;
  } else if (px4CtrlQGCGPS_B.rtb_roll_hat_e_g <
             px4CtrlQGCGPS_P.Saturation16_LowerSat) {
    px4CtrlQGCGPS_B.rtb_roll_hat_e_g = px4CtrlQGCGPS_P.Saturation16_LowerSat;
  }

  // End of Saturate: '<S19>/Saturation16'

  // Saturate: '<S19>/Saturation14'
  if (px4CtrlQGCGPS_B.roll_hat_k > px4CtrlQGCGPS_P.Saturation14_UpperSat) {
    px4CtrlQGCGPS_B.roll_hat_k = px4CtrlQGCGPS_P.Saturation14_UpperSat;
  } else if (px4CtrlQGCGPS_B.roll_hat_k < px4CtrlQGCGPS_P.Saturation14_LowerSat)
  {
    px4CtrlQGCGPS_B.roll_hat_k = px4CtrlQGCGPS_P.Saturation14_LowerSat;
  }

  // End of Saturate: '<S19>/Saturation14'

  // DiscreteIntegrator: '<S17>/Discrete-Time Integrator' incorporates:
  //   Gain: '<S19>/Gain3'
  //   Sum: '<S19>/Add19'

  px4CtrlQGCGPS_B.rtb_roll_hat_e_g = (px4CtrlQGCGPS_B.rtb_roll_hat_e_g -
    px4CtrlQGCGPS_B.roll_hat_k) * px4CtrlQGCGPS_P.Gain3_Gain;

  // Sum: '<S19>/Add16' incorporates:
  //   Constant: '<S19>/Constant6'

  px4CtrlQGCGPS_B.z1_h = px4CtrlQGCGPS_P.Constant6_Value -
    px4CtrlQGCGPS_B.rtb_roll_hat_e_g;

  // Saturate: '<S19>/Saturation1'
  if (px4CtrlQGCGPS_B.fcn4 > px4CtrlQGCGPS_P.Saturation1_UpperSat) {
    px4CtrlQGCGPS_B.roll_hat_k = px4CtrlQGCGPS_P.Saturation1_UpperSat;
  } else if (px4CtrlQGCGPS_B.fcn4 < px4CtrlQGCGPS_P.Saturation1_LowerSat) {
    px4CtrlQGCGPS_B.roll_hat_k = px4CtrlQGCGPS_P.Saturation1_LowerSat;
  } else {
    px4CtrlQGCGPS_B.roll_hat_k = px4CtrlQGCGPS_B.fcn4;
  }

  // End of Saturate: '<S19>/Saturation1'

  // Gain: '<S19>/l2'
  px4CtrlQGCGPS_B.l2 = px4CtrlQGCGPS_P.l2_Gain * px4CtrlQGCGPS_B.roll_hat_k;

  // Sum: '<S19>/Add3'
  px4CtrlQGCGPS_B.roll_hat_k = px4CtrlQGCGPS_B.rtb_DataTypeConversion3_idx_0 -
    px4CtrlQGCGPS_B.rtb_DataTypeConversion3_idx_1;

  // Fcn: '<S19>/Fcn7' incorporates:
  //   Constant: '<S19>/Constant1'

  if (px4CtrlQGCGPS_P.Constant1_Value_f < 0.0) {
    px4CtrlQGCGPS_B.Product7_e = -rt_powd_snf(-px4CtrlQGCGPS_P.Constant1_Value_f,
      -0.75);
  } else {
    px4CtrlQGCGPS_B.Product7_e = rt_powd_snf(px4CtrlQGCGPS_P.Constant1_Value_f,
      -0.75);
  }

  // End of Fcn: '<S19>/Fcn7'

  // Product: '<S19>/Product7'
  px4CtrlQGCGPS_B.Product7 = px4CtrlQGCGPS_B.Product7_e *
    px4CtrlQGCGPS_B.rtb_roll_hat_e_g * px4CtrlQGCGPS_B.fcn4;

  // Saturate: '<S19>/Saturation15'
  if (px4CtrlQGCGPS_B.fcn4 > px4CtrlQGCGPS_P.Saturation15_UpperSat) {
    // DiscreteIntegrator: '<S17>/Discrete-Time Integrator'
    px4CtrlQGCGPS_B.rtb_roll_hat_e_g = px4CtrlQGCGPS_P.Saturation15_UpperSat;
  } else if (px4CtrlQGCGPS_B.fcn4 < px4CtrlQGCGPS_P.Saturation15_LowerSat) {
    // DiscreteIntegrator: '<S17>/Discrete-Time Integrator'
    px4CtrlQGCGPS_B.rtb_roll_hat_e_g = px4CtrlQGCGPS_P.Saturation15_LowerSat;
  } else {
    // DiscreteIntegrator: '<S17>/Discrete-Time Integrator'
    px4CtrlQGCGPS_B.rtb_roll_hat_e_g = px4CtrlQGCGPS_B.fcn4;
  }

  // End of Saturate: '<S19>/Saturation15'

  // Sum: '<S19>/Add2' incorporates:
  //   DiscreteIntegrator: '<S19>/Discrete-Time Integrator3'
  //   Fcn: '<S19>/Fcn8'
  //   Gain: '<S19>/Gain6'
  //   Gain: '<S19>/lambda2'
  //   Product: '<S19>/Product8'
  //   Sum: '<S19>/Add20'

  px4CtrlQGCGPS_B.l2 = (((px4CtrlQGCGPS_P.lambda2_Gain * px4CtrlQGCGPS_B.fcn4 +
    px4CtrlQGCGPS_B.l2) + px4CtrlQGCGPS_B.roll_hat_k) +
                        px4CtrlQGCGPS_DW.DiscreteTimeIntegrator3_DSTATE) +
    (rt_powd_snf(px4CtrlQGCGPS_B.yaw, 0.25) * px4CtrlQGCGPS_B.rtb_roll_hat_e_g *
     px4CtrlQGCGPS_B.z1_h + px4CtrlQGCGPS_B.Product7) *
    px4CtrlQGCGPS_P.Gain6_Gain;

  // Saturate: '<S19>/Saturation3'
  if (px4CtrlQGCGPS_B.fcn4 > px4CtrlQGCGPS_P.Saturation3_UpperSat) {
    // DiscreteIntegrator: '<S17>/Discrete-Time Integrator'
    px4CtrlQGCGPS_B.rtb_roll_hat_e_g = px4CtrlQGCGPS_P.Saturation3_UpperSat;
  } else if (px4CtrlQGCGPS_B.fcn4 < px4CtrlQGCGPS_P.Saturation3_LowerSat) {
    // DiscreteIntegrator: '<S17>/Discrete-Time Integrator'
    px4CtrlQGCGPS_B.rtb_roll_hat_e_g = px4CtrlQGCGPS_P.Saturation3_LowerSat;
  } else {
    // DiscreteIntegrator: '<S17>/Discrete-Time Integrator'
    px4CtrlQGCGPS_B.rtb_roll_hat_e_g = px4CtrlQGCGPS_B.fcn4;
  }

  // End of Saturate: '<S19>/Saturation3'

  // Gain: '<S19>/l4'
  px4CtrlQGCGPS_B.l4 = px4CtrlQGCGPS_P.l4_Gain *
    px4CtrlQGCGPS_B.rtb_roll_hat_e_g;

  // DiscreteIntegrator: '<S17>/Discrete-Time Integrator'
  px4CtrlQGCGPS_B.rtb_roll_hat_e_g =
    px4CtrlQGCGPS_DW.DiscreteTimeIntegrator_DSTATE_p;

  // Gain: '<S17>/Gain2'
  px4CtrlQGCGPS_B.roll_hat_k = px4CtrlQGCGPS_P.Gain2_Gain_g *
    px4CtrlQGCGPS_B.rtb_roll_hat_e_g;

  // ZeroOrderHold: '<S17>/Zero-Order Hold3' incorporates:
  //   DataStoreWrite: '<Root>/Data Store Write12'
  //   Gain: '<S17>/1//J'

  px4CtrlQGCGPS_B.roll_hat_k = px4CtrlQGCGPS_P.uJ_Gain_p * px4CtrlQGCGPS_B.z2_e;

  // ZeroOrderHold: '<S17>/Zero-Order Hold2' incorporates:
  //   DataStoreRead: '<S17>/Data Store Read1'
  //   Gain: '<S17>/k//J'

  px4CtrlQGCGPS_B.yaw_thrust = px4CtrlQGCGPS_P.kJ_Gain_c *
    px4CtrlQGCGPS_DW.pitch_speed;

  // ZeroOrderHold: '<S17>/Zero-Order Hold1' incorporates:
  //   DataStoreRead: '<S17>/Data Store Read'

  px4CtrlQGCGPS_B.yaw = px4CtrlQGCGPS_DW.pitch;

  // Switch: '<S17>/Switch' incorporates:
  //   Constant: '<S17>/Constant3'
  //   DataStoreRead: '<S17>/Data Store Read2'

  if (px4CtrlQGCGPS_DW.observer_flag) {
    px4CtrlQGCGPS_B.rtb_DataTypeConversion3_idx_0 = px4CtrlQGCGPS_B.roll_hat_k;
    px4CtrlQGCGPS_B.rtb_DataTypeConversion3_idx_1 = px4CtrlQGCGPS_B.yaw_thrust;
  } else {
    px4CtrlQGCGPS_B.rtb_DataTypeConversion3_idx_0 =
      px4CtrlQGCGPS_P.Constant3_Value;
    px4CtrlQGCGPS_B.rtb_DataTypeConversion3_idx_1 =
      px4CtrlQGCGPS_P.Constant3_Value;
    px4CtrlQGCGPS_B.yaw = px4CtrlQGCGPS_P.Constant3_Value;
  }

  // End of Switch: '<S17>/Switch'

  // Sum: '<S17>/Add1'
  px4CtrlQGCGPS_B.roll_hat_k = px4CtrlQGCGPS_B.yaw -
    px4CtrlQGCGPS_B.rtb_roll_hat_e_g;

  // Abs: '<S17>/Abs3' incorporates:
  //   Abs: '<S17>/Abs4'
  //   Abs: '<S17>/Abs5'
  //   Abs: '<S17>/Abs6'

  px4CtrlQGCGPS_B.lambda1_e = fabs(px4CtrlQGCGPS_B.roll_hat_k);
  px4CtrlQGCGPS_B.yaw_thrust = px4CtrlQGCGPS_B.lambda1_e;

  // Abs: '<S17>/Abs4'
  px4CtrlQGCGPS_B.yaw = px4CtrlQGCGPS_B.lambda1_e;

  // Saturate: '<S17>/Saturation'
  if (px4CtrlQGCGPS_B.roll_hat_k > px4CtrlQGCGPS_P.Saturation_UpperSat_n) {
    px4CtrlQGCGPS_B.z1_h = px4CtrlQGCGPS_P.Saturation_UpperSat_n;
  } else if (px4CtrlQGCGPS_B.roll_hat_k < px4CtrlQGCGPS_P.Saturation_LowerSat_g)
  {
    px4CtrlQGCGPS_B.z1_h = px4CtrlQGCGPS_P.Saturation_LowerSat_g;
  } else {
    px4CtrlQGCGPS_B.z1_h = px4CtrlQGCGPS_B.roll_hat_k;
  }

  // End of Saturate: '<S17>/Saturation'

  // Gain: '<S17>/l1'
  px4CtrlQGCGPS_B.Product7 = px4CtrlQGCGPS_P.l1_Gain_p * px4CtrlQGCGPS_B.z1_h;

  // Gain: '<S17>/lambda1'
  px4CtrlQGCGPS_B.lambda1_a = px4CtrlQGCGPS_P.lambda1_Gain_a *
    px4CtrlQGCGPS_B.roll_hat_k;

  // DiscreteIntegrator: '<S17>/Discrete-Time Integrator1'
  px4CtrlQGCGPS_B.z1_h = px4CtrlQGCGPS_DW.DiscreteTimeIntegrator1_DSTAT_i;

  // Sum: '<S17>/Add7' incorporates:
  //   Constant: '<S17>/Constant1'
  //   Sum: '<S17>/Add13'
  //   Sum: '<S17>/Add18'

  px4CtrlQGCGPS_B.l2_j = px4CtrlQGCGPS_P.Constant1_Value_j +
    px4CtrlQGCGPS_B.roll_hat_k;
  px4CtrlQGCGPS_B.Abs6 = px4CtrlQGCGPS_B.l2_j;

  // Sum: '<S17>/Add6' incorporates:
  //   Constant: '<S17>/Constant1'
  //   Sum: '<S17>/Add12'
  //   Sum: '<S17>/Add17'

  px4CtrlQGCGPS_B.z1_i = px4CtrlQGCGPS_B.roll_hat_k -
    px4CtrlQGCGPS_P.Constant1_Value_j;

  // Saturate: '<S17>/Saturation10'
  if (px4CtrlQGCGPS_B.Abs6 > px4CtrlQGCGPS_P.Saturation10_UpperSat_o) {
    px4CtrlQGCGPS_B.Abs6 = px4CtrlQGCGPS_P.Saturation10_UpperSat_o;
  } else if (px4CtrlQGCGPS_B.Abs6 < px4CtrlQGCGPS_P.Saturation10_LowerSat_b) {
    px4CtrlQGCGPS_B.Abs6 = px4CtrlQGCGPS_P.Saturation10_LowerSat_b;
  }

  // End of Saturate: '<S17>/Saturation10'

  // Saturate: '<S17>/Saturation11'
  if (px4CtrlQGCGPS_B.z1_i > px4CtrlQGCGPS_P.Saturation11_UpperSat_p) {
    px4CtrlQGCGPS_B.Product3_a = px4CtrlQGCGPS_P.Saturation11_UpperSat_p;
  } else if (px4CtrlQGCGPS_B.z1_i < px4CtrlQGCGPS_P.Saturation11_LowerSat_i) {
    px4CtrlQGCGPS_B.Product3_a = px4CtrlQGCGPS_P.Saturation11_LowerSat_i;
  } else {
    px4CtrlQGCGPS_B.Product3_a = px4CtrlQGCGPS_B.z1_i;
  }

  // End of Saturate: '<S17>/Saturation11'

  // Gain: '<S17>/Gain' incorporates:
  //   Sum: '<S17>/Add8'

  px4CtrlQGCGPS_B.Abs6 = (px4CtrlQGCGPS_B.Abs6 - px4CtrlQGCGPS_B.Product3_a) *
    px4CtrlQGCGPS_P.Gain_Gain_g;

  // Fcn: '<S17>/Fcn3' incorporates:
  //   Constant: '<S17>/Constant1'

  if (px4CtrlQGCGPS_P.Constant1_Value_j < 0.0) {
    px4CtrlQGCGPS_B.Product7_e = -rt_powd_snf(-px4CtrlQGCGPS_P.Constant1_Value_j,
      -0.5);
  } else {
    px4CtrlQGCGPS_B.Product7_e = rt_powd_snf(px4CtrlQGCGPS_P.Constant1_Value_j,
      -0.5);
  }

  // End of Fcn: '<S17>/Fcn3'

  // Product: '<S17>/Product3'
  px4CtrlQGCGPS_B.Product3_a = px4CtrlQGCGPS_B.Product7_e * px4CtrlQGCGPS_B.Abs6
    * px4CtrlQGCGPS_B.roll_hat_k;

  // Fcn: '<S17>/Fcn4'
  px4CtrlQGCGPS_B.Product7_e = rt_powd_snf(px4CtrlQGCGPS_B.yaw_thrust, 0.5);

  // Saturate: '<S17>/Saturation8'
  if (px4CtrlQGCGPS_B.roll_hat_k > px4CtrlQGCGPS_P.Saturation8_UpperSat_g) {
    px4CtrlQGCGPS_B.yaw_thrust = px4CtrlQGCGPS_P.Saturation8_UpperSat_g;
  } else if (px4CtrlQGCGPS_B.roll_hat_k < px4CtrlQGCGPS_P.Saturation8_LowerSat_g)
  {
    px4CtrlQGCGPS_B.yaw_thrust = px4CtrlQGCGPS_P.Saturation8_LowerSat_g;
  } else {
    px4CtrlQGCGPS_B.yaw_thrust = px4CtrlQGCGPS_B.roll_hat_k;
  }

  // End of Saturate: '<S17>/Saturation8'

  // Product: '<S17>/Product4' incorporates:
  //   Constant: '<S17>/Constant2'
  //   Fcn: '<S17>/Fcn4'
  //   Sum: '<S17>/Add10'

  px4CtrlQGCGPS_B.Product4_k = px4CtrlQGCGPS_B.Product7_e *
    px4CtrlQGCGPS_B.yaw_thrust * (px4CtrlQGCGPS_P.Constant2_Value_h -
    px4CtrlQGCGPS_B.Abs6);

  // Sum: '<S17>/Add13'
  px4CtrlQGCGPS_B.yaw_thrust = px4CtrlQGCGPS_B.l2_j;

  // Sum: '<S17>/Add12'
  px4CtrlQGCGPS_B.Abs6 = px4CtrlQGCGPS_B.z1_i;

  // Saturate: '<S17>/Saturation13'
  if (px4CtrlQGCGPS_B.yaw_thrust > px4CtrlQGCGPS_P.Saturation13_UpperSat_i) {
    px4CtrlQGCGPS_B.yaw_thrust = px4CtrlQGCGPS_P.Saturation13_UpperSat_i;
  } else if (px4CtrlQGCGPS_B.yaw_thrust <
             px4CtrlQGCGPS_P.Saturation13_LowerSat_c) {
    px4CtrlQGCGPS_B.yaw_thrust = px4CtrlQGCGPS_P.Saturation13_LowerSat_c;
  }

  // End of Saturate: '<S17>/Saturation13'

  // Saturate: '<S17>/Saturation9'
  if (px4CtrlQGCGPS_B.Abs6 > px4CtrlQGCGPS_P.Saturation9_UpperSat_i) {
    px4CtrlQGCGPS_B.Abs6 = px4CtrlQGCGPS_P.Saturation9_UpperSat_i;
  } else if (px4CtrlQGCGPS_B.Abs6 < px4CtrlQGCGPS_P.Saturation9_LowerSat_c) {
    px4CtrlQGCGPS_B.Abs6 = px4CtrlQGCGPS_P.Saturation9_LowerSat_c;
  }

  // End of Saturate: '<S17>/Saturation9'

  // Gain: '<S17>/Gain1' incorporates:
  //   Sum: '<S17>/Add14'

  px4CtrlQGCGPS_B.yaw_thrust = (px4CtrlQGCGPS_B.yaw_thrust -
    px4CtrlQGCGPS_B.Abs6) * px4CtrlQGCGPS_P.Gain1_Gain_d;

  // Sum: '<S17>/Add11' incorporates:
  //   Constant: '<S17>/Constant4'

  px4CtrlQGCGPS_B.e_gq = px4CtrlQGCGPS_P.Constant4_Value_n -
    px4CtrlQGCGPS_B.yaw_thrust;

  // Fcn: '<S17>/Fcn6' incorporates:
  //   Constant: '<S17>/Constant1'

  if (px4CtrlQGCGPS_P.Constant1_Value_j < 0.0) {
    px4CtrlQGCGPS_B.Product7_e = -rt_powd_snf(-px4CtrlQGCGPS_P.Constant1_Value_j,
      -0.9375);
  } else {
    px4CtrlQGCGPS_B.Product7_e = rt_powd_snf(px4CtrlQGCGPS_P.Constant1_Value_j,
      -0.9375);
  }

  // End of Fcn: '<S17>/Fcn6'

  // Product: '<S17>/Product6'
  px4CtrlQGCGPS_B.Abs6 = px4CtrlQGCGPS_B.Product7_e * px4CtrlQGCGPS_B.yaw_thrust
    * px4CtrlQGCGPS_B.roll_hat_k;

  // Saturate: '<S17>/Saturation12'
  if (px4CtrlQGCGPS_B.roll_hat_k > px4CtrlQGCGPS_P.Saturation12_UpperSat_c) {
    px4CtrlQGCGPS_B.yaw_thrust = px4CtrlQGCGPS_P.Saturation12_UpperSat_c;
  } else if (px4CtrlQGCGPS_B.roll_hat_k <
             px4CtrlQGCGPS_P.Saturation12_LowerSat_b) {
    px4CtrlQGCGPS_B.yaw_thrust = px4CtrlQGCGPS_P.Saturation12_LowerSat_b;
  } else {
    px4CtrlQGCGPS_B.yaw_thrust = px4CtrlQGCGPS_B.roll_hat_k;
  }

  // End of Saturate: '<S17>/Saturation12'

  // Product: '<S17>/Product5' incorporates:
  //   Fcn: '<S17>/Fcn5'

  px4CtrlQGCGPS_B.e_gq *= rt_powd_snf(px4CtrlQGCGPS_B.yaw, 0.0625) *
    px4CtrlQGCGPS_B.yaw_thrust;

  // Sum: '<S17>/Add18'
  px4CtrlQGCGPS_B.yaw_thrust = px4CtrlQGCGPS_B.l2_j;

  // Sum: '<S17>/Add17'
  px4CtrlQGCGPS_B.yaw = px4CtrlQGCGPS_B.z1_i;

  // Saturate: '<S17>/Saturation16'
  if (px4CtrlQGCGPS_B.yaw_thrust > px4CtrlQGCGPS_P.Saturation16_UpperSat_l) {
    px4CtrlQGCGPS_B.yaw_thrust = px4CtrlQGCGPS_P.Saturation16_UpperSat_l;
  } else if (px4CtrlQGCGPS_B.yaw_thrust <
             px4CtrlQGCGPS_P.Saturation16_LowerSat_g) {
    px4CtrlQGCGPS_B.yaw_thrust = px4CtrlQGCGPS_P.Saturation16_LowerSat_g;
  }

  // End of Saturate: '<S17>/Saturation16'

  // Saturate: '<S17>/Saturation14'
  if (px4CtrlQGCGPS_B.yaw > px4CtrlQGCGPS_P.Saturation14_UpperSat_l) {
    px4CtrlQGCGPS_B.yaw = px4CtrlQGCGPS_P.Saturation14_UpperSat_l;
  } else if (px4CtrlQGCGPS_B.yaw < px4CtrlQGCGPS_P.Saturation14_LowerSat_b) {
    px4CtrlQGCGPS_B.yaw = px4CtrlQGCGPS_P.Saturation14_LowerSat_b;
  }

  // End of Saturate: '<S17>/Saturation14'

  // Gain: '<S17>/Gain3' incorporates:
  //   Sum: '<S17>/Add19'

  px4CtrlQGCGPS_B.yaw_thrust = (px4CtrlQGCGPS_B.yaw_thrust - px4CtrlQGCGPS_B.yaw)
    * px4CtrlQGCGPS_P.Gain3_Gain_l;

  // Sum: '<S17>/Add16' incorporates:
  //   Constant: '<S17>/Constant6'

  px4CtrlQGCGPS_B.z1_i = px4CtrlQGCGPS_P.Constant6_Value_o -
    px4CtrlQGCGPS_B.yaw_thrust;

  // Saturate: '<S17>/Saturation1'
  if (px4CtrlQGCGPS_B.roll_hat_k > px4CtrlQGCGPS_P.Saturation1_UpperSat_a) {
    px4CtrlQGCGPS_B.yaw = px4CtrlQGCGPS_P.Saturation1_UpperSat_a;
  } else if (px4CtrlQGCGPS_B.roll_hat_k < px4CtrlQGCGPS_P.Saturation1_LowerSat_i)
  {
    px4CtrlQGCGPS_B.yaw = px4CtrlQGCGPS_P.Saturation1_LowerSat_i;
  } else {
    px4CtrlQGCGPS_B.yaw = px4CtrlQGCGPS_B.roll_hat_k;
  }

  // End of Saturate: '<S17>/Saturation1'

  // Gain: '<S17>/l2'
  px4CtrlQGCGPS_B.l2_j = px4CtrlQGCGPS_P.l2_Gain_l * px4CtrlQGCGPS_B.yaw;

  // Sum: '<S17>/Add3'
  px4CtrlQGCGPS_B.yaw = px4CtrlQGCGPS_B.rtb_DataTypeConversion3_idx_0 -
    px4CtrlQGCGPS_B.rtb_DataTypeConversion3_idx_1;

  // Fcn: '<S17>/Fcn7' incorporates:
  //   Constant: '<S17>/Constant1'

  if (px4CtrlQGCGPS_P.Constant1_Value_j < 0.0) {
    px4CtrlQGCGPS_B.Product7_e = -rt_powd_snf(-px4CtrlQGCGPS_P.Constant1_Value_j,
      -0.75);
  } else {
    px4CtrlQGCGPS_B.Product7_e = rt_powd_snf(px4CtrlQGCGPS_P.Constant1_Value_j,
      -0.75);
  }

  // End of Fcn: '<S17>/Fcn7'

  // Product: '<S17>/Product7'
  px4CtrlQGCGPS_B.Product7_e = px4CtrlQGCGPS_B.Product7_e *
    px4CtrlQGCGPS_B.yaw_thrust * px4CtrlQGCGPS_B.roll_hat_k;

  // Saturate: '<S17>/Saturation15'
  if (px4CtrlQGCGPS_B.roll_hat_k > px4CtrlQGCGPS_P.Saturation15_UpperSat_j) {
    px4CtrlQGCGPS_B.yaw_thrust = px4CtrlQGCGPS_P.Saturation15_UpperSat_j;
  } else if (px4CtrlQGCGPS_B.roll_hat_k <
             px4CtrlQGCGPS_P.Saturation15_LowerSat_k) {
    px4CtrlQGCGPS_B.yaw_thrust = px4CtrlQGCGPS_P.Saturation15_LowerSat_k;
  } else {
    px4CtrlQGCGPS_B.yaw_thrust = px4CtrlQGCGPS_B.roll_hat_k;
  }

  // End of Saturate: '<S17>/Saturation15'

  // Sum: '<S17>/Add2' incorporates:
  //   DiscreteIntegrator: '<S17>/Discrete-Time Integrator3'
  //   Fcn: '<S17>/Fcn8'
  //   Gain: '<S17>/Gain6'
  //   Gain: '<S17>/lambda2'
  //   Product: '<S17>/Product8'
  //   Sum: '<S17>/Add20'

  px4CtrlQGCGPS_B.l2_j = (((px4CtrlQGCGPS_P.lambda2_Gain_j *
    px4CtrlQGCGPS_B.roll_hat_k + px4CtrlQGCGPS_B.l2_j) + px4CtrlQGCGPS_B.yaw) +
    px4CtrlQGCGPS_DW.DiscreteTimeIntegrator3_DSTAT_a) + (rt_powd_snf
    (px4CtrlQGCGPS_B.lambda1_e, 0.25) * px4CtrlQGCGPS_B.yaw_thrust *
    px4CtrlQGCGPS_B.z1_i + px4CtrlQGCGPS_B.Product7_e) *
    px4CtrlQGCGPS_P.Gain6_Gain_e;

  // Saturate: '<S17>/Saturation3'
  if (px4CtrlQGCGPS_B.roll_hat_k > px4CtrlQGCGPS_P.Saturation3_UpperSat_m) {
    px4CtrlQGCGPS_B.yaw_thrust = px4CtrlQGCGPS_P.Saturation3_UpperSat_m;
  } else if (px4CtrlQGCGPS_B.roll_hat_k < px4CtrlQGCGPS_P.Saturation3_LowerSat_i)
  {
    px4CtrlQGCGPS_B.yaw_thrust = px4CtrlQGCGPS_P.Saturation3_LowerSat_i;
  } else {
    px4CtrlQGCGPS_B.yaw_thrust = px4CtrlQGCGPS_B.roll_hat_k;
  }

  // End of Saturate: '<S17>/Saturation3'

  // Gain: '<S17>/l4'
  px4CtrlQGCGPS_B.l4_p = px4CtrlQGCGPS_P.l4_Gain_p * px4CtrlQGCGPS_B.yaw_thrust;

  // Gain: '<S17>/lambda4'
  px4CtrlQGCGPS_B.lambda4_n = px4CtrlQGCGPS_P.lambda4_Gain_a *
    px4CtrlQGCGPS_B.roll_hat_k;

  // DiscreteIntegrator: '<S18>/Discrete-Time Integrator'
  px4CtrlQGCGPS_B.roll_hat_k = px4CtrlQGCGPS_DW.DiscreteTimeIntegrator_DSTATE_f;

  // Gain: '<S18>/Gain2'
  px4CtrlQGCGPS_B.yaw_thrust = px4CtrlQGCGPS_P.Gain2_Gain_p *
    px4CtrlQGCGPS_B.roll_hat_k;

  // ZeroOrderHold: '<S18>/Zero-Order Hold3' incorporates:
  //   DataStoreWrite: '<Root>/Data Store Write13'
  //   Gain: '<S18>/1//J'

  px4CtrlQGCGPS_B.yaw_thrust = px4CtrlQGCGPS_P.uJ_Gain_g * px4CtrlQGCGPS_B.z2_l;

  // ZeroOrderHold: '<S18>/Zero-Order Hold2' incorporates:
  //   DataStoreRead: '<S18>/Data Store Read1'
  //   Gain: '<S18>/k//J'

  px4CtrlQGCGPS_B.yaw = px4CtrlQGCGPS_P.kJ_Gain_p * px4CtrlQGCGPS_DW.roll_speed;

  // Switch: '<S18>/Switch' incorporates:
  //   Constant: '<S18>/Constant3'
  //   DataStoreRead: '<S18>/Data Store Read'
  //   DataStoreRead: '<S18>/Data Store Read2'
  //   ZeroOrderHold: '<S18>/Zero-Order Hold1'

  if (px4CtrlQGCGPS_DW.observer_flag) {
    px4CtrlQGCGPS_B.rtb_DataTypeConversion3_idx_0 = px4CtrlQGCGPS_B.yaw_thrust;
    px4CtrlQGCGPS_B.rtb_DataTypeConversion3_idx_1 = px4CtrlQGCGPS_B.yaw;
    px4CtrlQGCGPS_B.yaw = px4CtrlQGCGPS_DW.roll;
  } else {
    px4CtrlQGCGPS_B.rtb_DataTypeConversion3_idx_0 =
      px4CtrlQGCGPS_P.Constant3_Value_a;
    px4CtrlQGCGPS_B.rtb_DataTypeConversion3_idx_1 =
      px4CtrlQGCGPS_P.Constant3_Value_a;
    px4CtrlQGCGPS_B.yaw = px4CtrlQGCGPS_P.Constant3_Value_a;
  }

  // End of Switch: '<S18>/Switch'

  // Sum: '<S18>/Add1'
  px4CtrlQGCGPS_B.yaw_thrust = px4CtrlQGCGPS_B.yaw - px4CtrlQGCGPS_B.roll_hat_k;

  // Abs: '<S18>/Abs3' incorporates:
  //   Abs: '<S18>/Abs4'
  //   Abs: '<S18>/Abs5'
  //   Abs: '<S18>/Abs6'

  px4CtrlQGCGPS_B.yaw = fabs(px4CtrlQGCGPS_B.yaw_thrust);

  // Saturate: '<S18>/Saturation'
  if (px4CtrlQGCGPS_B.yaw_thrust > px4CtrlQGCGPS_P.Saturation_UpperSat_n1) {
    px4CtrlQGCGPS_B.z1_i = px4CtrlQGCGPS_P.Saturation_UpperSat_n1;
  } else if (px4CtrlQGCGPS_B.yaw_thrust < px4CtrlQGCGPS_P.Saturation_LowerSat_c)
  {
    px4CtrlQGCGPS_B.z1_i = px4CtrlQGCGPS_P.Saturation_LowerSat_c;
  } else {
    px4CtrlQGCGPS_B.z1_i = px4CtrlQGCGPS_B.yaw_thrust;
  }

  // End of Saturate: '<S18>/Saturation'

  // Gain: '<S18>/l1'
  px4CtrlQGCGPS_B.roll_hat_k = px4CtrlQGCGPS_P.l1_Gain_d * px4CtrlQGCGPS_B.z1_i;

  // Gain: '<S18>/lambda1'
  px4CtrlQGCGPS_B.lambda1_e = px4CtrlQGCGPS_P.lambda1_Gain_g *
    px4CtrlQGCGPS_B.yaw_thrust;

  // DiscreteIntegrator: '<S18>/Discrete-Time Integrator1'
  px4CtrlQGCGPS_B.z1_i = px4CtrlQGCGPS_DW.DiscreteTimeIntegrator1_DSTAT_g;

  // Sum: '<S18>/Add7' incorporates:
  //   Constant: '<S18>/Constant1'
  //   Sum: '<S18>/Add13'
  //   Sum: '<S18>/Add18'

  px4CtrlQGCGPS_B.e_l = px4CtrlQGCGPS_P.Constant1_Value_ac +
    px4CtrlQGCGPS_B.yaw_thrust;

  // DataStoreRead: '<Root>/Data Store Read49' incorporates:
  //   Sum: '<S18>/Add7'

  px4CtrlQGCGPS_B.rtb_DataStoreRead49_c = px4CtrlQGCGPS_B.e_l;

  // Sum: '<S18>/Add6' incorporates:
  //   Constant: '<S18>/Constant1'
  //   Sum: '<S18>/Add12'
  //   Sum: '<S18>/Add17'

  px4CtrlQGCGPS_B.l2_h = px4CtrlQGCGPS_B.yaw_thrust -
    px4CtrlQGCGPS_P.Constant1_Value_ac;

  // DataStoreRead: '<Root>/Data Store Read48' incorporates:
  //   Sum: '<S18>/Add6'

  px4CtrlQGCGPS_B.rtb_DataStoreRead48_m = px4CtrlQGCGPS_B.l2_h;

  // Saturate: '<S18>/Saturation10'
  if (px4CtrlQGCGPS_B.rtb_DataStoreRead49_c >
      px4CtrlQGCGPS_P.Saturation10_UpperSat_a) {
    px4CtrlQGCGPS_B.rtb_DataStoreRead49_c =
      px4CtrlQGCGPS_P.Saturation10_UpperSat_a;
  } else if (px4CtrlQGCGPS_B.rtb_DataStoreRead49_c <
             px4CtrlQGCGPS_P.Saturation10_LowerSat_l) {
    px4CtrlQGCGPS_B.rtb_DataStoreRead49_c =
      px4CtrlQGCGPS_P.Saturation10_LowerSat_l;
  }

  // End of Saturate: '<S18>/Saturation10'

  // Saturate: '<S18>/Saturation11'
  if (px4CtrlQGCGPS_B.rtb_DataStoreRead48_m >
      px4CtrlQGCGPS_P.Saturation11_UpperSat_a) {
    px4CtrlQGCGPS_B.rtb_DataStoreRead48_m =
      px4CtrlQGCGPS_P.Saturation11_UpperSat_a;
  } else if (px4CtrlQGCGPS_B.rtb_DataStoreRead48_m <
             px4CtrlQGCGPS_P.Saturation11_LowerSat_a) {
    px4CtrlQGCGPS_B.rtb_DataStoreRead48_m =
      px4CtrlQGCGPS_P.Saturation11_LowerSat_a;
  }

  // End of Saturate: '<S18>/Saturation11'

  // DataStoreRead: '<Root>/Data Store Read48' incorporates:
  //   Gain: '<S18>/Gain'
  //   Sum: '<S18>/Add8'

  px4CtrlQGCGPS_B.rtb_DataStoreRead48_m = (px4CtrlQGCGPS_B.rtb_DataStoreRead49_c
    - px4CtrlQGCGPS_B.rtb_DataStoreRead48_m) * px4CtrlQGCGPS_P.Gain_Gain_h;

  // Fcn: '<S18>/Fcn3' incorporates:
  //   Constant: '<S18>/Constant1'

  if (px4CtrlQGCGPS_P.Constant1_Value_ac < 0.0) {
    px4CtrlQGCGPS_B.Product7_e = -rt_powd_snf
      (-px4CtrlQGCGPS_P.Constant1_Value_ac, -0.5);
  } else {
    px4CtrlQGCGPS_B.Product7_e = rt_powd_snf(px4CtrlQGCGPS_P.Constant1_Value_ac,
      -0.5);
  }

  // End of Fcn: '<S18>/Fcn3'

  // Product: '<S18>/Product3'
  px4CtrlQGCGPS_B.Product3_c = px4CtrlQGCGPS_B.Product7_e *
    px4CtrlQGCGPS_B.rtb_DataStoreRead48_m * px4CtrlQGCGPS_B.yaw_thrust;

  // Saturate: '<S18>/Saturation8'
  if (px4CtrlQGCGPS_B.yaw_thrust > px4CtrlQGCGPS_P.Saturation8_UpperSat_c) {
    // DataStoreRead: '<Root>/Data Store Read49'
    px4CtrlQGCGPS_B.rtb_DataStoreRead49_c =
      px4CtrlQGCGPS_P.Saturation8_UpperSat_c;
  } else if (px4CtrlQGCGPS_B.yaw_thrust < px4CtrlQGCGPS_P.Saturation8_LowerSat_c)
  {
    // DataStoreRead: '<Root>/Data Store Read49'
    px4CtrlQGCGPS_B.rtb_DataStoreRead49_c =
      px4CtrlQGCGPS_P.Saturation8_LowerSat_c;
  } else {
    // DataStoreRead: '<Root>/Data Store Read49'
    px4CtrlQGCGPS_B.rtb_DataStoreRead49_c = px4CtrlQGCGPS_B.yaw_thrust;
  }

  // End of Saturate: '<S18>/Saturation8'

  // Product: '<S18>/Product4' incorporates:
  //   Constant: '<S18>/Constant2'
  //   Fcn: '<S18>/Fcn4'
  //   Sum: '<S18>/Add10'

  px4CtrlQGCGPS_B.Product4_g = rt_powd_snf(px4CtrlQGCGPS_B.yaw, 0.5) *
    px4CtrlQGCGPS_B.rtb_DataStoreRead49_c * (px4CtrlQGCGPS_P.Constant2_Value_k -
    px4CtrlQGCGPS_B.rtb_DataStoreRead48_m);

  // DataStoreRead: '<Root>/Data Store Read48' incorporates:
  //   Sum: '<S18>/Add13'

  px4CtrlQGCGPS_B.rtb_DataStoreRead48_m = px4CtrlQGCGPS_B.e_l;

  // DataStoreRead: '<Root>/Data Store Read49' incorporates:
  //   Sum: '<S18>/Add12'

  px4CtrlQGCGPS_B.rtb_DataStoreRead49_c = px4CtrlQGCGPS_B.l2_h;

  // Saturate: '<S18>/Saturation13'
  if (px4CtrlQGCGPS_B.rtb_DataStoreRead48_m >
      px4CtrlQGCGPS_P.Saturation13_UpperSat_p) {
    px4CtrlQGCGPS_B.rtb_DataStoreRead48_m =
      px4CtrlQGCGPS_P.Saturation13_UpperSat_p;
  } else if (px4CtrlQGCGPS_B.rtb_DataStoreRead48_m <
             px4CtrlQGCGPS_P.Saturation13_LowerSat_j) {
    px4CtrlQGCGPS_B.rtb_DataStoreRead48_m =
      px4CtrlQGCGPS_P.Saturation13_LowerSat_j;
  }

  // End of Saturate: '<S18>/Saturation13'

  // Saturate: '<S18>/Saturation9'
  if (px4CtrlQGCGPS_B.rtb_DataStoreRead49_c >
      px4CtrlQGCGPS_P.Saturation9_UpperSat_d) {
    px4CtrlQGCGPS_B.rtb_DataStoreRead49_c =
      px4CtrlQGCGPS_P.Saturation9_UpperSat_d;
  } else if (px4CtrlQGCGPS_B.rtb_DataStoreRead49_c <
             px4CtrlQGCGPS_P.Saturation9_LowerSat_c4) {
    px4CtrlQGCGPS_B.rtb_DataStoreRead49_c =
      px4CtrlQGCGPS_P.Saturation9_LowerSat_c4;
  }

  // End of Saturate: '<S18>/Saturation9'

  // DataStoreRead: '<Root>/Data Store Read48' incorporates:
  //   Gain: '<S18>/Gain1'
  //   Sum: '<S18>/Add14'

  px4CtrlQGCGPS_B.rtb_DataStoreRead48_m = (px4CtrlQGCGPS_B.rtb_DataStoreRead48_m
    - px4CtrlQGCGPS_B.rtb_DataStoreRead49_c) * px4CtrlQGCGPS_P.Gain1_Gain_e;

  // Sum: '<S18>/Add11' incorporates:
  //   Constant: '<S18>/Constant4'

  px4CtrlQGCGPS_B.e_e1 = px4CtrlQGCGPS_P.Constant4_Value_l -
    px4CtrlQGCGPS_B.rtb_DataStoreRead48_m;

  // Fcn: '<S18>/Fcn6' incorporates:
  //   Constant: '<S18>/Constant1'

  if (px4CtrlQGCGPS_P.Constant1_Value_ac < 0.0) {
    px4CtrlQGCGPS_B.Product7_e = -rt_powd_snf
      (-px4CtrlQGCGPS_P.Constant1_Value_ac, -0.9375);
  } else {
    px4CtrlQGCGPS_B.Product7_e = rt_powd_snf(px4CtrlQGCGPS_P.Constant1_Value_ac,
      -0.9375);
  }

  // End of Fcn: '<S18>/Fcn6'

  // Product: '<S18>/Product6'
  px4CtrlQGCGPS_B.Product6_a = px4CtrlQGCGPS_B.Product7_e *
    px4CtrlQGCGPS_B.rtb_DataStoreRead48_m * px4CtrlQGCGPS_B.yaw_thrust;

  // Saturate: '<S18>/Saturation12'
  if (px4CtrlQGCGPS_B.yaw_thrust > px4CtrlQGCGPS_P.Saturation12_UpperSat_d) {
    // DataStoreRead: '<Root>/Data Store Read48'
    px4CtrlQGCGPS_B.rtb_DataStoreRead48_m =
      px4CtrlQGCGPS_P.Saturation12_UpperSat_d;
  } else if (px4CtrlQGCGPS_B.yaw_thrust <
             px4CtrlQGCGPS_P.Saturation12_LowerSat_j) {
    // DataStoreRead: '<Root>/Data Store Read48'
    px4CtrlQGCGPS_B.rtb_DataStoreRead48_m =
      px4CtrlQGCGPS_P.Saturation12_LowerSat_j;
  } else {
    // DataStoreRead: '<Root>/Data Store Read48'
    px4CtrlQGCGPS_B.rtb_DataStoreRead48_m = px4CtrlQGCGPS_B.yaw_thrust;
  }

  // End of Saturate: '<S18>/Saturation12'

  // Product: '<S18>/Product5' incorporates:
  //   Fcn: '<S18>/Fcn5'

  px4CtrlQGCGPS_B.e_e1 *= rt_powd_snf(px4CtrlQGCGPS_B.yaw, 0.0625) *
    px4CtrlQGCGPS_B.rtb_DataStoreRead48_m;

  // DataStoreRead: '<Root>/Data Store Read48' incorporates:
  //   Sum: '<S18>/Add18'

  px4CtrlQGCGPS_B.rtb_DataStoreRead48_m = px4CtrlQGCGPS_B.e_l;

  // DataStoreRead: '<Root>/Data Store Read49' incorporates:
  //   Sum: '<S18>/Add17'

  px4CtrlQGCGPS_B.rtb_DataStoreRead49_c = px4CtrlQGCGPS_B.l2_h;

  // Saturate: '<S18>/Saturation16'
  if (px4CtrlQGCGPS_B.rtb_DataStoreRead48_m >
      px4CtrlQGCGPS_P.Saturation16_UpperSat_p) {
    px4CtrlQGCGPS_B.rtb_DataStoreRead48_m =
      px4CtrlQGCGPS_P.Saturation16_UpperSat_p;
  } else if (px4CtrlQGCGPS_B.rtb_DataStoreRead48_m <
             px4CtrlQGCGPS_P.Saturation16_LowerSat_i) {
    px4CtrlQGCGPS_B.rtb_DataStoreRead48_m =
      px4CtrlQGCGPS_P.Saturation16_LowerSat_i;
  }

  // End of Saturate: '<S18>/Saturation16'

  // Saturate: '<S18>/Saturation14'
  if (px4CtrlQGCGPS_B.rtb_DataStoreRead49_c >
      px4CtrlQGCGPS_P.Saturation14_UpperSat_n) {
    px4CtrlQGCGPS_B.rtb_DataStoreRead49_c =
      px4CtrlQGCGPS_P.Saturation14_UpperSat_n;
  } else if (px4CtrlQGCGPS_B.rtb_DataStoreRead49_c <
             px4CtrlQGCGPS_P.Saturation14_LowerSat_a) {
    px4CtrlQGCGPS_B.rtb_DataStoreRead49_c =
      px4CtrlQGCGPS_P.Saturation14_LowerSat_a;
  }

  // End of Saturate: '<S18>/Saturation14'

  // DataStoreRead: '<Root>/Data Store Read48' incorporates:
  //   Gain: '<S18>/Gain3'
  //   Sum: '<S18>/Add19'

  px4CtrlQGCGPS_B.rtb_DataStoreRead48_m = (px4CtrlQGCGPS_B.rtb_DataStoreRead48_m
    - px4CtrlQGCGPS_B.rtb_DataStoreRead49_c) * px4CtrlQGCGPS_P.Gain3_Gain_p;

  // Sum: '<S18>/Add16' incorporates:
  //   Constant: '<S18>/Constant6'

  px4CtrlQGCGPS_B.e_l = px4CtrlQGCGPS_P.Constant6_Value_g -
    px4CtrlQGCGPS_B.rtb_DataStoreRead48_m;

  // Saturate: '<S18>/Saturation1'
  if (px4CtrlQGCGPS_B.yaw_thrust > px4CtrlQGCGPS_P.Saturation1_UpperSat_d) {
    // DataStoreRead: '<Root>/Data Store Read49'
    px4CtrlQGCGPS_B.rtb_DataStoreRead49_c =
      px4CtrlQGCGPS_P.Saturation1_UpperSat_d;
  } else if (px4CtrlQGCGPS_B.yaw_thrust < px4CtrlQGCGPS_P.Saturation1_LowerSat_g)
  {
    // DataStoreRead: '<Root>/Data Store Read49'
    px4CtrlQGCGPS_B.rtb_DataStoreRead49_c =
      px4CtrlQGCGPS_P.Saturation1_LowerSat_g;
  } else {
    // DataStoreRead: '<Root>/Data Store Read49'
    px4CtrlQGCGPS_B.rtb_DataStoreRead49_c = px4CtrlQGCGPS_B.yaw_thrust;
  }

  // End of Saturate: '<S18>/Saturation1'

  // Gain: '<S18>/l2'
  px4CtrlQGCGPS_B.l2_h = px4CtrlQGCGPS_P.l2_Gain_i *
    px4CtrlQGCGPS_B.rtb_DataStoreRead49_c;

  // DataStoreRead: '<Root>/Data Store Read49' incorporates:
  //   Sum: '<S18>/Add3'

  px4CtrlQGCGPS_B.rtb_DataStoreRead49_c =
    px4CtrlQGCGPS_B.rtb_DataTypeConversion3_idx_0 -
    px4CtrlQGCGPS_B.rtb_DataTypeConversion3_idx_1;

  // Fcn: '<S18>/Fcn7' incorporates:
  //   Constant: '<S18>/Constant1'

  if (px4CtrlQGCGPS_P.Constant1_Value_ac < 0.0) {
    px4CtrlQGCGPS_B.Product7_e = -rt_powd_snf
      (-px4CtrlQGCGPS_P.Constant1_Value_ac, -0.75);
  } else {
    px4CtrlQGCGPS_B.Product7_e = rt_powd_snf(px4CtrlQGCGPS_P.Constant1_Value_ac,
      -0.75);
  }

  // End of Fcn: '<S18>/Fcn7'

  // Product: '<S18>/Product7'
  px4CtrlQGCGPS_B.Product7_e = px4CtrlQGCGPS_B.Product7_e *
    px4CtrlQGCGPS_B.rtb_DataStoreRead48_m * px4CtrlQGCGPS_B.yaw_thrust;

  // Saturate: '<S18>/Saturation15'
  if (px4CtrlQGCGPS_B.yaw_thrust > px4CtrlQGCGPS_P.Saturation15_UpperSat_k) {
    // DataStoreRead: '<Root>/Data Store Read48'
    px4CtrlQGCGPS_B.rtb_DataStoreRead48_m =
      px4CtrlQGCGPS_P.Saturation15_UpperSat_k;
  } else if (px4CtrlQGCGPS_B.yaw_thrust <
             px4CtrlQGCGPS_P.Saturation15_LowerSat_h) {
    // DataStoreRead: '<Root>/Data Store Read48'
    px4CtrlQGCGPS_B.rtb_DataStoreRead48_m =
      px4CtrlQGCGPS_P.Saturation15_LowerSat_h;
  } else {
    // DataStoreRead: '<Root>/Data Store Read48'
    px4CtrlQGCGPS_B.rtb_DataStoreRead48_m = px4CtrlQGCGPS_B.yaw_thrust;
  }

  // End of Saturate: '<S18>/Saturation15'

  // Sum: '<S18>/Add2' incorporates:
  //   DiscreteIntegrator: '<S18>/Discrete-Time Integrator3'
  //   Fcn: '<S18>/Fcn8'
  //   Gain: '<S18>/Gain6'
  //   Gain: '<S18>/lambda2'
  //   Product: '<S18>/Product8'
  //   Sum: '<S18>/Add20'

  px4CtrlQGCGPS_B.rtb_DataTypeConversion3_idx_0 =
    (((px4CtrlQGCGPS_P.lambda2_Gain_d * px4CtrlQGCGPS_B.yaw_thrust +
       px4CtrlQGCGPS_B.l2_h) + px4CtrlQGCGPS_B.rtb_DataStoreRead49_c) +
     px4CtrlQGCGPS_DW.DiscreteTimeIntegrator3_DSTAT_m) + (rt_powd_snf
    (px4CtrlQGCGPS_B.yaw, 0.25) * px4CtrlQGCGPS_B.rtb_DataStoreRead48_m *
    px4CtrlQGCGPS_B.e_l + px4CtrlQGCGPS_B.Product7_e) *
    px4CtrlQGCGPS_P.Gain6_Gain_f;

  // Saturate: '<S18>/Saturation3'
  if (px4CtrlQGCGPS_B.yaw_thrust > px4CtrlQGCGPS_P.Saturation3_UpperSat_i) {
    // DataStoreRead: '<Root>/Data Store Read48'
    px4CtrlQGCGPS_B.rtb_DataStoreRead48_m =
      px4CtrlQGCGPS_P.Saturation3_UpperSat_i;
  } else if (px4CtrlQGCGPS_B.yaw_thrust < px4CtrlQGCGPS_P.Saturation3_LowerSat_g)
  {
    // DataStoreRead: '<Root>/Data Store Read48'
    px4CtrlQGCGPS_B.rtb_DataStoreRead48_m =
      px4CtrlQGCGPS_P.Saturation3_LowerSat_g;
  } else {
    // DataStoreRead: '<Root>/Data Store Read48'
    px4CtrlQGCGPS_B.rtb_DataStoreRead48_m = px4CtrlQGCGPS_B.yaw_thrust;
  }

  // End of Saturate: '<S18>/Saturation3'

  // Gain: '<S18>/l4'
  px4CtrlQGCGPS_B.rtb_DataTypeConversion3_idx_1 = px4CtrlQGCGPS_P.l4_Gain_o *
    px4CtrlQGCGPS_B.rtb_DataStoreRead48_m;

  // Gain: '<S18>/lambda4'
  px4CtrlQGCGPS_B.e_l = px4CtrlQGCGPS_P.lambda4_Gain_b *
    px4CtrlQGCGPS_B.yaw_thrust;

  // MATLABSystem: '<S6>/SourceBlock'
  uORB_read_step(px4CtrlQGCGPS_DW.obj_c.orbMetadataObj,
                 &px4CtrlQGCGPS_DW.obj_c.eventStructObj,
                 &px4CtrlQGCGPS_B.b_varargout_2_m, false, 1.0);

  // MATLABSystem: '<Root>/GPS' incorporates:
  //   BusAssignment: '<Root>/Bus Assignment'
  //   DataStoreRead: '<Root>/Data Store Read59'
  //   DataStoreRead: '<Root>/Data Store Read60'
  //   DataStoreRead: '<Root>/Data Store Read61'
  //   DataStoreRead: '<Root>/Data Store Read62'
  //   Gain: '<Root>/Gain'
  //   Gain: '<Root>/Gain12'
  //   Gain: '<Root>/Gain13'
  //   Gain: '<Root>/Gain14'

  if (px4CtrlQGCGPS_DW.obj.HorizontalPositionAccuracy !=
      px4CtrlQGCGPS_P.GPS_HorizontalPositionAccuracy) {
    rtb_LogicalOperator = (px4CtrlQGCGPS_DW.obj.isInitialized == 1);
    if (rtb_LogicalOperator) {
      px4CtrlQGCGPS_DW.obj.TunablePropsChanged = true;
      px4CtrlQGCGPS_DW.obj.tunablePropertyChanged[0] = true;
    }

    px4CtrlQGCGPS_DW.obj.HorizontalPositionAccuracy =
      px4CtrlQGCGPS_P.GPS_HorizontalPositionAccuracy;
  }

  if (px4CtrlQGCGPS_DW.obj.VerticalPositionAccuracy !=
      px4CtrlQGCGPS_P.GPS_VerticalPositionAccuracy) {
    rtb_LogicalOperator = (px4CtrlQGCGPS_DW.obj.isInitialized == 1);
    if (rtb_LogicalOperator) {
      px4CtrlQGCGPS_DW.obj.TunablePropsChanged = true;
      px4CtrlQGCGPS_DW.obj.tunablePropertyChanged[1] = true;
    }

    px4CtrlQGCGPS_DW.obj.VerticalPositionAccuracy =
      px4CtrlQGCGPS_P.GPS_VerticalPositionAccuracy;
  }

  if (px4CtrlQGCGPS_DW.obj.VelocityAccuracy !=
      px4CtrlQGCGPS_P.GPS_VelocityAccuracy) {
    rtb_LogicalOperator = (px4CtrlQGCGPS_DW.obj.isInitialized == 1);
    if (rtb_LogicalOperator) {
      px4CtrlQGCGPS_DW.obj.TunablePropsChanged = true;
      px4CtrlQGCGPS_DW.obj.tunablePropertyChanged[2] = true;
    }

    px4CtrlQGCGPS_DW.obj.VelocityAccuracy = px4CtrlQGCGPS_P.GPS_VelocityAccuracy;
  }

  if (px4CtrlQGCGPS_DW.obj.DecayFactor != px4CtrlQGCGPS_P.GPS_DecayFactor) {
    rtb_LogicalOperator = (px4CtrlQGCGPS_DW.obj.isInitialized == 1);
    if (rtb_LogicalOperator) {
      px4CtrlQGCGPS_DW.obj.TunablePropsChanged = true;
      px4CtrlQGCGPS_DW.obj.tunablePropertyChanged[3] = true;
    }

    px4CtrlQGCGPS_DW.obj.DecayFactor = px4CtrlQGCGPS_P.GPS_DecayFactor;
  }

  px4CtrlQGCGPS_B.fv[0] = static_cast<real32_T>(px4CtrlQGCGPS_P.Gain_Gain_ml1 *
    px4CtrlQGCGPS_DW.pos_x);
  px4CtrlQGCGPS_B.fv[1] = static_cast<real32_T>(px4CtrlQGCGPS_P.Gain12_Gain *
    px4CtrlQGCGPS_DW.pos_y);
  px4CtrlQGCGPS_B.fv[2] = 0.0F;
  px4CtrlQGCGPS_B.fv1[0] = static_cast<real32_T>(px4CtrlQGCGPS_P.Gain13_Gain *
    px4CtrlQGCGPS_DW.speed_x);
  px4CtrlQGCGPS_B.fv1[1] = static_cast<real32_T>(px4CtrlQGCGPS_P.Gain14_Gain *
    px4CtrlQGCGPS_DW.speed_y);
  px4CtrlQGCGPS_B.fv1[2] = 0.0F;
  px4CtrlQGCGPS_SystemCore_step(&px4CtrlQGCGPS_DW.obj, px4CtrlQGCGPS_B.fv,
    px4CtrlQGCGPS_B.fv1, px4CtrlQGCGPS_B.b_varargout_1,
    px4CtrlQGCGPS_B.DataTypeConversion2, &px4CtrlQGCGPS_B.b_varargout_3,
    &px4CtrlQGCGPS_B.b_varargout_4);

  // MATLABSystem: '<S47>/SourceBlock'
  rtb_LogicalOperator = uORB_read_step(px4CtrlQGCGPS_DW.obj_ar.orbMetadataObj,
    &px4CtrlQGCGPS_DW.obj_ar.eventStructObj, &px4CtrlQGCGPS_B.BusAssignment_n,
    false, 1.0);

  // Outputs for Enabled SubSystem: '<S47>/Enabled Subsystem' incorporates:
  //   EnablePort: '<S49>/Enable'

  if (rtb_LogicalOperator) {
    // SignalConversion generated from: '<S49>/In1'
    px4CtrlQGCGPS_B.In1_i = px4CtrlQGCGPS_B.BusAssignment_n;
  }

  // End of MATLABSystem: '<S47>/SourceBlock'
  // End of Outputs for SubSystem: '<S47>/Enabled Subsystem'

  // DataStoreRead: '<Root>/Data Store Read48' incorporates:
  //   DigitalClock: '<S2>/Digital Clock'

  px4CtrlQGCGPS_B.rtb_DataStoreRead48_m = ((px4CtrlQGCGPS_M->Timing.clockTick0) *
    0.005);

  // BusAssignment: '<S2>/Bus Assignment' incorporates:
  //   SignalConversion generated from: '<S49>/In1'

  px4CtrlQGCGPS_B.BusAssignment_n = px4CtrlQGCGPS_B.In1_i;

  // Gain: '<S2>/Multiply' incorporates:
  //   RateTransition: '<S2>/Rate Transition'

  px4CtrlQGCGPS_B.Product7_e = floor(px4CtrlQGCGPS_P.SampleTime * 1.0E+6 *
    px4CtrlQGCGPS_B.rtb_DataStoreRead48_m);
  if (rtIsNaN(px4CtrlQGCGPS_B.Product7_e) || rtIsInf(px4CtrlQGCGPS_B.Product7_e))
  {
    px4CtrlQGCGPS_B.Product7_e = 0.0;
  } else {
    px4CtrlQGCGPS_B.Product7_e = fmod(px4CtrlQGCGPS_B.Product7_e,
      1.8446744073709552E+19);
  }

  // BusAssignment: '<S2>/Bus Assignment' incorporates:
  //   Gain: '<S2>/Multiply'

  px4CtrlQGCGPS_B.BusAssignment_n.time_utc_usec = px4CtrlQGCGPS_B.Product7_e <
    0.0 ? static_cast<uint64_T>(-static_cast<int64_T>(static_cast<uint64_T>
    (-px4CtrlQGCGPS_B.Product7_e))) : static_cast<uint64_T>
    (px4CtrlQGCGPS_B.Product7_e);

  // Gain: '<S2>/lat//lon in degE7' incorporates:
  //   MATLABSystem: '<Root>/GPS'

  px4CtrlQGCGPS_B.f = static_cast<real32_T>(floor(static_cast<real_T>
    (px4CtrlQGCGPS_P.latlonindegE7_Gain * px4CtrlQGCGPS_B.b_varargout_1[0])));
  if (rtIsNaNF(px4CtrlQGCGPS_B.f) || rtIsInfF(px4CtrlQGCGPS_B.f)) {
    px4CtrlQGCGPS_B.f = 0.0F;
  } else {
    px4CtrlQGCGPS_B.f = static_cast<real32_T>(fmod(static_cast<real_T>
      (px4CtrlQGCGPS_B.f), 4.294967296E+9));
  }

  // BusAssignment: '<S2>/Bus Assignment' incorporates:
  //   Gain: '<S2>/lat//lon in degE7'

  px4CtrlQGCGPS_B.BusAssignment_n.lat = px4CtrlQGCGPS_B.f < 0.0F ? -static_cast<
    int32_T>(static_cast<uint32_T>(-px4CtrlQGCGPS_B.f)) : static_cast<int32_T>(
    static_cast<uint32_T>(px4CtrlQGCGPS_B.f));

  // Gain: '<S2>/lat//lon in degE1' incorporates:
  //   MATLABSystem: '<Root>/GPS'

  px4CtrlQGCGPS_B.f = static_cast<real32_T>(floor(static_cast<real_T>
    (px4CtrlQGCGPS_P.latlonindegE1_Gain * px4CtrlQGCGPS_B.b_varargout_1[1])));
  if (rtIsNaNF(px4CtrlQGCGPS_B.f) || rtIsInfF(px4CtrlQGCGPS_B.f)) {
    px4CtrlQGCGPS_B.f = 0.0F;
  } else {
    px4CtrlQGCGPS_B.f = static_cast<real32_T>(fmod(static_cast<real_T>
      (px4CtrlQGCGPS_B.f), 4.294967296E+9));
  }

  // BusAssignment: '<S2>/Bus Assignment' incorporates:
  //   Gain: '<S2>/lat//lon in degE1'

  px4CtrlQGCGPS_B.BusAssignment_n.lon = px4CtrlQGCGPS_B.f < 0.0F ? -static_cast<
    int32_T>(static_cast<uint32_T>(-px4CtrlQGCGPS_B.f)) : static_cast<int32_T>(
    static_cast<uint32_T>(px4CtrlQGCGPS_B.f));

  // Gain: '<S2>/Altitude in mm' incorporates:
  //   MATLABSystem: '<Root>/GPS'

  px4CtrlQGCGPS_B.f = static_cast<real32_T>(floor(static_cast<real_T>
    (px4CtrlQGCGPS_P.m_to_mm * px4CtrlQGCGPS_B.b_varargout_1[2])));
  if (rtIsNaNF(px4CtrlQGCGPS_B.f) || rtIsInfF(px4CtrlQGCGPS_B.f)) {
    px4CtrlQGCGPS_B.f = 0.0F;
  } else {
    px4CtrlQGCGPS_B.f = static_cast<real32_T>(fmod(static_cast<real_T>
      (px4CtrlQGCGPS_B.f), 4.294967296E+9));
  }

  // BusAssignment: '<S2>/Bus Assignment' incorporates:
  //   Constant: '<S2>/eph'
  //   Constant: '<S2>/epv'
  //   Gain: '<S2>/Altitude in mm'
  //   Gain: '<S2>/Gain'
  //   Gain: '<S2>/Gain1'
  //   Gain: '<S2>/Gain2'
  //   Gain: '<S2>/Gain3'
  //   Gain: '<S2>/Gain4'
  //   MATLABSystem: '<Root>/GPS'

  px4CtrlQGCGPS_B.BusAssignment_n.alt = px4CtrlQGCGPS_B.f < 0.0F ? -static_cast<
    int32_T>(static_cast<uint32_T>(-px4CtrlQGCGPS_B.f)) : static_cast<int32_T>(
    static_cast<uint32_T>(px4CtrlQGCGPS_B.f));
  px4CtrlQGCGPS_B.BusAssignment_n.eph = static_cast<real32_T>
    (px4CtrlQGCGPS_P.Gain_Gain_g0 * px4CtrlQGCGPS_P.eph_Value);
  px4CtrlQGCGPS_B.BusAssignment_n.epv = static_cast<real32_T>
    (px4CtrlQGCGPS_P.Gain3_Gain_d * px4CtrlQGCGPS_P.epv_Value);
  px4CtrlQGCGPS_B.BusAssignment_n.vel_m_s = px4CtrlQGCGPS_P.ms_to_cms *
    px4CtrlQGCGPS_B.b_varargout_3;
  px4CtrlQGCGPS_B.BusAssignment_n.vel_n_m_s = px4CtrlQGCGPS_P.ms_to_cms *
    px4CtrlQGCGPS_B.DataTypeConversion2[0];
  px4CtrlQGCGPS_B.BusAssignment_n.vel_e_m_s = px4CtrlQGCGPS_P.ms_to_cms *
    px4CtrlQGCGPS_B.DataTypeConversion2[1];
  px4CtrlQGCGPS_B.BusAssignment_n.vel_d_m_s = px4CtrlQGCGPS_P.ms_to_cms *
    px4CtrlQGCGPS_B.DataTypeConversion2[2];
  px4CtrlQGCGPS_B.BusAssignment_n.cog_rad = px4CtrlQGCGPS_P.Gain4_Gain_fm *
    px4CtrlQGCGPS_B.b_varargout_4;

  // DataTypeConversion: '<S2>/Data Type Conversion3' incorporates:
  //   Constant: '<S2>/Constant3'

  px4CtrlQGCGPS_B.Product7_e = floor(px4CtrlQGCGPS_P.Constant3_Value_b);
  if (rtIsNaN(px4CtrlQGCGPS_B.Product7_e) || rtIsInf(px4CtrlQGCGPS_B.Product7_e))
  {
    px4CtrlQGCGPS_B.Product7_e = 0.0;
  } else {
    px4CtrlQGCGPS_B.Product7_e = fmod(px4CtrlQGCGPS_B.Product7_e, 256.0);
  }

  // BusAssignment: '<S2>/Bus Assignment' incorporates:
  //   Constant: '<S2>/Number of satellites visible. If unknown, set to 255'
  //   DataTypeConversion: '<S2>/Data Type Conversion3'

  px4CtrlQGCGPS_B.BusAssignment_n.fix_type = static_cast<uint8_T>
    (px4CtrlQGCGPS_B.Product7_e < 0.0 ? static_cast<int32_T>(static_cast<uint8_T>
      (-static_cast<int8_T>(static_cast<uint8_T>(-px4CtrlQGCGPS_B.Product7_e))))
     : static_cast<int32_T>(static_cast<uint8_T>(px4CtrlQGCGPS_B.Product7_e)));
  px4CtrlQGCGPS_B.BusAssignment_n.satellites_used =
    px4CtrlQGCGPS_P.NumberofsatellitesvisibleIfunkn;

  // MATLABSystem: '<S48>/SinkBlock' incorporates:
  //   BusAssignment: '<S2>/Bus Assignment'

  uORB_write_step(px4CtrlQGCGPS_DW.obj_m.orbMetadataObj,
                  &px4CtrlQGCGPS_DW.obj_m.orbAdvertiseObj,
                  &px4CtrlQGCGPS_B.BusAssignment_n);

  // MATLABSystem: '<S7>/SourceBlock'
  rtb_LogicalOperator = uORB_read_step(px4CtrlQGCGPS_DW.obj_n.orbMetadataObj,
    &px4CtrlQGCGPS_DW.obj_n.eventStructObj, &px4CtrlQGCGPS_B.b_varargout_2,
    false, 1.0);

  // Outputs for Enabled SubSystem: '<S7>/Enabled Subsystem' incorporates:
  //   EnablePort: '<S52>/Enable'

  if (rtb_LogicalOperator) {
    // SignalConversion generated from: '<S52>/In1'
    px4CtrlQGCGPS_B.In1 = px4CtrlQGCGPS_B.b_varargout_2;
  }

  // End of MATLABSystem: '<S7>/SourceBlock'
  // End of Outputs for SubSystem: '<S7>/Enabled Subsystem'

  // DataStoreRead: '<Root>/Data Store Read48' incorporates:
  //   DataTypeConversion: '<Root>/Data Type Conversion1'
  //   Product: '<S60>/Product'

  px4CtrlQGCGPS_B.rtb_DataStoreRead48_m = static_cast<real_T>
    (px4CtrlQGCGPS_B.In1.q[0]) * px4CtrlQGCGPS_B.In1.q[0];

  // DataStoreRead: '<Root>/Data Store Read49' incorporates:
  //   DataTypeConversion: '<Root>/Data Type Conversion1'
  //   Product: '<S60>/Product1'

  px4CtrlQGCGPS_B.rtb_DataStoreRead49_c = static_cast<real_T>
    (px4CtrlQGCGPS_B.In1.q[1]) * px4CtrlQGCGPS_B.In1.q[1];

  // Product: '<S60>/Product2' incorporates:
  //   DataTypeConversion: '<Root>/Data Type Conversion1'

  px4CtrlQGCGPS_B.yaw_thrust = static_cast<real_T>(px4CtrlQGCGPS_B.In1.q[2]) *
    px4CtrlQGCGPS_B.In1.q[2];

  // Product: '<S60>/Product3' incorporates:
  //   DataTypeConversion: '<Root>/Data Type Conversion1'

  px4CtrlQGCGPS_B.yaw = static_cast<real_T>(px4CtrlQGCGPS_B.In1.q[3]) *
    px4CtrlQGCGPS_B.In1.q[3];

  // DataStoreRead: '<Root>/Data Store Read48' incorporates:
  //   Sqrt: '<S59>/sqrt'
  //   Sum: '<S60>/Sum'

  px4CtrlQGCGPS_B.rtb_DataStoreRead48_m = sqrt
    (((px4CtrlQGCGPS_B.rtb_DataStoreRead48_m +
       px4CtrlQGCGPS_B.rtb_DataStoreRead49_c) + px4CtrlQGCGPS_B.yaw_thrust) +
     px4CtrlQGCGPS_B.yaw);

  // DataStoreRead: '<Root>/Data Store Read49' incorporates:
  //   DataTypeConversion: '<Root>/Data Type Conversion1'
  //   Product: '<S54>/Product'

  px4CtrlQGCGPS_B.rtb_DataStoreRead49_c = px4CtrlQGCGPS_B.In1.q[0] /
    px4CtrlQGCGPS_B.rtb_DataStoreRead48_m;

  // Product: '<S54>/Product1' incorporates:
  //   DataTypeConversion: '<Root>/Data Type Conversion1'

  px4CtrlQGCGPS_B.yaw_thrust = px4CtrlQGCGPS_B.In1.q[1] /
    px4CtrlQGCGPS_B.rtb_DataStoreRead48_m;

  // Product: '<S54>/Product2' incorporates:
  //   DataTypeConversion: '<Root>/Data Type Conversion1'

  px4CtrlQGCGPS_B.yaw = px4CtrlQGCGPS_B.In1.q[2] /
    px4CtrlQGCGPS_B.rtb_DataStoreRead48_m;

  // DataStoreRead: '<Root>/Data Store Read48' incorporates:
  //   DataTypeConversion: '<Root>/Data Type Conversion1'
  //   Product: '<S54>/Product3'

  px4CtrlQGCGPS_B.rtb_DataStoreRead48_m = px4CtrlQGCGPS_B.In1.q[3] /
    px4CtrlQGCGPS_B.rtb_DataStoreRead48_m;

  // Fcn: '<S8>/fcn3'
  px4CtrlQGCGPS_B.fcn3 = (px4CtrlQGCGPS_B.yaw_thrust *
    px4CtrlQGCGPS_B.rtb_DataStoreRead48_m -
    px4CtrlQGCGPS_B.rtb_DataStoreRead49_c * px4CtrlQGCGPS_B.yaw) * -2.0;

  // Fcn: '<S8>/fcn5' incorporates:
  //   Fcn: '<S8>/fcn2'

  px4CtrlQGCGPS_B.Product7_e = px4CtrlQGCGPS_B.rtb_DataStoreRead49_c *
    px4CtrlQGCGPS_B.rtb_DataStoreRead49_c;
  px4CtrlQGCGPS_B.l2_h = px4CtrlQGCGPS_B.yaw_thrust * px4CtrlQGCGPS_B.yaw_thrust;
  px4CtrlQGCGPS_B.roll_tmp = px4CtrlQGCGPS_B.yaw * px4CtrlQGCGPS_B.yaw;
  px4CtrlQGCGPS_B.roll_tmp_l = px4CtrlQGCGPS_B.rtb_DataStoreRead48_m *
    px4CtrlQGCGPS_B.rtb_DataStoreRead48_m;

  // DataStoreWrite: '<Root>/Data Store Write' incorporates:
  //   Fcn: '<S8>/fcn4'
  //   Fcn: '<S8>/fcn5'
  //   Trigonometry: '<S53>/Trigonometric Function3'

  px4CtrlQGCGPS_DW.roll = rt_atan2d_snf((px4CtrlQGCGPS_B.yaw *
    px4CtrlQGCGPS_B.rtb_DataStoreRead48_m +
    px4CtrlQGCGPS_B.rtb_DataStoreRead49_c * px4CtrlQGCGPS_B.yaw_thrust) * 2.0,
    ((px4CtrlQGCGPS_B.Product7_e - px4CtrlQGCGPS_B.l2_h) -
     px4CtrlQGCGPS_B.roll_tmp) + px4CtrlQGCGPS_B.roll_tmp_l);

  // If: '<S55>/If' incorporates:
  //   Constant: '<S56>/Constant'
  //   Constant: '<S57>/Constant'

  if (px4CtrlQGCGPS_B.fcn3 > 1.0) {
    px4CtrlQGCGPS_B.fcn3 = px4CtrlQGCGPS_P.Constant_Value_e;
  } else if (px4CtrlQGCGPS_B.fcn3 < -1.0) {
    px4CtrlQGCGPS_B.fcn3 = px4CtrlQGCGPS_P.Constant_Value_b1;
  }

  // End of If: '<S55>/If'

  // Trigonometry: '<S53>/trigFcn'
  if (px4CtrlQGCGPS_B.fcn3 > 1.0) {
    px4CtrlQGCGPS_B.fcn3 = 1.0;
  } else if (px4CtrlQGCGPS_B.fcn3 < -1.0) {
    px4CtrlQGCGPS_B.fcn3 = -1.0;
  }

  // DataStoreWrite: '<Root>/Data Store Write1' incorporates:
  //   Trigonometry: '<S53>/trigFcn'

  px4CtrlQGCGPS_DW.pitch = asin(px4CtrlQGCGPS_B.fcn3);

  // DataStoreWrite: '<Root>/Data Store Write10' incorporates:
  //   Fcn: '<S8>/fcn1'
  //   Fcn: '<S8>/fcn2'
  //   Trigonometry: '<S53>/Trigonometric Function1'

  px4CtrlQGCGPS_DW.yaw = rt_atan2d_snf((px4CtrlQGCGPS_B.yaw_thrust *
    px4CtrlQGCGPS_B.yaw + px4CtrlQGCGPS_B.rtb_DataStoreRead49_c *
    px4CtrlQGCGPS_B.rtb_DataStoreRead48_m) * 2.0, ((px4CtrlQGCGPS_B.Product7_e +
    px4CtrlQGCGPS_B.l2_h) - px4CtrlQGCGPS_B.roll_tmp) -
    px4CtrlQGCGPS_B.roll_tmp_l);

  // DataStoreWrite: '<Root>/Data Store Write20' incorporates:
  //   DataTypeConversion: '<Root>/Data Type Conversion3'

  px4CtrlQGCGPS_DW.yaw_speed = px4CtrlQGCGPS_B.In1.yawspeed;

  // DataStoreWrite: '<Root>/Data Store Write21' incorporates:
  //   DataTypeConversion: '<Root>/Data Type Conversion3'

  px4CtrlQGCGPS_DW.pitch_speed = px4CtrlQGCGPS_B.In1.pitchspeed;

  // DataStoreWrite: '<Root>/Data Store Write22' incorporates:
  //   DataTypeConversion: '<Root>/Data Type Conversion3'

  px4CtrlQGCGPS_DW.roll_speed = px4CtrlQGCGPS_B.In1.rollspeed;

  // MATLABSystem: '<S61>/SourceBlock'
  rtb_LogicalOperator = uORB_read_step(px4CtrlQGCGPS_DW.obj_a.orbMetadataObj,
    &px4CtrlQGCGPS_DW.obj_a.eventStructObj, &px4CtrlQGCGPS_B.b_varargout_2_c,
    false, 5000.0);

  // Outputs for Enabled SubSystem: '<S61>/Enabled Subsystem' incorporates:
  //   EnablePort: '<S62>/Enable'

  if (rtb_LogicalOperator) {
    // SignalConversion generated from: '<S62>/In1'
    px4CtrlQGCGPS_B.In1_k = px4CtrlQGCGPS_B.b_varargout_2_c;
  }

  // End of MATLABSystem: '<S61>/SourceBlock'
  // End of Outputs for SubSystem: '<S61>/Enabled Subsystem'

  // DiscreteIntegrator: '<Root>/Intgrt_dX' incorporates:
  //   DataStoreWrite: '<Root>/Data Store Write19'

  px4CtrlQGCGPS_DW.pos_x = px4CtrlQGCGPS_DW.Intgrt_dX_DSTATE;

  // DiscreteIntegrator: '<Root>/Intgrt_dY' incorporates:
  //   DataStoreWrite: '<Root>/Data Store Write23'

  px4CtrlQGCGPS_DW.pos_y = px4CtrlQGCGPS_DW.Intgrt_dY_DSTATE;

  // DiscreteIntegrator: '<Root>/Intgrt_ddY' incorporates:
  //   DataStoreWrite: '<Root>/Data Store Write24'

  px4CtrlQGCGPS_DW.speed_y = px4CtrlQGCGPS_DW.Intgrt_ddY_DSTATE;

  // DiscreteIntegrator: '<Root>/Intgrt_ddX' incorporates:
  //   DataStoreWrite: '<Root>/Data Store Write25'

  px4CtrlQGCGPS_DW.speed_x = px4CtrlQGCGPS_DW.Intgrt_ddX_DSTATE;

  // MATLAB Function: '<Root>/MATLAB Function2' incorporates:
  //   DataStoreRead: '<Root>/Data Store Read'
  //   DataStoreRead: '<Root>/Data Store Read7'
  //   MATLAB Function: '<Root>/MATLAB Function1'

  px4CtrlQGCGPS_B.roll_tmp = cos(px4CtrlQGCGPS_DW.pitch);
  px4CtrlQGCGPS_B.l2_h = 9.8 / (cos(px4CtrlQGCGPS_DW.roll) *
    px4CtrlQGCGPS_B.roll_tmp);

  // DataStoreWrite: '<S11>/Data Store Write28' incorporates:
  //   Constant: '<S11>/attitude_flag'

  px4CtrlQGCGPS_DW.attitude_flag = px4CtrlQGCGPS_P.attitude_flag_Value;

  // DataStoreWrite: '<S12>/Data Store Write28' incorporates:
  //   Constant: '<S12>/observer_flag'

  px4CtrlQGCGPS_DW.observer_flag = px4CtrlQGCGPS_P.observer_flag_Value;
  for (px4CtrlQGCGPS_B.i = 0; px4CtrlQGCGPS_B.i < 4; px4CtrlQGCGPS_B.i++) {
    // Gain: '<Root>/Gain4' incorporates:
    //   Constant: '<Root>/Constant1'
    //   Constant: '<Root>/Mixer matrix1'
    //   DataStoreRead: '<Root>/Data Store Read21'
    //   DataStoreRead: '<Root>/Data Store Read22'
    //   DataStoreRead: '<Root>/Data Store Read23'
    //   Product: '<Root>/Product2'
    //   SignalConversion generated from: '<Root>/Product2'

    px4CtrlQGCGPS_B.Product7_e = floor
      ((((px4CtrlQGCGPS_P.Mixermatrix1_Value[px4CtrlQGCGPS_B.i + 4] *
          px4CtrlQGCGPS_B.z2_e +
          px4CtrlQGCGPS_P.Mixermatrix1_Value[px4CtrlQGCGPS_B.i] *
          px4CtrlQGCGPS_P.Constant1_Value_l) +
         px4CtrlQGCGPS_P.Mixermatrix1_Value[px4CtrlQGCGPS_B.i + 8] *
         px4CtrlQGCGPS_B.z2_l) +
        px4CtrlQGCGPS_P.Mixermatrix1_Value[px4CtrlQGCGPS_B.i + 12] *
        px4CtrlQGCGPS_B.yaw_thrust_p) * px4CtrlQGCGPS_P.Gain4_Gain_fc);
    if (rtIsNaN(px4CtrlQGCGPS_B.Product7_e) || rtIsInf
        (px4CtrlQGCGPS_B.Product7_e)) {
      px4CtrlQGCGPS_B.Product7_e = 0.0;
    } else {
      px4CtrlQGCGPS_B.Product7_e = fmod(px4CtrlQGCGPS_B.Product7_e, 65536.0);
    }

    px4CtrlQGCGPS_B.Gain4[px4CtrlQGCGPS_B.i] = static_cast<uint16_T>
      (px4CtrlQGCGPS_B.Product7_e < 0.0 ? static_cast<int32_T>
       (static_cast<uint16_T>(-static_cast<int16_T>(static_cast<uint16_T>
          (-px4CtrlQGCGPS_B.Product7_e)))) : static_cast<int32_T>(static_cast<
        uint16_T>(px4CtrlQGCGPS_B.Product7_e)));

    // End of Gain: '<Root>/Gain4'
  }

  // MATLABSystem: '<Root>/PX4 PWM Output1'
  for (px4CtrlQGCGPS_B.i = 0; px4CtrlQGCGPS_B.i < 8; px4CtrlQGCGPS_B.i++) {
    px4CtrlQGCGPS_B.pwmValue[px4CtrlQGCGPS_B.i] = 0U;
  }

  // Sum: '<Root>/Add' incorporates:
  //   Constant: '<Root>/fault_1'

  px4CtrlQGCGPS_B.Product7_e = floor(static_cast<real_T>(px4CtrlQGCGPS_B.Gain4[0])
    - px4CtrlQGCGPS_P.fault_1_Value);
  if (rtIsNaN(px4CtrlQGCGPS_B.Product7_e) || rtIsInf(px4CtrlQGCGPS_B.Product7_e))
  {
    px4CtrlQGCGPS_B.Product7_e = 0.0;
  } else {
    px4CtrlQGCGPS_B.Product7_e = fmod(px4CtrlQGCGPS_B.Product7_e, 65536.0);
  }

  // MATLABSystem: '<Root>/PX4 PWM Output1' incorporates:
  //   Sum: '<Root>/Add'

  px4CtrlQGCGPS_B.pwmValue[0] = static_cast<uint16_T>(px4CtrlQGCGPS_B.Product7_e
    < 0.0 ? static_cast<int32_T>(static_cast<uint16_T>(-static_cast<int16_T>(
    static_cast<uint16_T>(-px4CtrlQGCGPS_B.Product7_e)))) : static_cast<int32_T>
    (static_cast<uint16_T>(px4CtrlQGCGPS_B.Product7_e)));

  // Sum: '<Root>/Add1' incorporates:
  //   Constant: '<Root>/fault_2'

  px4CtrlQGCGPS_B.Product7_e = floor(static_cast<real_T>(px4CtrlQGCGPS_B.Gain4[1])
    - px4CtrlQGCGPS_P.fault_2_Value);
  if (rtIsNaN(px4CtrlQGCGPS_B.Product7_e) || rtIsInf(px4CtrlQGCGPS_B.Product7_e))
  {
    px4CtrlQGCGPS_B.Product7_e = 0.0;
  } else {
    px4CtrlQGCGPS_B.Product7_e = fmod(px4CtrlQGCGPS_B.Product7_e, 65536.0);
  }

  // MATLABSystem: '<Root>/PX4 PWM Output1' incorporates:
  //   Sum: '<Root>/Add1'

  px4CtrlQGCGPS_B.pwmValue[1] = static_cast<uint16_T>(px4CtrlQGCGPS_B.Product7_e
    < 0.0 ? static_cast<int32_T>(static_cast<uint16_T>(-static_cast<int16_T>(
    static_cast<uint16_T>(-px4CtrlQGCGPS_B.Product7_e)))) : static_cast<int32_T>
    (static_cast<uint16_T>(px4CtrlQGCGPS_B.Product7_e)));

  // Sum: '<Root>/Add2' incorporates:
  //   Constant: '<Root>/fault_3'

  px4CtrlQGCGPS_B.Product7_e = floor(static_cast<real_T>(px4CtrlQGCGPS_B.Gain4[2])
    - px4CtrlQGCGPS_P.fault_3_Value);
  if (rtIsNaN(px4CtrlQGCGPS_B.Product7_e) || rtIsInf(px4CtrlQGCGPS_B.Product7_e))
  {
    px4CtrlQGCGPS_B.Product7_e = 0.0;
  } else {
    px4CtrlQGCGPS_B.Product7_e = fmod(px4CtrlQGCGPS_B.Product7_e, 65536.0);
  }

  // MATLABSystem: '<Root>/PX4 PWM Output1' incorporates:
  //   Sum: '<Root>/Add2'

  px4CtrlQGCGPS_B.pwmValue[2] = static_cast<uint16_T>(px4CtrlQGCGPS_B.Product7_e
    < 0.0 ? static_cast<int32_T>(static_cast<uint16_T>(-static_cast<int16_T>(
    static_cast<uint16_T>(-px4CtrlQGCGPS_B.Product7_e)))) : static_cast<int32_T>
    (static_cast<uint16_T>(px4CtrlQGCGPS_B.Product7_e)));

  // Sum: '<Root>/Add3' incorporates:
  //   Constant: '<Root>/fault_4'

  px4CtrlQGCGPS_B.Product7_e = floor(static_cast<real_T>(px4CtrlQGCGPS_B.Gain4[3])
    - px4CtrlQGCGPS_P.fault_4_Value);
  if (rtIsNaN(px4CtrlQGCGPS_B.Product7_e) || rtIsInf(px4CtrlQGCGPS_B.Product7_e))
  {
    px4CtrlQGCGPS_B.Product7_e = 0.0;
  } else {
    px4CtrlQGCGPS_B.Product7_e = fmod(px4CtrlQGCGPS_B.Product7_e, 65536.0);
  }

  // MATLABSystem: '<Root>/PX4 PWM Output1' incorporates:
  //   Sum: '<Root>/Add3'

  px4CtrlQGCGPS_B.pwmValue[3] = static_cast<uint16_T>(px4CtrlQGCGPS_B.Product7_e
    < 0.0 ? static_cast<int32_T>(static_cast<uint16_T>(-static_cast<int16_T>(
    static_cast<uint16_T>(-px4CtrlQGCGPS_B.Product7_e)))) : static_cast<int32_T>
    (static_cast<uint16_T>(px4CtrlQGCGPS_B.Product7_e)));

  // Switch: '<Root>/Switch3' incorporates:
  //   Constant: '<Root>/Constant10'
  //   Constant: '<Root>/Constant11'
  //   SignalConversion generated from: '<S9>/Bus Selector'

  if (px4CtrlQGCGPS_B.In1_k.values[7] > px4CtrlQGCGPS_P.Switch3_Threshold) {
    rtb_LogicalOperator = px4CtrlQGCGPS_P.Constant10_Value;
  } else {
    rtb_LogicalOperator = px4CtrlQGCGPS_P.Constant11_Value;
  }

  // End of Switch: '<Root>/Switch3'

  // MATLABSystem: '<Root>/PX4 PWM Output1' incorporates:
  //   Constant: '<Root>/Constant2'

  if (rtb_LogicalOperator) {
    if (!px4CtrlQGCGPS_DW.obj_g.isArmed) {
      px4CtrlQGCGPS_DW.obj_g.isArmed = true;
      status = pwm_arm(&px4CtrlQGCGPS_DW.obj_g.pwmDevHandler,
                       &px4CtrlQGCGPS_DW.obj_g.armAdvertiseObj);
      px4CtrlQGCGPS_DW.obj_g.errorStatus = static_cast<uint16_T>
        (px4CtrlQGCGPS_DW.obj_g.errorStatus | status);
    }

    status = pwm_setServo(&px4CtrlQGCGPS_DW.obj_g.pwmDevHandler,
                          px4CtrlQGCGPS_DW.obj_g.servoCount,
                          px4CtrlQGCGPS_DW.obj_g.channelMask,
                          &px4CtrlQGCGPS_B.pwmValue[0],
                          px4CtrlQGCGPS_DW.obj_g.isMain,
                          &px4CtrlQGCGPS_DW.obj_g.actuatorAdvertiseObj);
    px4CtrlQGCGPS_DW.obj_g.errorStatus = static_cast<uint16_T>
      (px4CtrlQGCGPS_DW.obj_g.errorStatus | status);
  } else {
    status = pwm_disarm(&px4CtrlQGCGPS_DW.obj_g.pwmDevHandler,
                        &px4CtrlQGCGPS_DW.obj_g.armAdvertiseObj);
    px4CtrlQGCGPS_DW.obj_g.errorStatus = static_cast<uint16_T>
      (px4CtrlQGCGPS_DW.obj_g.errorStatus | status);
    px4CtrlQGCGPS_DW.obj_g.isArmed = false;
    status = pwm_resetServo(&px4CtrlQGCGPS_DW.obj_g.pwmDevHandler,
      px4CtrlQGCGPS_DW.obj_g.servoCount, px4CtrlQGCGPS_DW.obj_g.channelMask,
      px4CtrlQGCGPS_DW.obj_g.isMain,
      &px4CtrlQGCGPS_DW.obj_g.actuatorAdvertiseObj);
    px4CtrlQGCGPS_DW.obj_g.errorStatus = static_cast<uint16_T>
      (px4CtrlQGCGPS_DW.obj_g.errorStatus | status);
  }

  if (px4CtrlQGCGPS_DW.obj_g.isMain) {
    status = pwm_forceFailsafe(&px4CtrlQGCGPS_DW.obj_g.pwmDevHandler,
      static_cast<int32_T>(px4CtrlQGCGPS_P.Constant2_Value_kf));
    px4CtrlQGCGPS_DW.obj_g.errorStatus = static_cast<uint16_T>
      (px4CtrlQGCGPS_DW.obj_g.errorStatus | status);
  }

  // DataStoreRead: '<Root>/Data Store Read48' incorporates:
  //   DataStoreRead: '<Root>/Data Store Read31'
  //   Gain: '<Root>/Gain8'

  px4CtrlQGCGPS_B.rtb_DataStoreRead48_m = px4CtrlQGCGPS_P.Gain8_Gain_o1 *
    px4CtrlQGCGPS_DW.pitch;

  // DataStoreRead: '<Root>/Data Store Read49' incorporates:
  //   Gain: '<Root>/Gain10'

  px4CtrlQGCGPS_B.rtb_DataStoreRead49_c = px4CtrlQGCGPS_P.Gain10_Gain *
    px4CtrlQGCGPS_B.pitch;

  // Gain: '<Root>/Gain7' incorporates:
  //   DataStoreRead: '<Root>/Data Store Read30'

  px4CtrlQGCGPS_B.yaw_thrust = px4CtrlQGCGPS_P.Gain7_Gain_a *
    px4CtrlQGCGPS_DW.roll;

  // Gain: '<Root>/Gain11'
  px4CtrlQGCGPS_B.pitch *= px4CtrlQGCGPS_P.Gain11_Gain;

  // Gain: '<Root>/Gain9' incorporates:
  //   DataStoreRead: '<Root>/Data Store Read33'

  px4CtrlQGCGPS_B.yaw = px4CtrlQGCGPS_P.Gain9_Gain * px4CtrlQGCGPS_DW.yaw;

  // Switch: '<Root>/Switch1' incorporates:
  //   Constant: '<Root>/Constant5'
  //   Constant: '<S13>/position_flag'
  //   DataStoreRead: '<Root>/Data Store Read'
  //   DataStoreRead: '<Root>/Data Store Read7'
  //   MATLAB Function: '<Root>/MATLAB Function1'

  if (px4CtrlQGCGPS_P.position_flag_Value) {
    // MATLAB Function: '<Root>/MATLAB Function1' incorporates:
    //   DataStoreRead: '<Root>/Data Store Read'

    px4CtrlQGCGPS_B.yaw = sin(px4CtrlQGCGPS_DW.pitch);
    px4CtrlQGCGPS_B.pitch = (px4CtrlQGCGPS_B.roll_tmp * sin
      (px4CtrlQGCGPS_DW.roll) + px4CtrlQGCGPS_B.yaw * 0.0) *
      -px4CtrlQGCGPS_B.l2_h;
    px4CtrlQGCGPS_B.yaw = (cos(px4CtrlQGCGPS_DW.pitch) * sin
      (px4CtrlQGCGPS_DW.roll) * 0.0 - px4CtrlQGCGPS_B.yaw) *
      -px4CtrlQGCGPS_B.l2_h;
  } else {
    px4CtrlQGCGPS_B.pitch = px4CtrlQGCGPS_P.Constant5_Value;
    px4CtrlQGCGPS_B.yaw = px4CtrlQGCGPS_P.Constant5_Value;
  }

  // End of Switch: '<Root>/Switch1'

  // DataStoreRead: '<Root>/Data Store Read48' incorporates:
  //   DataStoreRead: '<Root>/Data Store Read28'

  px4CtrlQGCGPS_B.rtb_DataStoreRead48_m = px4CtrlQGCGPS_B.z2_e;

  // DataStoreRead: '<Root>/Data Store Read49' incorporates:
  //   DataStoreRead: '<Root>/Data Store Read29'

  px4CtrlQGCGPS_B.rtb_DataStoreRead49_c = px4CtrlQGCGPS_B.z2_l;

  // DataStoreRead: '<Root>/Data Store Read32'
  px4CtrlQGCGPS_B.yaw_thrust = px4CtrlQGCGPS_B.yaw_thrust_p;

  // DataStoreRead: '<Root>/Data Store Read48'
  px4CtrlQGCGPS_B.rtb_DataStoreRead48_m = px4CtrlQGCGPS_DW.pos_x;

  // DataStoreRead: '<Root>/Data Store Read49'
  px4CtrlQGCGPS_B.rtb_DataStoreRead49_c = px4CtrlQGCGPS_DW.pos_y;

  // Outputs for Enabled SubSystem: '<Root>/Subsystem1' incorporates:
  //   EnablePort: '<S10>/Enable'

  // DataStoreRead: '<Root>/Data Store Read54'
  if (px4CtrlQGCGPS_DW.attitude_flag) {
    // DiscreteIntegrator: '<S10>/Discrete-Time Integrator' incorporates:
    //   DataStoreWrite: '<S10>/Data Store Write27'

    px4CtrlQGCGPS_DW.t = px4CtrlQGCGPS_DW.DiscreteTimeIntegrator_DSTAT_fj;

    // Update for DiscreteIntegrator: '<S10>/Discrete-Time Integrator' incorporates:
    //   Constant: '<S10>/Constant9'

    px4CtrlQGCGPS_DW.DiscreteTimeIntegrator_DSTAT_fj +=
      px4CtrlQGCGPS_P.DiscreteTimeIntegrator_gainval *
      px4CtrlQGCGPS_P.Constant9_Value;
  }

  // End of DataStoreRead: '<Root>/Data Store Read54'
  // End of Outputs for SubSystem: '<Root>/Subsystem1'

  // Update for UnitDelay: '<S38>/UD'
  //
  //  Block description for '<S38>/UD':
  //
  //   Store in Global RAM

  px4CtrlQGCGPS_DW.UD_DSTATE = px4CtrlQGCGPS_B.TSamp;

  // Update for DiscreteIntegrator: '<S19>/Discrete-Time Integrator3' incorporates:
  //   Gain: '<S19>/Gain7'
  //   Gain: '<S19>/lambda4'
  //   Sum: '<S19>/Add15'
  //   Sum: '<S19>/Add5'

  px4CtrlQGCGPS_DW.DiscreteTimeIntegrator3_DSTATE +=
    ((px4CtrlQGCGPS_P.lambda4_Gain * px4CtrlQGCGPS_B.fcn4 + px4CtrlQGCGPS_B.l4)
     + (px4CtrlQGCGPS_B.Product_cm + px4CtrlQGCGPS_B.e_g) *
     px4CtrlQGCGPS_P.Gain7_Gain) *
    px4CtrlQGCGPS_P.DiscreteTimeIntegrator3_gainval;

  // Update for Sin: '<Root>/Sine Wave'
  px4CtrlQGCGPS_B.TSamp = px4CtrlQGCGPS_DW.lastSin;
  px4CtrlQGCGPS_DW.lastSin = px4CtrlQGCGPS_DW.lastSin *
    px4CtrlQGCGPS_P.SineWave_HCos + px4CtrlQGCGPS_DW.lastCos *
    px4CtrlQGCGPS_P.SineWave_Hsin;
  px4CtrlQGCGPS_DW.lastCos = px4CtrlQGCGPS_DW.lastCos *
    px4CtrlQGCGPS_P.SineWave_HCos - px4CtrlQGCGPS_B.TSamp *
    px4CtrlQGCGPS_P.SineWave_Hsin;

  // Update for UnitDelay: '<S20>/UD'
  //
  //  Block description for '<S20>/UD':
  //
  //   Store in Global RAM

  px4CtrlQGCGPS_DW.UD_DSTATE_b = px4CtrlQGCGPS_B.z2;

  // Update for DiscreteIntegrator: '<S17>/Discrete-Time Integrator3' incorporates:
  //   Gain: '<S17>/Gain7'
  //   Sum: '<S17>/Add15'
  //   Sum: '<S17>/Add5'

  px4CtrlQGCGPS_DW.DiscreteTimeIntegrator3_DSTAT_a += ((px4CtrlQGCGPS_B.Abs6 +
    px4CtrlQGCGPS_B.e_gq) * px4CtrlQGCGPS_P.Gain7_Gain_d + (px4CtrlQGCGPS_B.l4_p
    + px4CtrlQGCGPS_B.lambda4_n)) *
    px4CtrlQGCGPS_P.DiscreteTimeIntegrator3_gainv_m;

  // Update for UnitDelay: '<S29>/UD'
  //
  //  Block description for '<S29>/UD':
  //
  //   Store in Global RAM

  px4CtrlQGCGPS_DW.UD_DSTATE_n = px4CtrlQGCGPS_B.Product_c;

  // Update for DiscreteIntegrator: '<S18>/Discrete-Time Integrator3' incorporates:
  //   Gain: '<S18>/Gain7'
  //   Sum: '<S18>/Add15'
  //   Sum: '<S18>/Add5'

  px4CtrlQGCGPS_DW.DiscreteTimeIntegrator3_DSTAT_m +=
    ((px4CtrlQGCGPS_B.Product6_a + px4CtrlQGCGPS_B.e_e1) *
     px4CtrlQGCGPS_P.Gain7_Gain_l +
     (px4CtrlQGCGPS_B.rtb_DataTypeConversion3_idx_1 + px4CtrlQGCGPS_B.e_l)) *
    px4CtrlQGCGPS_P.DiscreteTimeIntegrator3_gainv_e;

  // Saturate: '<S19>/Saturation'
  if (px4CtrlQGCGPS_B.fcn4 > px4CtrlQGCGPS_P.Saturation_UpperSat_b) {
    px4CtrlQGCGPS_B.TSamp = px4CtrlQGCGPS_P.Saturation_UpperSat_b;
  } else if (px4CtrlQGCGPS_B.fcn4 < px4CtrlQGCGPS_P.Saturation_LowerSat_k) {
    px4CtrlQGCGPS_B.TSamp = px4CtrlQGCGPS_P.Saturation_LowerSat_k;
  } else {
    px4CtrlQGCGPS_B.TSamp = px4CtrlQGCGPS_B.fcn4;
  }

  // End of Saturate: '<S19>/Saturation'

  // Update for DiscreteIntegrator: '<S19>/Discrete-Time Integrator' incorporates:
  //   DiscreteIntegrator: '<S19>/Discrete-Time Integrator1'
  //   Gain: '<S19>/Gain5'
  //   Gain: '<S19>/l1'
  //   Gain: '<S19>/lambda1'
  //   Sum: '<S19>/Add'
  //   Sum: '<S19>/Add9'

  px4CtrlQGCGPS_DW.DiscreteTimeIntegrator_DSTATE += (((px4CtrlQGCGPS_P.l1_Gain *
    px4CtrlQGCGPS_B.TSamp + px4CtrlQGCGPS_P.lambda1_Gain * px4CtrlQGCGPS_B.fcn4)
    + px4CtrlQGCGPS_DW.DiscreteTimeIntegrator1_DSTATE) + (px4CtrlQGCGPS_B.Add3 +
    px4CtrlQGCGPS_B.Product4) * px4CtrlQGCGPS_P.Gain5_Gain) *
    px4CtrlQGCGPS_P.DiscreteTimeIntegrator_gainva_n;

  // Update for DiscreteIntegrator: '<S19>/Discrete-Time Integrator1'
  px4CtrlQGCGPS_DW.DiscreteTimeIntegrator1_DSTATE +=
    px4CtrlQGCGPS_P.DiscreteTimeIntegrator1_gainval * px4CtrlQGCGPS_B.l2;

  // Update for DiscreteIntegrator: '<S17>/Discrete-Time Integrator' incorporates:
  //   Gain: '<S17>/Gain5'
  //   Sum: '<S17>/Add'
  //   Sum: '<S17>/Add9'

  px4CtrlQGCGPS_DW.DiscreteTimeIntegrator_DSTATE_p +=
    (((px4CtrlQGCGPS_B.Product7 + px4CtrlQGCGPS_B.lambda1_a) +
      px4CtrlQGCGPS_B.z1_h) + (px4CtrlQGCGPS_B.Product3_a +
      px4CtrlQGCGPS_B.Product4_k) * px4CtrlQGCGPS_P.Gain5_Gain_o) *
    px4CtrlQGCGPS_P.DiscreteTimeIntegrator_gainva_e;

  // Update for DiscreteIntegrator: '<S17>/Discrete-Time Integrator1'
  px4CtrlQGCGPS_DW.DiscreteTimeIntegrator1_DSTAT_i +=
    px4CtrlQGCGPS_P.DiscreteTimeIntegrator1_gainv_n * px4CtrlQGCGPS_B.l2_j;

  // Update for DiscreteIntegrator: '<S18>/Discrete-Time Integrator' incorporates:
  //   Gain: '<S18>/Gain5'
  //   Sum: '<S18>/Add'
  //   Sum: '<S18>/Add9'

  px4CtrlQGCGPS_DW.DiscreteTimeIntegrator_DSTATE_f +=
    (((px4CtrlQGCGPS_B.roll_hat_k + px4CtrlQGCGPS_B.lambda1_e) +
      px4CtrlQGCGPS_B.z1_i) + (px4CtrlQGCGPS_B.Product3_c +
      px4CtrlQGCGPS_B.Product4_g) * px4CtrlQGCGPS_P.Gain5_Gain_l) *
    px4CtrlQGCGPS_P.DiscreteTimeIntegrator_gainv_nv;

  // Update for DiscreteIntegrator: '<S18>/Discrete-Time Integrator1'
  px4CtrlQGCGPS_DW.DiscreteTimeIntegrator1_DSTAT_g +=
    px4CtrlQGCGPS_P.DiscreteTimeIntegrator1_gainv_g *
    px4CtrlQGCGPS_B.rtb_DataTypeConversion3_idx_0;

  // Update for DiscreteIntegrator: '<Root>/Intgrt_dX' incorporates:
  //   DataStoreWrite: '<Root>/Data Store Write25'

  px4CtrlQGCGPS_DW.Intgrt_dX_DSTATE += px4CtrlQGCGPS_P.Intgrt_dX_gainval *
    px4CtrlQGCGPS_DW.speed_x;

  // Update for DiscreteIntegrator: '<Root>/Intgrt_dY' incorporates:
  //   DataStoreWrite: '<Root>/Data Store Write24'

  px4CtrlQGCGPS_DW.Intgrt_dY_DSTATE += px4CtrlQGCGPS_P.Intgrt_dY_gainval *
    px4CtrlQGCGPS_DW.speed_y;

  // Update for DiscreteIntegrator: '<Root>/Intgrt_ddY' incorporates:
  //   Gain: '<Root>/slower4'

  px4CtrlQGCGPS_DW.Intgrt_ddY_DSTATE += px4CtrlQGCGPS_P.slower4_Gain *
    px4CtrlQGCGPS_B.yaw * px4CtrlQGCGPS_P.Intgrt_ddY_gainval;

  // Update for DiscreteIntegrator: '<Root>/Intgrt_ddX' incorporates:
  //   Gain: '<Root>/slower3'

  px4CtrlQGCGPS_DW.Intgrt_ddX_DSTATE += px4CtrlQGCGPS_P.slower3_Gain *
    px4CtrlQGCGPS_B.pitch * px4CtrlQGCGPS_P.Intgrt_ddX_gainval;

  // Update for DiscreteIntegrator: '<Root>/Intgrt_dZ' incorporates:
  //   DiscreteIntegrator: '<Root>/Intgrt_ddZ'

  px4CtrlQGCGPS_DW.Intgrt_dZ_DSTATE += px4CtrlQGCGPS_P.Intgrt_dZ_gainval *
    px4CtrlQGCGPS_DW.Intgrt_ddZ_DSTATE;

  // Update for DiscreteIntegrator: '<Root>/Intgrt_ddZ' incorporates:
  //   Gain: '<Root>/slower5'

  px4CtrlQGCGPS_DW.Intgrt_ddZ_DSTATE += px4CtrlQGCGPS_P.slower5_Gain * 0.0 *
    px4CtrlQGCGPS_P.Intgrt_ddZ_gainval;

  // Update absolute time
  // The "clockTick0" counts the number of times the code of this task has
  //  been executed. The resolution of this integer timer is 0.005, which is the step size
  //  of the task. Size of "clockTick0" ensures timer will not overflow during the
  //  application lifespan selected.

  px4CtrlQGCGPS_M->Timing.clockTick0++;
}

// Model step function for TID1
void px4CtrlQGCGPS_step1(void)         // Sample time: [0.01s, 0.0s]
{
  uint64_T rtb_timestamp;
  uint32_T rtb_noutputs;
  uint8_T rtb__padding0[4];
  boolean_T b_varargout_1;
  boolean_T rtb_NOT_o;

  // MATLABSystem: '<S5>/SourceBlock'
  b_varargout_1 = uORB_read_step(px4CtrlQGCGPS_DW.obj_l.orbMetadataObj,
    &px4CtrlQGCGPS_DW.obj_l.eventStructObj, &px4CtrlQGCGPS_B.b_varargout_2_k,
    false, 1.0);

  // Outputs for Enabled SubSystem: '<S5>/Enabled Subsystem' incorporates:
  //   EnablePort: '<S50>/Enable'

  if (b_varargout_1) {
    // SignalConversion generated from: '<S50>/In1'
    px4CtrlQGCGPS_B.In1_a = px4CtrlQGCGPS_B.b_varargout_2_k;
  }

  // End of Outputs for SubSystem: '<S5>/Enabled Subsystem'

  // SignalConversion generated from: '<Root>/Bus Selector'
  rtb_timestamp = px4CtrlQGCGPS_B.In1_a.timestamp;

  // SignalConversion generated from: '<Root>/Bus Selector'
  rtb_noutputs = px4CtrlQGCGPS_B.In1_a.noutputs;

  // SignalConversion generated from: '<Root>/Bus Selector'
  rtb__padding0[0] = px4CtrlQGCGPS_B.In1_a._padding0[0];
  rtb__padding0[1] = px4CtrlQGCGPS_B.In1_a._padding0[1];
  rtb__padding0[2] = px4CtrlQGCGPS_B.In1_a._padding0[2];
  rtb__padding0[3] = px4CtrlQGCGPS_B.In1_a._padding0[3];

  // Logic: '<S5>/NOT' incorporates:
  //   MATLABSystem: '<S5>/SourceBlock'

  rtb_NOT_o = !b_varargout_1;
}

// Use this function only if you need to maintain compatibility with an existing static main program.
void px4CtrlQGCGPS_step(int_T tid)
{
  switch (tid) {
   case 0 :
    px4CtrlQGCGPS_step0();
    break;

   case 1 :
    px4CtrlQGCGPS_step1();
    break;

   default :
    // do nothing
    break;
  }
}

// Model initialize function
void px4CtrlQGCGPS_initialize(void)
{
  // Registration code

  // initialize non-finites
  rt_InitInfAndNaN(sizeof(real_T));

  // non-finite (run-time) assignments
  px4CtrlQGCGPS_P.Saturation1_UpperSat_k = rtInf;

  // block I/O
  (void) memset((static_cast<void *>(&px4CtrlQGCGPS_B)), 0,
                sizeof(B_px4CtrlQGCGPS_T));

  // states (dwork)
  (void) memset(static_cast<void *>(&px4CtrlQGCGPS_DW), 0,
                sizeof(DW_px4CtrlQGCGPS_T));

  {
    boolean_T flag;
    boolean_T rtb_DataStoreRead6;

    // Start for DataStoreMemory: '<S40>/Data Store Memory'
    px4CtrlQGCGPS_DW.start_time_yaw =
      px4CtrlQGCGPS_P.DataStoreMemory_InitialValue;

    // Start for DataStoreMemory: '<S22>/Data Store Memory'
    px4CtrlQGCGPS_DW.start_time = px4CtrlQGCGPS_P.DataStoreMemory_InitialValue_l;

    // Start for DataStoreMemory: '<S31>/Data Store Memory'
    px4CtrlQGCGPS_DW.start_time_roll =
      px4CtrlQGCGPS_P.DataStoreMemory_InitialValue_b;

    // Start for DataStoreMemory: '<S1>/e_pitch'
    px4CtrlQGCGPS_DW.e_pitch = px4CtrlQGCGPS_P.e_pitch_InitialValue;

    // Start for DataStoreMemory: '<S1>/e_pitch1'
    px4CtrlQGCGPS_DW.e_pitch_roll = px4CtrlQGCGPS_P.e_pitch1_InitialValue;

    // Start for Sum: '<S39>/Add' incorporates:
    //   DataStoreMemory: '<S1>/e_pitch2'

    px4CtrlQGCGPS_DW.e_pitch_yaw = px4CtrlQGCGPS_P.e_pitch2_InitialValue;

    // Start for DataStoreMemory: '<Root>/Data Store Memory'
    px4CtrlQGCGPS_DW.attitude_flag =
      px4CtrlQGCGPS_P.DataStoreMemory_InitialValue_j;

    // Start for DataStoreMemory: '<Root>/Data Store Memory10'
    px4CtrlQGCGPS_DW.speed_y = px4CtrlQGCGPS_P.DataStoreMemory10_InitialValue;

    // Start for DataStoreMemory: '<Root>/Data Store Memory11'
    px4CtrlQGCGPS_DW.pos_x = px4CtrlQGCGPS_P.DataStoreMemory11_InitialValue;

    // Start for DataStoreMemory: '<Root>/Data Store Memory12'
    px4CtrlQGCGPS_DW.pos_y = px4CtrlQGCGPS_P.DataStoreMemory12_InitialValue;

    // Start for DataStoreMemory: '<Root>/Data Store Memory16'
    px4CtrlQGCGPS_DW.yaw_speed = px4CtrlQGCGPS_P.DataStoreMemory16_InitialValue;

    // Start for DataStoreMemory: '<Root>/Data Store Memory17'
    px4CtrlQGCGPS_DW.roll_speed = px4CtrlQGCGPS_P.DataStoreMemory17_InitialValue;

    // Start for DataStoreMemory: '<Root>/Data Store Memory18'
    px4CtrlQGCGPS_DW.pitch_speed =
      px4CtrlQGCGPS_P.DataStoreMemory18_InitialValue;

    // Start for DataStoreMemory: '<Root>/Data Store Memory29'
    px4CtrlQGCGPS_DW.t = px4CtrlQGCGPS_P.DataStoreMemory29_InitialValue;

    // Start for DataStoreMemory: '<Root>/Data Store Memory30'
    px4CtrlQGCGPS_DW.observer_flag =
      px4CtrlQGCGPS_P.DataStoreMemory30_InitialValue;

    // Start for DataStoreMemory: '<Root>/Data Store Memory4'
    px4CtrlQGCGPS_DW.pitch = px4CtrlQGCGPS_P.DataStoreMemory4_InitialValue;

    // Start for DataStoreMemory: '<Root>/Data Store Memory6'
    px4CtrlQGCGPS_DW.roll = px4CtrlQGCGPS_P.DataStoreMemory6_InitialValue;

    // Start for DataStoreMemory: '<Root>/Data Store Memory8'
    px4CtrlQGCGPS_DW.yaw = px4CtrlQGCGPS_P.DataStoreMemory8_InitialValue;

    // Start for DataStoreMemory: '<Root>/Data Store Memory9'
    px4CtrlQGCGPS_DW.speed_x = px4CtrlQGCGPS_P.DataStoreMemory9_InitialValue;
    px4CtrlQGCGPS_PrevZCX.Subsystem_Trig_ZCE_e = POS_ZCSIG;
    px4CtrlQGCGPS_PrevZCX.Subsystem_Trig_ZCE_j = POS_ZCSIG;
    px4CtrlQGCGPS_PrevZCX.Subsystem_Trig_ZCE = POS_ZCSIG;

    // InitializeConditions for UnitDelay: '<S38>/UD'
    //
    //  Block description for '<S38>/UD':
    //
    //   Store in Global RAM

    px4CtrlQGCGPS_DW.UD_DSTATE = px4CtrlQGCGPS_P.DiscreteDerivative1_ICPrevScale;

    // InitializeConditions for DiscreteIntegrator: '<S19>/Discrete-Time Integrator3' 
    px4CtrlQGCGPS_DW.DiscreteTimeIntegrator3_DSTATE =
      px4CtrlQGCGPS_P.DiscreteTimeIntegrator3_IC;

    // InitializeConditions for UnitDelay: '<S20>/UD'
    //
    //  Block description for '<S20>/UD':
    //
    //   Store in Global RAM

    px4CtrlQGCGPS_DW.UD_DSTATE_b =
      px4CtrlQGCGPS_P.DiscreteDerivative1_ICPrevSca_o;

    // InitializeConditions for DiscreteIntegrator: '<S17>/Discrete-Time Integrator3' 
    px4CtrlQGCGPS_DW.DiscreteTimeIntegrator3_DSTAT_a =
      px4CtrlQGCGPS_P.DiscreteTimeIntegrator3_IC_k;

    // InitializeConditions for UnitDelay: '<S29>/UD'
    //
    //  Block description for '<S29>/UD':
    //
    //   Store in Global RAM

    px4CtrlQGCGPS_DW.UD_DSTATE_n =
      px4CtrlQGCGPS_P.DiscreteDerivative1_ICPrevSca_d;

    // InitializeConditions for DiscreteIntegrator: '<S18>/Discrete-Time Integrator3' 
    px4CtrlQGCGPS_DW.DiscreteTimeIntegrator3_DSTAT_m =
      px4CtrlQGCGPS_P.DiscreteTimeIntegrator3_IC_l;

    // InitializeConditions for DiscreteIntegrator: '<S19>/Discrete-Time Integrator' 
    px4CtrlQGCGPS_DW.DiscreteTimeIntegrator_DSTATE =
      px4CtrlQGCGPS_P.DiscreteTimeIntegrator_IC_l;

    // InitializeConditions for DiscreteIntegrator: '<S19>/Discrete-Time Integrator1' 
    px4CtrlQGCGPS_DW.DiscreteTimeIntegrator1_DSTATE =
      px4CtrlQGCGPS_P.DiscreteTimeIntegrator1_IC;

    // InitializeConditions for DiscreteIntegrator: '<S17>/Discrete-Time Integrator' 
    px4CtrlQGCGPS_DW.DiscreteTimeIntegrator_DSTATE_p =
      px4CtrlQGCGPS_P.DiscreteTimeIntegrator_IC_h;

    // InitializeConditions for DiscreteIntegrator: '<S17>/Discrete-Time Integrator1' 
    px4CtrlQGCGPS_DW.DiscreteTimeIntegrator1_DSTAT_i =
      px4CtrlQGCGPS_P.DiscreteTimeIntegrator1_IC_j;

    // InitializeConditions for DiscreteIntegrator: '<S18>/Discrete-Time Integrator' 
    px4CtrlQGCGPS_DW.DiscreteTimeIntegrator_DSTATE_f =
      px4CtrlQGCGPS_P.DiscreteTimeIntegrator_IC_o;

    // InitializeConditions for DiscreteIntegrator: '<S18>/Discrete-Time Integrator1' 
    px4CtrlQGCGPS_DW.DiscreteTimeIntegrator1_DSTAT_g =
      px4CtrlQGCGPS_P.DiscreteTimeIntegrator1_IC_c;

    // InitializeConditions for DiscreteIntegrator: '<Root>/Intgrt_dX'
    px4CtrlQGCGPS_DW.Intgrt_dX_DSTATE = px4CtrlQGCGPS_P.Intgrt_dX_IC;

    // InitializeConditions for DiscreteIntegrator: '<Root>/Intgrt_dY'
    px4CtrlQGCGPS_DW.Intgrt_dY_DSTATE = px4CtrlQGCGPS_P.Intgrt_dY_IC;

    // InitializeConditions for DiscreteIntegrator: '<Root>/Intgrt_ddY'
    px4CtrlQGCGPS_DW.Intgrt_ddY_DSTATE = px4CtrlQGCGPS_P.Intgrt_ddY_IC;

    // InitializeConditions for DiscreteIntegrator: '<Root>/Intgrt_ddX'
    px4CtrlQGCGPS_DW.Intgrt_ddX_DSTATE = px4CtrlQGCGPS_P.Intgrt_ddX_IC;

    // InitializeConditions for DiscreteIntegrator: '<Root>/Intgrt_dZ'
    px4CtrlQGCGPS_DW.Intgrt_dZ_DSTATE = px4CtrlQGCGPS_P.Intgrt_dZ_IC;

    // InitializeConditions for DiscreteIntegrator: '<Root>/Intgrt_ddZ'
    px4CtrlQGCGPS_DW.Intgrt_ddZ_DSTATE = px4CtrlQGCGPS_P.Intgrt_ddZ_IC;

    // SystemInitialize for Enabled SubSystem: '<S47>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S49>/In1' incorporates:
    //   Outport: '<S49>/Out1'

    px4CtrlQGCGPS_B.In1_i = px4CtrlQGCGPS_P.Out1_Y0_g;

    // End of SystemInitialize for SubSystem: '<S47>/Enabled Subsystem'

    // SystemInitialize for Enabled SubSystem: '<S5>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S50>/In1' incorporates:
    //   Outport: '<S50>/Out1'

    px4CtrlQGCGPS_B.In1_a = px4CtrlQGCGPS_P.Out1_Y0_k;

    // End of SystemInitialize for SubSystem: '<S5>/Enabled Subsystem'

    // SystemInitialize for Enabled SubSystem: '<S7>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S52>/In1' incorporates:
    //   Outport: '<S52>/Out1'

    px4CtrlQGCGPS_B.In1 = px4CtrlQGCGPS_P.Out1_Y0;

    // End of SystemInitialize for SubSystem: '<S7>/Enabled Subsystem'

    // SystemInitialize for Enabled SubSystem: '<S61>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S62>/In1' incorporates:
    //   Outport: '<S62>/Out1'

    px4CtrlQGCGPS_B.In1_k = px4CtrlQGCGPS_P.Out1_Y0_gj;

    // End of SystemInitialize for SubSystem: '<S61>/Enabled Subsystem'

    // SystemInitialize for Enabled SubSystem: '<Root>/Subsystem1'
    // InitializeConditions for DiscreteIntegrator: '<S10>/Discrete-Time Integrator' 
    px4CtrlQGCGPS_DW.DiscreteTimeIntegrator_DSTAT_fj =
      px4CtrlQGCGPS_P.DiscreteTimeIntegrator_IC;

    // End of SystemInitialize for SubSystem: '<Root>/Subsystem1'

    // Start for MATLABSystem: '<S6>/SourceBlock'
    px4CtrlQGCGPS_DW.obj_c.matlabCodegenIsDeleted = false;
    px4CtrlQGCGPS_DW.obj_c.isSetupComplete = false;
    px4CtrlQGCGPS_DW.obj_c.isInitialized = 1;
    px4CtrlQGCGPS_DW.obj_c.orbMetadataObj = ORB_ID(vehicle_local_position);
    uORB_read_initialize(px4CtrlQGCGPS_DW.obj_c.orbMetadataObj,
                         &px4CtrlQGCGPS_DW.obj_c.eventStructObj);
    px4CtrlQGCGPS_DW.obj_c.isSetupComplete = true;

    // Start for MATLABSystem: '<Root>/GPS'
    px4CtrlQGCGPS_DW.obj.isInitialized = 0;
    px4CtrlQGCGPS_DW.obj.tunablePropertyChanged[0] = false;
    px4CtrlQGCGPS_DW.obj.tunablePropertyChanged[1] = false;
    px4CtrlQGCGPS_DW.obj.tunablePropertyChanged[2] = false;
    px4CtrlQGCGPS_DW.obj.tunablePropertyChanged[3] = false;
    flag = (px4CtrlQGCGPS_DW.obj.isInitialized == 1);
    if (flag) {
      px4CtrlQGCGPS_DW.obj.TunablePropsChanged = true;
      px4CtrlQGCGPS_DW.obj.tunablePropertyChanged[0] = true;
    }

    px4CtrlQGCGPS_DW.obj.HorizontalPositionAccuracy =
      px4CtrlQGCGPS_P.GPS_HorizontalPositionAccuracy;
    flag = (px4CtrlQGCGPS_DW.obj.isInitialized == 1);
    if (flag) {
      px4CtrlQGCGPS_DW.obj.TunablePropsChanged = true;
      px4CtrlQGCGPS_DW.obj.tunablePropertyChanged[1] = true;
    }

    px4CtrlQGCGPS_DW.obj.VerticalPositionAccuracy =
      px4CtrlQGCGPS_P.GPS_VerticalPositionAccuracy;
    flag = (px4CtrlQGCGPS_DW.obj.isInitialized == 1);
    if (flag) {
      px4CtrlQGCGPS_DW.obj.TunablePropsChanged = true;
      px4CtrlQGCGPS_DW.obj.tunablePropertyChanged[2] = true;
    }

    px4CtrlQGCGPS_DW.obj.VelocityAccuracy = px4CtrlQGCGPS_P.GPS_VelocityAccuracy;
    flag = (px4CtrlQGCGPS_DW.obj.isInitialized == 1);
    if (flag) {
      px4CtrlQGCGPS_DW.obj.TunablePropsChanged = true;
      px4CtrlQGCGPS_DW.obj.tunablePropertyChanged[3] = true;
    }

    px4CtrlQGCGPS_DW.obj.DecayFactor = px4CtrlQGCGPS_P.GPS_DecayFactor;
    px4CtrlQGCGPS_SystemCore_setup(&px4CtrlQGCGPS_DW.obj);

    // End of Start for MATLABSystem: '<Root>/GPS'

    // InitializeConditions for MATLABSystem: '<Root>/GPS'
    px4Ctrl_GPSSensorBase_resetImpl(&px4CtrlQGCGPS_DW.obj);

    // Start for MATLABSystem: '<S47>/SourceBlock'
    px4CtrlQGCGPS_DW.obj_ar.matlabCodegenIsDeleted = false;
    px4CtrlQGCGPS_DW.obj_ar.isSetupComplete = false;
    px4CtrlQGCGPS_DW.obj_ar.isInitialized = 1;
    px4CtrlQGCGPS_DW.obj_ar.orbMetadataObj = ORB_ID(vehicle_gps_position);
    uORB_read_initialize(px4CtrlQGCGPS_DW.obj_ar.orbMetadataObj,
                         &px4CtrlQGCGPS_DW.obj_ar.eventStructObj);
    px4CtrlQGCGPS_DW.obj_ar.isSetupComplete = true;

    // Start for MATLABSystem: '<S48>/SinkBlock' incorporates:
    //   BusAssignment: '<S2>/Bus Assignment'

    px4CtrlQGCGPS_DW.obj_m.matlabCodegenIsDeleted = false;
    px4CtrlQGCGPS_DW.obj_m.isSetupComplete = false;
    px4CtrlQGCGPS_DW.obj_m.isInitialized = 1;
    px4CtrlQGCGPS_DW.obj_m.orbMetadataObj = ORB_ID(vehicle_gps_position);
    uORB_write_initialize(px4CtrlQGCGPS_DW.obj_m.orbMetadataObj,
                          &px4CtrlQGCGPS_DW.obj_m.orbAdvertiseObj,
                          &px4CtrlQGCGPS_B.BusAssignment_n_c, 1);
    px4CtrlQGCGPS_DW.obj_m.isSetupComplete = true;

    // Start for MATLABSystem: '<S7>/SourceBlock'
    px4CtrlQGCGPS_DW.obj_n.matlabCodegenIsDeleted = false;
    px4CtrlQGCGPS_DW.obj_n.isSetupComplete = false;
    px4CtrlQGCGPS_DW.obj_n.isInitialized = 1;
    px4CtrlQGCGPS_DW.obj_n.orbMetadataObj = ORB_ID(vehicle_odometry);
    uORB_read_initialize(px4CtrlQGCGPS_DW.obj_n.orbMetadataObj,
                         &px4CtrlQGCGPS_DW.obj_n.eventStructObj);
    px4CtrlQGCGPS_DW.obj_n.isSetupComplete = true;

    // Start for MATLABSystem: '<S61>/SourceBlock'
    px4CtrlQGCGPS_DW.obj_a.matlabCodegenIsDeleted = false;
    px4CtrlQGCGPS_DW.obj_a.isSetupComplete = false;
    px4CtrlQGCGPS_DW.obj_a.isInitialized = 1;
    px4CtrlQGCGPS_DW.obj_a.orbMetadataObj = ORB_ID(input_rc);
    uORB_read_initialize(px4CtrlQGCGPS_DW.obj_a.orbMetadataObj,
                         &px4CtrlQGCGPS_DW.obj_a.eventStructObj);
    px4CtrlQGCGPS_DW.obj_a.isSetupComplete = true;

    // Start for MATLABSystem: '<Root>/PX4 PWM Output1' incorporates:
    //   Constant: '<Root>/Constant2'

    px4CtrlQGCGPS_DW.obj_g.errorStatus = 0U;
    px4CtrlQGCGPS_DW.obj_g.isInitialized = 0;
    px4CtrlQGCGPS_DW.obj_g.matlabCodegenIsDeleted = false;
    px4CtrlQGCGP_SystemCore_setup_j(&px4CtrlQGCGPS_DW.obj_g, rtb_DataStoreRead6,
      px4CtrlQGCGPS_P.Constant2_Value_kf);

    // Start for MATLABSystem: '<S5>/SourceBlock'
    px4CtrlQGCGPS_DW.obj_l.matlabCodegenIsDeleted = false;
    px4CtrlQGCGPS_DW.obj_l.isSetupComplete = false;
    px4CtrlQGCGPS_DW.obj_l.isInitialized = 1;
    px4CtrlQGCGPS_DW.obj_l.orbMetadataObj = ORB_ID(actuator_outputs);
    uORB_read_initialize(px4CtrlQGCGPS_DW.obj_l.orbMetadataObj,
                         &px4CtrlQGCGPS_DW.obj_l.eventStructObj);
    px4CtrlQGCGPS_DW.obj_l.isSetupComplete = true;

    // Enable for Sin: '<Root>/Sine Wave'
    px4CtrlQGCGPS_DW.systemEnable = 1;
  }
}

// Model terminate function
void px4CtrlQGCGPS_terminate(void)
{
  // Terminate for MATLABSystem: '<S6>/SourceBlock'
  if (!px4CtrlQGCGPS_DW.obj_c.matlabCodegenIsDeleted) {
    px4CtrlQGCGPS_DW.obj_c.matlabCodegenIsDeleted = true;
    if ((px4CtrlQGCGPS_DW.obj_c.isInitialized == 1) &&
        px4CtrlQGCGPS_DW.obj_c.isSetupComplete) {
      uORB_read_terminate(&px4CtrlQGCGPS_DW.obj_c.eventStructObj);
    }
  }

  // End of Terminate for MATLABSystem: '<S6>/SourceBlock'

  // Terminate for MATLABSystem: '<S47>/SourceBlock'
  if (!px4CtrlQGCGPS_DW.obj_ar.matlabCodegenIsDeleted) {
    px4CtrlQGCGPS_DW.obj_ar.matlabCodegenIsDeleted = true;
    if ((px4CtrlQGCGPS_DW.obj_ar.isInitialized == 1) &&
        px4CtrlQGCGPS_DW.obj_ar.isSetupComplete) {
      uORB_read_terminate(&px4CtrlQGCGPS_DW.obj_ar.eventStructObj);
    }
  }

  // End of Terminate for MATLABSystem: '<S47>/SourceBlock'

  // Terminate for MATLABSystem: '<S48>/SinkBlock'
  if (!px4CtrlQGCGPS_DW.obj_m.matlabCodegenIsDeleted) {
    px4CtrlQGCGPS_DW.obj_m.matlabCodegenIsDeleted = true;
    if ((px4CtrlQGCGPS_DW.obj_m.isInitialized == 1) &&
        px4CtrlQGCGPS_DW.obj_m.isSetupComplete) {
      uORB_write_terminate(&px4CtrlQGCGPS_DW.obj_m.orbAdvertiseObj);
    }
  }

  // End of Terminate for MATLABSystem: '<S48>/SinkBlock'

  // Terminate for MATLABSystem: '<S7>/SourceBlock'
  if (!px4CtrlQGCGPS_DW.obj_n.matlabCodegenIsDeleted) {
    px4CtrlQGCGPS_DW.obj_n.matlabCodegenIsDeleted = true;
    if ((px4CtrlQGCGPS_DW.obj_n.isInitialized == 1) &&
        px4CtrlQGCGPS_DW.obj_n.isSetupComplete) {
      uORB_read_terminate(&px4CtrlQGCGPS_DW.obj_n.eventStructObj);
    }
  }

  // End of Terminate for MATLABSystem: '<S7>/SourceBlock'

  // Terminate for MATLABSystem: '<S61>/SourceBlock'
  if (!px4CtrlQGCGPS_DW.obj_a.matlabCodegenIsDeleted) {
    px4CtrlQGCGPS_DW.obj_a.matlabCodegenIsDeleted = true;
    if ((px4CtrlQGCGPS_DW.obj_a.isInitialized == 1) &&
        px4CtrlQGCGPS_DW.obj_a.isSetupComplete) {
      uORB_read_terminate(&px4CtrlQGCGPS_DW.obj_a.eventStructObj);
    }
  }

  // End of Terminate for MATLABSystem: '<S61>/SourceBlock'

  // Terminate for MATLABSystem: '<Root>/PX4 PWM Output1'
  if (!px4CtrlQGCGPS_DW.obj_g.matlabCodegenIsDeleted) {
    px4CtrlQGCGPS_DW.obj_g.matlabCodegenIsDeleted = true;
    if ((px4CtrlQGCGPS_DW.obj_g.isInitialized == 1) &&
        px4CtrlQGCGPS_DW.obj_g.isSetupComplete) {
      uint16_T status;
      status = pwm_disarm(&px4CtrlQGCGPS_DW.obj_g.pwmDevHandler,
                          &px4CtrlQGCGPS_DW.obj_g.armAdvertiseObj);
      px4CtrlQGCGPS_DW.obj_g.errorStatus = static_cast<uint16_T>
        (px4CtrlQGCGPS_DW.obj_g.errorStatus | status);
      status = pwm_resetServo(&px4CtrlQGCGPS_DW.obj_g.pwmDevHandler,
        px4CtrlQGCGPS_DW.obj_g.servoCount, px4CtrlQGCGPS_DW.obj_g.channelMask,
        px4CtrlQGCGPS_DW.obj_g.isMain,
        &px4CtrlQGCGPS_DW.obj_g.actuatorAdvertiseObj);
      px4CtrlQGCGPS_DW.obj_g.errorStatus = static_cast<uint16_T>
        (px4CtrlQGCGPS_DW.obj_g.errorStatus | status);
      status = pwm_close(&px4CtrlQGCGPS_DW.obj_g.pwmDevHandler,
                         &px4CtrlQGCGPS_DW.obj_g.actuatorAdvertiseObj,
                         &px4CtrlQGCGPS_DW.obj_g.armAdvertiseObj);
      px4CtrlQGCGPS_DW.obj_g.errorStatus = static_cast<uint16_T>
        (px4CtrlQGCGPS_DW.obj_g.errorStatus | status);
    }
  }

  // End of Terminate for MATLABSystem: '<Root>/PX4 PWM Output1'

  // Terminate for MATLABSystem: '<S5>/SourceBlock'
  if (!px4CtrlQGCGPS_DW.obj_l.matlabCodegenIsDeleted) {
    px4CtrlQGCGPS_DW.obj_l.matlabCodegenIsDeleted = true;
    if ((px4CtrlQGCGPS_DW.obj_l.isInitialized == 1) &&
        px4CtrlQGCGPS_DW.obj_l.isSetupComplete) {
      uORB_read_terminate(&px4CtrlQGCGPS_DW.obj_l.eventStructObj);
    }
  }

  // End of Terminate for MATLABSystem: '<S5>/SourceBlock'
}

//
// File trailer for generated code.
//
// [EOF]
//
